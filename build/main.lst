ARM GAS  /tmp/ccBHwZHp.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.comm	huart1,64,4
  16              		.comm	huart3,64,4
  17              		.comm	hdma_usart1_tx,68,4
  18              		.comm	hdma_usart1_rx,68,4
  19              		.comm	hdma_usart3_tx,68,4
  20              		.comm	hdma_usart3_rx,68,4
  21              		.comm	M365State,32,4
  22              		.comm	MSPublic,84,4
  23              		.global	systick_cnt
  24              		.section	.bss.systick_cnt,"aw",%nobits
  25              		.align	2
  28              	systick_cnt:
  29 0000 00000000 		.space	4
  30              		.section	.text.UserSysTickHandler,"ax",%progbits
  31              		.align	1
  32              		.global	UserSysTickHandler
  33              		.arch armv7-m
  34              		.syntax unified
  35              		.thumb
  36              		.thumb_func
  37              		.fpu softvfp
  39              	UserSysTickHandler:
  40              	.LFB120:
  41              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** #include "main.h"
   2:Core/Src/main.c **** #include "print.h"
   3:Core/Src/main.c **** #include "config.h"
   4:Core/Src/main.c **** #include "motor.h"
   5:Core/Src/main.c **** #include "button_processing.h"
   6:Core/Src/main.c **** #include "M365_Dashboard.h"
   7:Core/Src/main.c **** 
   8:Core/Src/main.c **** UART_HandleTypeDef huart1;
   9:Core/Src/main.c **** UART_HandleTypeDef huart3;
  10:Core/Src/main.c **** 
  11:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart1_tx;
  12:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart1_rx;
  13:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart3_tx;
  14:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart3_rx;
  15:Core/Src/main.c **** 
  16:Core/Src/main.c **** M365State_t M365State;
  17:Core/Src/main.c **** MotorStatePublic_t MSPublic;
  18:Core/Src/main.c **** 
  19:Core/Src/main.c **** volatile uint32_t systick_cnt = 0;
ARM GAS  /tmp/ccBHwZHp.s 			page 2


  20:Core/Src/main.c **** 
  21:Core/Src/main.c **** // every 1ms
  22:Core/Src/main.c **** void UserSysTickHandler(void) {
  42              		.loc 1 22 31
  43              		.cfi_startproc
  44              		@ args = 0, pretend = 0, frame = 0
  45              		@ frame_needed = 1, uses_anonymous_args = 0
  46 0000 80B5     		push	{r7, lr}
  47              	.LCFI0:
  48              		.cfi_def_cfa_offset 8
  49              		.cfi_offset 7, -8
  50              		.cfi_offset 14, -4
  51 0002 00AF     		add	r7, sp, #0
  52              	.LCFI1:
  53              		.cfi_def_cfa_register 7
  23:Core/Src/main.c ****   static uint32_t c;  
  24:Core/Src/main.c ****   
  25:Core/Src/main.c ****   systick_cnt++;
  54              		.loc 1 25 14
  55 0004 0D4B     		ldr	r3, .L3
  56 0006 1B68     		ldr	r3, [r3]
  57 0008 0133     		adds	r3, r3, #1
  58 000a 0C4A     		ldr	r2, .L3
  59 000c 1360     		str	r3, [r2]
  26:Core/Src/main.c **** 
  27:Core/Src/main.c ****   // every 10ms
  28:Core/Src/main.c ****   if ((c % 10) == 0) {
  60              		.loc 1 28 10
  61 000e 0C4B     		ldr	r3, .L3+4
  62 0010 1968     		ldr	r1, [r3]
  63 0012 0C4B     		ldr	r3, .L3+8
  64 0014 A3FB0123 		umull	r2, r3, r3, r1
  65 0018 DA08     		lsrs	r2, r3, #3
  66 001a 1346     		mov	r3, r2
  67 001c 9B00     		lsls	r3, r3, #2
  68 001e 1344     		add	r3, r3, r2
  69 0020 5B00     		lsls	r3, r3, #1
  70 0022 CA1A     		subs	r2, r1, r3
  71              		.loc 1 28 6
  72 0024 002A     		cmp	r2, #0
  73 0026 02D1     		bne	.L2
  29:Core/Src/main.c ****     motor_slow_loop(&MSPublic);
  74              		.loc 1 29 5
  75 0028 0748     		ldr	r0, .L3+12
  76 002a FFF7FEFF 		bl	motor_slow_loop
  77              	.L2:
  30:Core/Src/main.c ****   }
  31:Core/Src/main.c ****   c++;
  78              		.loc 1 31 4
  79 002e 044B     		ldr	r3, .L3+4
  80 0030 1B68     		ldr	r3, [r3]
  81 0032 0133     		adds	r3, r3, #1
  82 0034 024A     		ldr	r2, .L3+4
  83 0036 1360     		str	r3, [r2]
  32:Core/Src/main.c **** }
  84              		.loc 1 32 1
  85 0038 00BF     		nop
ARM GAS  /tmp/ccBHwZHp.s 			page 3


  86 003a 80BD     		pop	{r7, pc}
  87              	.L4:
  88              		.align	2
  89              	.L3:
  90 003c 00000000 		.word	systick_cnt
  91 0040 00000000 		.word	c.9903
  92 0044 CDCCCCCC 		.word	-858993459
  93 0048 00000000 		.word	MSPublic
  94              		.cfi_endproc
  95              	.LFE120:
  97              		.section	.text.DMA_Init,"ax",%progbits
  98              		.align	1
  99              		.syntax unified
 100              		.thumb
 101              		.thumb_func
 102              		.fpu softvfp
 104              	DMA_Init:
 105              	.LFB121:
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /**
  35:Core/Src/main.c ****  * Enable DMA controller clock
  36:Core/Src/main.c ****  */
  37:Core/Src/main.c **** static void DMA_Init(void) {
 106              		.loc 1 37 28
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 8
 109              		@ frame_needed = 1, uses_anonymous_args = 0
 110 0000 80B5     		push	{r7, lr}
 111              	.LCFI2:
 112              		.cfi_def_cfa_offset 8
 113              		.cfi_offset 7, -8
 114              		.cfi_offset 14, -4
 115 0002 82B0     		sub	sp, sp, #8
 116              	.LCFI3:
 117              		.cfi_def_cfa_offset 16
 118 0004 00AF     		add	r7, sp, #0
 119              	.LCFI4:
 120              		.cfi_def_cfa_register 7
 121              	.LBB4:
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** 	/* DMA controller clock enable */
  40:Core/Src/main.c **** 	__HAL_RCC_DMA1_CLK_ENABLE();
 122              		.loc 1 40 2
 123 0006 144B     		ldr	r3, .L6
 124 0008 5B69     		ldr	r3, [r3, #20]
 125 000a 134A     		ldr	r2, .L6
 126 000c 43F00103 		orr	r3, r3, #1
 127 0010 5361     		str	r3, [r2, #20]
 128 0012 114B     		ldr	r3, .L6
 129 0014 5B69     		ldr	r3, [r3, #20]
 130 0016 03F00103 		and	r3, r3, #1
 131 001a 7B60     		str	r3, [r7, #4]
 132 001c 7B68     		ldr	r3, [r7, #4]
 133              	.LBE4:
  41:Core/Src/main.c **** 
  42:Core/Src/main.c ****   // DMA channel 3: used for USART3_RX
  43:Core/Src/main.c **** 	/* DMA1_Channel5_IRQn interrupt configuration */
ARM GAS  /tmp/ccBHwZHp.s 			page 4


  44:Core/Src/main.c **** 	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 3, 0);
 134              		.loc 1 44 2
 135 001e 0022     		movs	r2, #0
 136 0020 0321     		movs	r1, #3
 137 0022 0D20     		movs	r0, #13
 138 0024 FFF7FEFF 		bl	HAL_NVIC_SetPriority
  45:Core/Src/main.c **** 	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 139              		.loc 1 45 2
 140 0028 0D20     		movs	r0, #13
 141 002a FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
  46:Core/Src/main.c **** 
  47:Core/Src/main.c ****   // DMA channel 4: used for USART1_TX
  48:Core/Src/main.c **** 	/* DMA1_Channel4_IRQn interrupt configuration */
  49:Core/Src/main.c **** 	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 3, 0);
 142              		.loc 1 49 2
 143 002e 0022     		movs	r2, #0
 144 0030 0321     		movs	r1, #3
 145 0032 0E20     		movs	r0, #14
 146 0034 FFF7FEFF 		bl	HAL_NVIC_SetPriority
  50:Core/Src/main.c **** 	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 147              		.loc 1 50 2
 148 0038 0E20     		movs	r0, #14
 149 003a FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
  51:Core/Src/main.c **** 
  52:Core/Src/main.c ****   // DMA channel 5: used for USART1_RX
  53:Core/Src/main.c **** 	/* DMA1_Channel5_IRQn interrupt configuration */
  54:Core/Src/main.c **** 	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 3, 0);
 150              		.loc 1 54 2
 151 003e 0022     		movs	r2, #0
 152 0040 0321     		movs	r1, #3
 153 0042 0F20     		movs	r0, #15
 154 0044 FFF7FEFF 		bl	HAL_NVIC_SetPriority
  55:Core/Src/main.c **** 	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 155              		.loc 1 55 2
 156 0048 0F20     		movs	r0, #15
 157 004a FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
  56:Core/Src/main.c **** }
 158              		.loc 1 56 1
 159 004e 00BF     		nop
 160 0050 0837     		adds	r7, r7, #8
 161              	.LCFI5:
 162              		.cfi_def_cfa_offset 8
 163 0052 BD46     		mov	sp, r7
 164              	.LCFI6:
 165              		.cfi_def_cfa_register 13
 166              		@ sp needed
 167 0054 80BD     		pop	{r7, pc}
 168              	.L7:
 169 0056 00BF     		.align	2
 170              	.L6:
 171 0058 00100240 		.word	1073876992
 172              		.cfi_endproc
 173              	.LFE121:
 175              		.section	.rodata
 176              		.align	2
 177              	.LC0:
 178 0000 436F7265 		.ascii	"Core/Src/main.c\000"
ARM GAS  /tmp/ccBHwZHp.s 			page 5


 178      2F537263 
 178      2F6D6169 
 178      6E2E6300 
 179              		.section	.text.SystemClock_Config,"ax",%progbits
 180              		.align	1
 181              		.global	SystemClock_Config
 182              		.syntax unified
 183              		.thumb
 184              		.thumb_func
 185              		.fpu softvfp
 187              	SystemClock_Config:
 188              	.LFB122:
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** /**
  59:Core/Src/main.c ****  * @brief System Clock Configuration
  60:Core/Src/main.c ****  * @retval None
  61:Core/Src/main.c ****  */
  62:Core/Src/main.c **** void SystemClock_Config(void) {
 189              		.loc 1 62 31
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 80
 192              		@ frame_needed = 1, uses_anonymous_args = 0
 193 0000 80B5     		push	{r7, lr}
 194              	.LCFI7:
 195              		.cfi_def_cfa_offset 8
 196              		.cfi_offset 7, -8
 197              		.cfi_offset 14, -4
 198 0002 94B0     		sub	sp, sp, #80
 199              	.LCFI8:
 200              		.cfi_def_cfa_offset 88
 201 0004 00AF     		add	r7, sp, #0
 202              	.LCFI9:
 203              		.cfi_def_cfa_register 7
  63:Core/Src/main.c **** 	RCC_OscInitTypeDef RCC_OscInitStruct;
  64:Core/Src/main.c **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct;
  65:Core/Src/main.c **** 	RCC_PeriphCLKInitTypeDef PeriphClkInit;
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** 	/**Initializes the CPU, AHB and APB busses clocks
  68:Core/Src/main.c **** 	 */
  69:Core/Src/main.c **** 	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 204              		.loc 1 69 35
 205 0006 0223     		movs	r3, #2
 206 0008 BB62     		str	r3, [r7, #40]
  70:Core/Src/main.c **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 207              		.loc 1 70 29
 208 000a 0123     		movs	r3, #1
 209 000c BB63     		str	r3, [r7, #56]
  71:Core/Src/main.c **** 	RCC_OscInitStruct.HSICalibrationValue = 16;
 210              		.loc 1 71 40
 211 000e 1023     		movs	r3, #16
 212 0010 FB63     		str	r3, [r7, #60]
  72:Core/Src/main.c **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 213              		.loc 1 72 33
 214 0012 0223     		movs	r3, #2
 215 0014 7B64     		str	r3, [r7, #68]
  73:Core/Src/main.c **** 	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 216              		.loc 1 73 34
ARM GAS  /tmp/ccBHwZHp.s 			page 6


 217 0016 0023     		movs	r3, #0
 218 0018 BB64     		str	r3, [r7, #72]
  74:Core/Src/main.c **** 	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 219              		.loc 1 74 31
 220 001a 4FF46013 		mov	r3, #3670016
 221 001e FB64     		str	r3, [r7, #76]
  75:Core/Src/main.c **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 222              		.loc 1 75 6
 223 0020 07F12803 		add	r3, r7, #40
 224 0024 1846     		mov	r0, r3
 225 0026 FFF7FEFF 		bl	HAL_RCC_OscConfig
 226 002a 0346     		mov	r3, r0
 227              		.loc 1 75 5
 228 002c 002B     		cmp	r3, #0
 229 002e 03D0     		beq	.L9
  76:Core/Src/main.c **** 		_Error_Handler(__FILE__, __LINE__);
 230              		.loc 1 76 3
 231 0030 4C21     		movs	r1, #76
 232 0032 2148     		ldr	r0, .L12
 233 0034 FFF7FEFF 		bl	_Error_Handler
 234              	.L9:
  77:Core/Src/main.c **** 	}
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** 	/**Initializes the CPU, AHB and APB busses clocks
  80:Core/Src/main.c **** 	 */
  81:Core/Src/main.c **** 	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 235              		.loc 1 81 30
 236 0038 0F23     		movs	r3, #15
 237 003a 7B61     		str	r3, [r7, #20]
  82:Core/Src/main.c **** 			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  83:Core/Src/main.c **** 	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 238              		.loc 1 83 33
 239 003c 0223     		movs	r3, #2
 240 003e BB61     		str	r3, [r7, #24]
  84:Core/Src/main.c **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 241              		.loc 1 84 34
 242 0040 0023     		movs	r3, #0
 243 0042 FB61     		str	r3, [r7, #28]
  85:Core/Src/main.c **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 244              		.loc 1 85 35
 245 0044 4FF48063 		mov	r3, #1024
 246 0048 3B62     		str	r3, [r7, #32]
  86:Core/Src/main.c **** 	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 247              		.loc 1 86 35
 248 004a 0023     		movs	r3, #0
 249 004c 7B62     		str	r3, [r7, #36]
  87:Core/Src/main.c **** 
  88:Core/Src/main.c **** 	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 250              		.loc 1 88 6
 251 004e 07F11403 		add	r3, r7, #20
 252 0052 0221     		movs	r1, #2
 253 0054 1846     		mov	r0, r3
 254 0056 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 255 005a 0346     		mov	r3, r0
 256              		.loc 1 88 5
 257 005c 002B     		cmp	r3, #0
 258 005e 03D0     		beq	.L10
ARM GAS  /tmp/ccBHwZHp.s 			page 7


  89:Core/Src/main.c **** 		_Error_Handler(__FILE__, __LINE__);
 259              		.loc 1 89 3
 260 0060 5921     		movs	r1, #89
 261 0062 1548     		ldr	r0, .L12
 262 0064 FFF7FEFF 		bl	_Error_Handler
 263              	.L10:
  90:Core/Src/main.c **** 	}
  91:Core/Src/main.c **** 
  92:Core/Src/main.c **** 	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 264              		.loc 1 92 37
 265 0068 0223     		movs	r3, #2
 266 006a 7B60     		str	r3, [r7, #4]
  93:Core/Src/main.c **** 	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 267              		.loc 1 93 34
 268 006c 4FF40043 		mov	r3, #32768
 269 0070 FB60     		str	r3, [r7, #12]
  94:Core/Src/main.c **** 	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 270              		.loc 1 94 6
 271 0072 3B1D     		adds	r3, r7, #4
 272 0074 1846     		mov	r0, r3
 273 0076 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 274 007a 0346     		mov	r3, r0
 275              		.loc 1 94 5
 276 007c 002B     		cmp	r3, #0
 277 007e 03D0     		beq	.L11
  95:Core/Src/main.c **** 		_Error_Handler(__FILE__, __LINE__);
 278              		.loc 1 95 3
 279 0080 5F21     		movs	r1, #95
 280 0082 0D48     		ldr	r0, .L12
 281 0084 FFF7FEFF 		bl	_Error_Handler
 282              	.L11:
  96:Core/Src/main.c **** 	}
  97:Core/Src/main.c **** 
  98:Core/Src/main.c **** 	/**Configure the Systick interrupt time
  99:Core/Src/main.c **** 	 */
 100:Core/Src/main.c **** 	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 283              		.loc 1 100 21
 284 0088 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 285 008c 0346     		mov	r3, r0
 286              		.loc 1 100 2
 287 008e 0B4A     		ldr	r2, .L12+4
 288 0090 A2FB0323 		umull	r2, r3, r2, r3
 289 0094 9B09     		lsrs	r3, r3, #6
 290 0096 1846     		mov	r0, r3
 291 0098 FFF7FEFF 		bl	HAL_SYSTICK_Config
 101:Core/Src/main.c **** 
 102:Core/Src/main.c **** 	/**Configure the Systick
 103:Core/Src/main.c **** 	 */
 104:Core/Src/main.c **** 	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 292              		.loc 1 104 2
 293 009c 0420     		movs	r0, #4
 294 009e FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 105:Core/Src/main.c **** 
 106:Core/Src/main.c **** 	/* SysTick_IRQn interrupt configuration */
 107:Core/Src/main.c **** 	HAL_NVIC_SetPriority(SysTick_IRQn, 2, 0);
 295              		.loc 1 107 2
 296 00a2 0022     		movs	r2, #0
ARM GAS  /tmp/ccBHwZHp.s 			page 8


 297 00a4 0221     		movs	r1, #2
 298 00a6 4FF0FF30 		mov	r0, #-1
 299 00aa FFF7FEFF 		bl	HAL_NVIC_SetPriority
 108:Core/Src/main.c **** }
 300              		.loc 1 108 1
 301 00ae 00BF     		nop
 302 00b0 5037     		adds	r7, r7, #80
 303              	.LCFI10:
 304              		.cfi_def_cfa_offset 8
 305 00b2 BD46     		mov	sp, r7
 306              	.LCFI11:
 307              		.cfi_def_cfa_register 13
 308              		@ sp needed
 309 00b4 80BD     		pop	{r7, pc}
 310              	.L13:
 311 00b6 00BF     		.align	2
 312              	.L12:
 313 00b8 00000000 		.word	.LC0
 314 00bc D34D6210 		.word	274877907
 315              		.cfi_endproc
 316              	.LFE122:
 318              		.section	.text.USART1_UART_Init,"ax",%progbits
 319              		.align	1
 320              		.syntax unified
 321              		.thumb
 322              		.thumb_func
 323              		.fpu softvfp
 325              	USART1_UART_Init:
 326              	.LFB123:
 109:Core/Src/main.c **** 
 110:Core/Src/main.c **** /**
 111:Core/Src/main.c ****  * @brief USART1 Initialization Function
 112:Core/Src/main.c ****  * @param None
 113:Core/Src/main.c ****  * @retval None
 114:Core/Src/main.c ****  */
 115:Core/Src/main.c **** static void USART1_UART_Init(void) {
 327              		.loc 1 115 36
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 0
 330              		@ frame_needed = 1, uses_anonymous_args = 0
 331 0000 80B5     		push	{r7, lr}
 332              	.LCFI12:
 333              		.cfi_def_cfa_offset 8
 334              		.cfi_offset 7, -8
 335              		.cfi_offset 14, -4
 336 0002 00AF     		add	r7, sp, #0
 337              	.LCFI13:
 338              		.cfi_def_cfa_register 7
 116:Core/Src/main.c **** 
 117:Core/Src/main.c **** 	huart1.Instance = USART1;
 339              		.loc 1 117 18
 340 0004 114B     		ldr	r3, .L17
 341 0006 124A     		ldr	r2, .L17+4
 342 0008 1A60     		str	r2, [r3]
 118:Core/Src/main.c **** 	huart1.Init.BaudRate = 115200;
 343              		.loc 1 118 23
 344 000a 104B     		ldr	r3, .L17
ARM GAS  /tmp/ccBHwZHp.s 			page 9


 345 000c 4FF4E132 		mov	r2, #115200
 346 0010 5A60     		str	r2, [r3, #4]
 119:Core/Src/main.c **** 	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 347              		.loc 1 119 25
 348 0012 0E4B     		ldr	r3, .L17
 349 0014 0022     		movs	r2, #0
 350 0016 9A60     		str	r2, [r3, #8]
 120:Core/Src/main.c **** 	huart1.Init.StopBits = UART_STOPBITS_1;
 351              		.loc 1 120 23
 352 0018 0C4B     		ldr	r3, .L17
 353 001a 0022     		movs	r2, #0
 354 001c DA60     		str	r2, [r3, #12]
 121:Core/Src/main.c **** 	huart1.Init.Parity = UART_PARITY_NONE;
 355              		.loc 1 121 21
 356 001e 0B4B     		ldr	r3, .L17
 357 0020 0022     		movs	r2, #0
 358 0022 1A61     		str	r2, [r3, #16]
 122:Core/Src/main.c **** 	huart1.Init.Mode = UART_MODE_TX_RX;
 359              		.loc 1 122 19
 360 0024 094B     		ldr	r3, .L17
 361 0026 0C22     		movs	r2, #12
 362 0028 5A61     		str	r2, [r3, #20]
 123:Core/Src/main.c **** 	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 363              		.loc 1 123 24
 364 002a 084B     		ldr	r3, .L17
 365 002c 0022     		movs	r2, #0
 366 002e 9A61     		str	r2, [r3, #24]
 124:Core/Src/main.c **** 	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 367              		.loc 1 124 27
 368 0030 064B     		ldr	r3, .L17
 369 0032 0022     		movs	r2, #0
 370 0034 DA61     		str	r2, [r3, #28]
 125:Core/Src/main.c **** 	if (HAL_HalfDuplex_Init(&huart1) != HAL_OK) {
 371              		.loc 1 125 6
 372 0036 0548     		ldr	r0, .L17
 373 0038 FFF7FEFF 		bl	HAL_HalfDuplex_Init
 374 003c 0346     		mov	r3, r0
 375              		.loc 1 125 5
 376 003e 002B     		cmp	r3, #0
 377 0040 01D0     		beq	.L16
 126:Core/Src/main.c **** 		Error_Handler();
 378              		.loc 1 126 3
 379 0042 FFF7FEFF 		bl	Error_Handler
 380              	.L16:
 127:Core/Src/main.c **** 	}
 128:Core/Src/main.c **** }
 381              		.loc 1 128 1
 382 0046 00BF     		nop
 383 0048 80BD     		pop	{r7, pc}
 384              	.L18:
 385 004a 00BF     		.align	2
 386              	.L17:
 387 004c 00000000 		.word	huart1
 388 0050 00380140 		.word	1073821696
 389              		.cfi_endproc
 390              	.LFE123:
 392              		.section	.text.USART3_UART_Init,"ax",%progbits
ARM GAS  /tmp/ccBHwZHp.s 			page 10


 393              		.align	1
 394              		.syntax unified
 395              		.thumb
 396              		.thumb_func
 397              		.fpu softvfp
 399              	USART3_UART_Init:
 400              	.LFB124:
 129:Core/Src/main.c **** 
 130:Core/Src/main.c **** /**
 131:Core/Src/main.c ****  * @brief USART3 Initialization Function
 132:Core/Src/main.c ****  * @param None
 133:Core/Src/main.c ****  * @retval None
 134:Core/Src/main.c ****  */
 135:Core/Src/main.c **** static void USART3_UART_Init(void) {
 401              		.loc 1 135 36
 402              		.cfi_startproc
 403              		@ args = 0, pretend = 0, frame = 0
 404              		@ frame_needed = 1, uses_anonymous_args = 0
 405 0000 80B5     		push	{r7, lr}
 406              	.LCFI14:
 407              		.cfi_def_cfa_offset 8
 408              		.cfi_offset 7, -8
 409              		.cfi_offset 14, -4
 410 0002 00AF     		add	r7, sp, #0
 411              	.LCFI15:
 412              		.cfi_def_cfa_register 7
 136:Core/Src/main.c **** 
 137:Core/Src/main.c **** 	huart3.Instance = USART3;
 413              		.loc 1 137 18
 414 0004 124B     		ldr	r3, .L22
 415 0006 134A     		ldr	r2, .L22+4
 416 0008 1A60     		str	r2, [r3]
 138:Core/Src/main.c **** 
 139:Core/Src/main.c **** 	huart3.Init.BaudRate = 115200;
 417              		.loc 1 139 23
 418 000a 114B     		ldr	r3, .L22
 419 000c 4FF4E132 		mov	r2, #115200
 420 0010 5A60     		str	r2, [r3, #4]
 140:Core/Src/main.c **** 
 141:Core/Src/main.c **** 	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 421              		.loc 1 141 25
 422 0012 0F4B     		ldr	r3, .L22
 423 0014 0022     		movs	r2, #0
 424 0016 9A60     		str	r2, [r3, #8]
 142:Core/Src/main.c **** 	huart3.Init.StopBits = UART_STOPBITS_1;
 425              		.loc 1 142 23
 426 0018 0D4B     		ldr	r3, .L22
 427 001a 0022     		movs	r2, #0
 428 001c DA60     		str	r2, [r3, #12]
 143:Core/Src/main.c **** 	huart3.Init.Parity = UART_PARITY_NONE;
 429              		.loc 1 143 21
 430 001e 0C4B     		ldr	r3, .L22
 431 0020 0022     		movs	r2, #0
 432 0022 1A61     		str	r2, [r3, #16]
 144:Core/Src/main.c **** 	huart3.Init.Mode = UART_MODE_TX_RX;
 433              		.loc 1 144 19
 434 0024 0A4B     		ldr	r3, .L22
ARM GAS  /tmp/ccBHwZHp.s 			page 11


 435 0026 0C22     		movs	r2, #12
 436 0028 5A61     		str	r2, [r3, #20]
 145:Core/Src/main.c **** 	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 437              		.loc 1 145 24
 438 002a 094B     		ldr	r3, .L22
 439 002c 0022     		movs	r2, #0
 440 002e 9A61     		str	r2, [r3, #24]
 146:Core/Src/main.c **** 	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 441              		.loc 1 146 27
 442 0030 074B     		ldr	r3, .L22
 443 0032 0022     		movs	r2, #0
 444 0034 DA61     		str	r2, [r3, #28]
 147:Core/Src/main.c **** 	if (HAL_UART_Init(&huart3) != HAL_OK) {
 445              		.loc 1 147 6
 446 0036 0648     		ldr	r0, .L22
 447 0038 FFF7FEFF 		bl	HAL_UART_Init
 448 003c 0346     		mov	r3, r0
 449              		.loc 1 147 5
 450 003e 002B     		cmp	r3, #0
 451 0040 03D0     		beq	.L21
 148:Core/Src/main.c **** 		_Error_Handler(__FILE__, __LINE__);
 452              		.loc 1 148 3
 453 0042 9421     		movs	r1, #148
 454 0044 0448     		ldr	r0, .L22+8
 455 0046 FFF7FEFF 		bl	_Error_Handler
 456              	.L21:
 149:Core/Src/main.c **** 	}
 150:Core/Src/main.c **** }
 457              		.loc 1 150 1
 458 004a 00BF     		nop
 459 004c 80BD     		pop	{r7, pc}
 460              	.L23:
 461 004e 00BF     		.align	2
 462              	.L22:
 463 0050 00000000 		.word	huart3
 464 0054 00480040 		.word	1073760256
 465 0058 00000000 		.word	.LC0
 466              		.cfi_endproc
 467              	.LFE124:
 469              		.section	.text.GPIO_Init,"ax",%progbits
 470              		.align	1
 471              		.syntax unified
 472              		.thumb
 473              		.thumb_func
 474              		.fpu softvfp
 476              	GPIO_Init:
 477              	.LFB125:
 151:Core/Src/main.c **** 
 152:Core/Src/main.c **** /**
 153:Core/Src/main.c ****  * @brief GPIO Initialization Function
 154:Core/Src/main.c ****  * @param None
 155:Core/Src/main.c ****  * @retval None
 156:Core/Src/main.c ****  */
 157:Core/Src/main.c **** static void GPIO_Init(void) {
 478              		.loc 1 157 29
 479              		.cfi_startproc
 480              		@ args = 0, pretend = 0, frame = 32
ARM GAS  /tmp/ccBHwZHp.s 			page 12


 481              		@ frame_needed = 1, uses_anonymous_args = 0
 482 0000 80B5     		push	{r7, lr}
 483              	.LCFI16:
 484              		.cfi_def_cfa_offset 8
 485              		.cfi_offset 7, -8
 486              		.cfi_offset 14, -4
 487 0002 88B0     		sub	sp, sp, #32
 488              	.LCFI17:
 489              		.cfi_def_cfa_offset 40
 490 0004 00AF     		add	r7, sp, #0
 491              	.LCFI18:
 492              		.cfi_def_cfa_register 7
 158:Core/Src/main.c **** 	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 493              		.loc 1 158 19
 494 0006 07F11003 		add	r3, r7, #16
 495 000a 0022     		movs	r2, #0
 496 000c 1A60     		str	r2, [r3]
 497 000e 5A60     		str	r2, [r3, #4]
 498 0010 9A60     		str	r2, [r3, #8]
 499 0012 DA60     		str	r2, [r3, #12]
 500              	.LBB5:
 159:Core/Src/main.c **** 
 160:Core/Src/main.c **** 	/* GPIO Ports Clock Enable */
 161:Core/Src/main.c **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
 501              		.loc 1 161 2
 502 0014 454B     		ldr	r3, .L25
 503 0016 9B69     		ldr	r3, [r3, #24]
 504 0018 444A     		ldr	r2, .L25
 505 001a 43F00403 		orr	r3, r3, #4
 506 001e 9361     		str	r3, [r2, #24]
 507 0020 424B     		ldr	r3, .L25
 508 0022 9B69     		ldr	r3, [r3, #24]
 509 0024 03F00403 		and	r3, r3, #4
 510 0028 FB60     		str	r3, [r7, #12]
 511 002a FB68     		ldr	r3, [r7, #12]
 512              	.LBE5:
 513              	.LBB6:
 162:Core/Src/main.c **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
 514              		.loc 1 162 2
 515 002c 3F4B     		ldr	r3, .L25
 516 002e 9B69     		ldr	r3, [r3, #24]
 517 0030 3E4A     		ldr	r2, .L25
 518 0032 43F00803 		orr	r3, r3, #8
 519 0036 9361     		str	r3, [r2, #24]
 520 0038 3C4B     		ldr	r3, .L25
 521 003a 9B69     		ldr	r3, [r3, #24]
 522 003c 03F00803 		and	r3, r3, #8
 523 0040 BB60     		str	r3, [r7, #8]
 524 0042 BB68     		ldr	r3, [r7, #8]
 525              	.LBE6:
 526              	.LBB7:
 163:Core/Src/main.c **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 527              		.loc 1 163 2
 528 0044 394B     		ldr	r3, .L25
 529 0046 9B69     		ldr	r3, [r3, #24]
 530 0048 384A     		ldr	r2, .L25
 531 004a 43F01003 		orr	r3, r3, #16
ARM GAS  /tmp/ccBHwZHp.s 			page 13


 532 004e 9361     		str	r3, [r2, #24]
 533 0050 364B     		ldr	r3, .L25
 534 0052 9B69     		ldr	r3, [r3, #24]
 535 0054 03F01003 		and	r3, r3, #16
 536 0058 7B60     		str	r3, [r7, #4]
 537 005a 7B68     		ldr	r3, [r7, #4]
 538              	.LBE7:
 539              	.LBB8:
 164:Core/Src/main.c **** 	__HAL_RCC_GPIOD_CLK_ENABLE();
 540              		.loc 1 164 2
 541 005c 334B     		ldr	r3, .L25
 542 005e 9B69     		ldr	r3, [r3, #24]
 543 0060 324A     		ldr	r2, .L25
 544 0062 43F02003 		orr	r3, r3, #32
 545 0066 9361     		str	r3, [r2, #24]
 546 0068 304B     		ldr	r3, .L25
 547 006a 9B69     		ldr	r3, [r3, #24]
 548 006c 03F02003 		and	r3, r3, #32
 549 0070 3B60     		str	r3, [r7]
 550 0072 3B68     		ldr	r3, [r7]
 551              	.LBE8:
 165:Core/Src/main.c **** 
 166:Core/Src/main.c ****   /*Configure GPIO pin : PWR_BTN_Pin */
 167:Core/Src/main.c ****   GPIO_InitStruct.Pin = PWR_BTN_Pin;
 552              		.loc 1 167 23
 553 0074 4FF48043 		mov	r3, #16384
 554 0078 3B61     		str	r3, [r7, #16]
 168:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 555              		.loc 1 168 24
 556 007a 0023     		movs	r3, #0
 557 007c 7B61     		str	r3, [r7, #20]
 169:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 558              		.loc 1 169 24
 559 007e 0023     		movs	r3, #0
 560 0080 BB61     		str	r3, [r7, #24]
 170:Core/Src/main.c ****   HAL_GPIO_Init(PWR_BTN_GPIO_Port, &GPIO_InitStruct);
 561              		.loc 1 170 3
 562 0082 07F11003 		add	r3, r7, #16
 563 0086 1946     		mov	r1, r3
 564 0088 2948     		ldr	r0, .L25+4
 565 008a FFF7FEFF 		bl	HAL_GPIO_Init
 171:Core/Src/main.c **** 
 172:Core/Src/main.c **** 	/*Configure GPIO pin Output Level */
 173:Core/Src/main.c **** 	HAL_GPIO_WritePin(TPS_ENA_GPIO_Port, TPS_ENA_Pin, GPIO_PIN_SET);
 566              		.loc 1 173 2
 567 008e 0122     		movs	r2, #1
 568 0090 4FF40041 		mov	r1, #32768
 569 0094 2648     		ldr	r0, .L25+4
 570 0096 FFF7FEFF 		bl	HAL_GPIO_WritePin
 174:Core/Src/main.c **** 
 175:Core/Src/main.c ****   /*Configure GPIO pin : TPS_ENA_Pin */
 176:Core/Src/main.c ****   GPIO_InitStruct.Pin = TPS_ENA_Pin;
 571              		.loc 1 176 23
 572 009a 4FF40043 		mov	r3, #32768
 573 009e 3B61     		str	r3, [r7, #16]
 177:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 574              		.loc 1 177 24
ARM GAS  /tmp/ccBHwZHp.s 			page 14


 575 00a0 0123     		movs	r3, #1
 576 00a2 7B61     		str	r3, [r7, #20]
 178:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 577              		.loc 1 178 24
 578 00a4 0023     		movs	r3, #0
 579 00a6 BB61     		str	r3, [r7, #24]
 179:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 580              		.loc 1 179 25
 581 00a8 0223     		movs	r3, #2
 582 00aa FB61     		str	r3, [r7, #28]
 180:Core/Src/main.c ****   HAL_GPIO_Init(TPS_ENA_GPIO_Port, &GPIO_InitStruct);
 583              		.loc 1 180 3
 584 00ac 07F11003 		add	r3, r7, #16
 585 00b0 1946     		mov	r1, r3
 586 00b2 1F48     		ldr	r0, .L25+4
 587 00b4 FFF7FEFF 		bl	HAL_GPIO_Init
 181:Core/Src/main.c **** 
 182:Core/Src/main.c **** 	/*Configure GPIO pin Output Level */
 183:Core/Src/main.c **** 	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 588              		.loc 1 183 2
 589 00b8 0022     		movs	r2, #0
 590 00ba 0221     		movs	r1, #2
 591 00bc 1D48     		ldr	r0, .L25+8
 592 00be FFF7FEFF 		bl	HAL_GPIO_WritePin
 184:Core/Src/main.c **** 
 185:Core/Src/main.c **** 	/*Configure GPIO pin : LED_Pin */
 186:Core/Src/main.c **** 	GPIO_InitStruct.Pin = LED_Pin;
 593              		.loc 1 186 22
 594 00c2 0223     		movs	r3, #2
 595 00c4 3B61     		str	r3, [r7, #16]
 187:Core/Src/main.c **** 	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 596              		.loc 1 187 23
 597 00c6 0123     		movs	r3, #1
 598 00c8 7B61     		str	r3, [r7, #20]
 188:Core/Src/main.c **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
 599              		.loc 1 188 23
 600 00ca 0023     		movs	r3, #0
 601 00cc BB61     		str	r3, [r7, #24]
 189:Core/Src/main.c **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 602              		.loc 1 189 24
 603 00ce 0223     		movs	r3, #2
 604 00d0 FB61     		str	r3, [r7, #28]
 190:Core/Src/main.c **** 	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 605              		.loc 1 190 2
 606 00d2 07F11003 		add	r3, r7, #16
 607 00d6 1946     		mov	r1, r3
 608 00d8 1648     		ldr	r0, .L25+8
 609 00da FFF7FEFF 		bl	HAL_GPIO_Init
 191:Core/Src/main.c **** 
 192:Core/Src/main.c **** //	HAL_GPIO_WritePin(UART1_Tx_GPIO_Port, UART1_Tx_Pin, GPIO_PIN_RESET);
 193:Core/Src/main.c **** 	/*Configure GPIO pin : UART1Tx_Pin */
 194:Core/Src/main.c **** 	GPIO_InitStruct.Pin = UART1_Tx_Pin;
 610              		.loc 1 194 22
 611 00de 4023     		movs	r3, #64
 612 00e0 3B61     		str	r3, [r7, #16]
 195:Core/Src/main.c **** 	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 613              		.loc 1 195 23
ARM GAS  /tmp/ccBHwZHp.s 			page 15


 614 00e2 1223     		movs	r3, #18
 615 00e4 7B61     		str	r3, [r7, #20]
 196:Core/Src/main.c **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
 616              		.loc 1 196 23
 617 00e6 0023     		movs	r3, #0
 618 00e8 BB61     		str	r3, [r7, #24]
 197:Core/Src/main.c **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 619              		.loc 1 197 24
 620 00ea 0223     		movs	r3, #2
 621 00ec FB61     		str	r3, [r7, #28]
 198:Core/Src/main.c **** //	HAL_GPIO_Init(UART1_Tx_GPIO_Port, &GPIO_InitStruct);
 199:Core/Src/main.c **** 
 200:Core/Src/main.c **** 	HAL_GPIO_WritePin(BrakeLight_GPIO_Port, BrakeLight_Pin, GPIO_PIN_RESET);
 622              		.loc 1 200 2
 623 00ee 0022     		movs	r2, #0
 624 00f0 4FF40041 		mov	r1, #32768
 625 00f4 1048     		ldr	r0, .L25+12
 626 00f6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 201:Core/Src/main.c **** 	/*Configure GPIO pin : BrakeLight_Pin */
 202:Core/Src/main.c **** 	GPIO_InitStruct.Pin = BrakeLight_Pin;
 627              		.loc 1 202 22
 628 00fa 4FF40043 		mov	r3, #32768
 629 00fe 3B61     		str	r3, [r7, #16]
 203:Core/Src/main.c **** 	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 630              		.loc 1 203 23
 631 0100 1123     		movs	r3, #17
 632 0102 7B61     		str	r3, [r7, #20]
 204:Core/Src/main.c **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
 633              		.loc 1 204 23
 634 0104 0023     		movs	r3, #0
 635 0106 BB61     		str	r3, [r7, #24]
 205:Core/Src/main.c **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 636              		.loc 1 205 24
 637 0108 0223     		movs	r3, #2
 638 010a FB61     		str	r3, [r7, #28]
 206:Core/Src/main.c **** 	HAL_GPIO_Init(BrakeLight_GPIO_Port, &GPIO_InitStruct);
 639              		.loc 1 206 2
 640 010c 07F11003 		add	r3, r7, #16
 641 0110 1946     		mov	r1, r3
 642 0112 0948     		ldr	r0, .L25+12
 643 0114 FFF7FEFF 		bl	HAL_GPIO_Init
 207:Core/Src/main.c **** 
 208:Core/Src/main.c **** 	HAL_GPIO_WritePin(HALL_1_GPIO_Port, HALL_1_Pin, GPIO_PIN_RESET);
 644              		.loc 1 208 2
 645 0118 0022     		movs	r2, #0
 646 011a 1021     		movs	r1, #16
 647 011c 0748     		ldr	r0, .L25+16
 648 011e FFF7FEFF 		bl	HAL_GPIO_WritePin
 209:Core/Src/main.c **** }
 649              		.loc 1 209 1
 650 0122 00BF     		nop
 651 0124 2037     		adds	r7, r7, #32
 652              	.LCFI19:
 653              		.cfi_def_cfa_offset 8
 654 0126 BD46     		mov	sp, r7
 655              	.LCFI20:
 656              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccBHwZHp.s 			page 16


 657              		@ sp needed
 658 0128 80BD     		pop	{r7, pc}
 659              	.L26:
 660 012a 00BF     		.align	2
 661              	.L25:
 662 012c 00100240 		.word	1073876992
 663 0130 00100140 		.word	1073811456
 664 0134 00140140 		.word	1073812480
 665 0138 00080140 		.word	1073809408
 666 013c 000C0140 		.word	1073810432
 667              		.cfi_endproc
 668              	.LFE125:
 670              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 671              		.align	1
 672              		.global	HAL_UART_TxCpltCallback
 673              		.syntax unified
 674              		.thumb
 675              		.thumb_func
 676              		.fpu softvfp
 678              	HAL_UART_TxCpltCallback:
 679              	.LFB126:
 210:Core/Src/main.c **** 
 211:Core/Src/main.c **** void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle) {
 680              		.loc 1 211 62
 681              		.cfi_startproc
 682              		@ args = 0, pretend = 0, frame = 8
 683              		@ frame_needed = 1, uses_anonymous_args = 0
 684 0000 80B5     		push	{r7, lr}
 685              	.LCFI21:
 686              		.cfi_def_cfa_offset 8
 687              		.cfi_offset 7, -8
 688              		.cfi_offset 14, -4
 689 0002 82B0     		sub	sp, sp, #8
 690              	.LCFI22:
 691              		.cfi_def_cfa_offset 16
 692 0004 00AF     		add	r7, sp, #0
 693              	.LCFI23:
 694              		.cfi_def_cfa_register 7
 695 0006 7860     		str	r0, [r7, #4]
 212:Core/Src/main.c **** 
 213:Core/Src/main.c **** 	if (UartHandle==&huart1) {
 696              		.loc 1 213 5
 697 0008 7B68     		ldr	r3, [r7, #4]
 698 000a 054A     		ldr	r2, .L30
 699 000c 9342     		cmp	r3, r2
 700 000e 02D1     		bne	.L29
 214:Core/Src/main.c ****     HAL_HalfDuplex_EnableReceiver(&huart1);
 701              		.loc 1 214 5
 702 0010 0348     		ldr	r0, .L30
 703 0012 FFF7FEFF 		bl	HAL_HalfDuplex_EnableReceiver
 704              	.L29:
 215:Core/Src/main.c ****   }
 216:Core/Src/main.c **** }
 705              		.loc 1 216 1
 706 0016 00BF     		nop
 707 0018 0837     		adds	r7, r7, #8
 708              	.LCFI24:
ARM GAS  /tmp/ccBHwZHp.s 			page 17


 709              		.cfi_def_cfa_offset 8
 710 001a BD46     		mov	sp, r7
 711              	.LCFI25:
 712              		.cfi_def_cfa_register 13
 713              		@ sp needed
 714 001c 80BD     		pop	{r7, pc}
 715              	.L31:
 716 001e 00BF     		.align	2
 717              	.L30:
 718 0020 00000000 		.word	huart1
 719              		.cfi_endproc
 720              	.LFE126:
 722              		.section	.text.HAL_UART_ErrorCallback,"ax",%progbits
 723              		.align	1
 724              		.global	HAL_UART_ErrorCallback
 725              		.syntax unified
 726              		.thumb
 727              		.thumb_func
 728              		.fpu softvfp
 730              	HAL_UART_ErrorCallback:
 731              	.LFB127:
 217:Core/Src/main.c **** 
 218:Core/Src/main.c **** void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
 732              		.loc 1 218 61
 733              		.cfi_startproc
 734              		@ args = 0, pretend = 0, frame = 8
 735              		@ frame_needed = 1, uses_anonymous_args = 0
 736              		@ link register save eliminated.
 737 0000 80B4     		push	{r7}
 738              	.LCFI26:
 739              		.cfi_def_cfa_offset 4
 740              		.cfi_offset 7, -4
 741 0002 83B0     		sub	sp, sp, #12
 742              	.LCFI27:
 743              		.cfi_def_cfa_offset 16
 744 0004 00AF     		add	r7, sp, #0
 745              	.LCFI28:
 746              		.cfi_def_cfa_register 7
 747 0006 7860     		str	r0, [r7, #4]
 219:Core/Src/main.c **** 
 220:Core/Src/main.c **** }
 748              		.loc 1 220 1
 749 0008 00BF     		nop
 750 000a 0C37     		adds	r7, r7, #12
 751              	.LCFI29:
 752              		.cfi_def_cfa_offset 4
 753 000c BD46     		mov	sp, r7
 754              	.LCFI30:
 755              		.cfi_def_cfa_register 13
 756              		@ sp needed
 757 000e 80BC     		pop	{r7}
 758              	.LCFI31:
 759              		.cfi_restore 7
 760              		.cfi_def_cfa_offset 0
 761 0010 7047     		bx	lr
 762              		.cfi_endproc
 763              	.LFE127:
ARM GAS  /tmp/ccBHwZHp.s 			page 18


 765              		.section	.text.Error_Handler,"ax",%progbits
 766              		.align	1
 767              		.global	Error_Handler
 768              		.syntax unified
 769              		.thumb
 770              		.thumb_func
 771              		.fpu softvfp
 773              	Error_Handler:
 774              	.LFB128:
 221:Core/Src/main.c **** 
 222:Core/Src/main.c **** /**
 223:Core/Src/main.c ****  * @brief  This function is executed in case of error occurrence.
 224:Core/Src/main.c ****  * @retval None
 225:Core/Src/main.c ****  */
 226:Core/Src/main.c **** void Error_Handler(void) {
 775              		.loc 1 226 26
 776              		.cfi_startproc
 777              		@ args = 0, pretend = 0, frame = 0
 778              		@ frame_needed = 1, uses_anonymous_args = 0
 779 0000 80B5     		push	{r7, lr}
 780              	.LCFI32:
 781              		.cfi_def_cfa_offset 8
 782              		.cfi_offset 7, -8
 783              		.cfi_offset 14, -4
 784 0002 00AF     		add	r7, sp, #0
 785              	.LCFI33:
 786              		.cfi_def_cfa_register 7
 787              	.LBB9:
 788              	.LBB10:
 789              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccBHwZHp.s 			page 19


  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
ARM GAS  /tmp/ccBHwZHp.s 			page 20


  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccBHwZHp.s 			page 21


 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 790              		.loc 2 142 3
 791              		.syntax unified
 792              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 793 0004 72B6     		cpsid i
 794              	@ 0 "" 2
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 795              		.loc 2 143 1
 796              		.thumb
 797              		.syntax unified
 798 0006 00BF     		nop
 799              	.L34:
 800              	.LBE10:
 801              	.LBE9:
 227:Core/Src/main.c **** 	/* User can add his own implementation to report the HAL error return state */
 228:Core/Src/main.c **** 	__disable_irq();
 229:Core/Src/main.c **** 	while (1) {
 230:Core/Src/main.c ****     motor_disable_pwm();
 802              		.loc 1 230 5 discriminator 1
 803 0008 FFF7FEFF 		bl	motor_disable_pwm
 804 000c FCE7     		b	.L34
 805              		.cfi_endproc
 806              	.LFE128:
 808              		.section	.text._Error_Handler,"ax",%progbits
 809              		.align	1
 810              		.global	_Error_Handler
 811              		.syntax unified
 812              		.thumb
 813              		.thumb_func
 814              		.fpu softvfp
 816              	_Error_Handler:
 817              	.LFB129:
 231:Core/Src/main.c ****   }
 232:Core/Src/main.c **** }
 233:Core/Src/main.c **** 
 234:Core/Src/main.c **** void _Error_Handler(char *file, int line) {
 818              		.loc 1 234 43
 819              		.cfi_startproc
 820              		@ args = 0, pretend = 0, frame = 8
 821              		@ frame_needed = 1, uses_anonymous_args = 0
 822 0000 80B5     		push	{r7, lr}
 823              	.LCFI34:
 824              		.cfi_def_cfa_offset 8
 825              		.cfi_offset 7, -8
 826              		.cfi_offset 14, -4
 827 0002 82B0     		sub	sp, sp, #8
 828              	.LCFI35:
 829              		.cfi_def_cfa_offset 16
 830 0004 00AF     		add	r7, sp, #0
 831              	.LCFI36:
 832              		.cfi_def_cfa_register 7
 833 0006 7860     		str	r0, [r7, #4]
 834 0008 3960     		str	r1, [r7]
 835              	.L36:
 235:Core/Src/main.c **** 	/* User can add his own implementation to report the HAL error return state */
 236:Core/Src/main.c **** 	while (1) {
 237:Core/Src/main.c ****     motor_disable_pwm();
ARM GAS  /tmp/ccBHwZHp.s 			page 22


 836              		.loc 1 237 5 discriminator 1
 837 000a FFF7FEFF 		bl	motor_disable_pwm
 838 000e FCE7     		b	.L36
 839              		.cfi_endproc
 840              	.LFE129:
 842              		.section	.rodata
 843              		.align	2
 844              	.LC1:
 845 0010 25642C20 		.ascii	"%d, %d\012\000"
 845      25640A00 
 846              		.section	.text.main,"ax",%progbits
 847              		.align	1
 848              		.global	main
 849              		.syntax unified
 850              		.thumb
 851              		.thumb_func
 852              		.fpu softvfp
 854              	main:
 855              	.LFB130:
 238:Core/Src/main.c **** 	}
 239:Core/Src/main.c **** }
 240:Core/Src/main.c **** 
 241:Core/Src/main.c **** #ifdef  USE_FULL_ASSERT
 242:Core/Src/main.c **** /**
 243:Core/Src/main.c ****   * @brief  Reports the name of the source file and the source line number
 244:Core/Src/main.c ****   *         where the assert_param error has occurred.
 245:Core/Src/main.c ****   * @param  file: pointer to the source file name
 246:Core/Src/main.c ****   * @param  line: assert_param error line source number
 247:Core/Src/main.c ****   * @retval None
 248:Core/Src/main.c ****   */
 249:Core/Src/main.c **** void assert_failed(uint8_t *file, uint32_t line)
 250:Core/Src/main.c **** {
 251:Core/Src/main.c ****   /* USER CODE BEGIN 6 */
 252:Core/Src/main.c ****   /* User can add his own implementation to report the file name and line number,
 253:Core/Src/main.c ****      ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
 254:Core/Src/main.c ****   /* USER CODE END 6 */
 255:Core/Src/main.c **** }
 256:Core/Src/main.c **** #endif /* USE_FULL_ASSERT */
 257:Core/Src/main.c **** 
 258:Core/Src/main.c **** int main(void) {
 856              		.loc 1 258 16
 857              		.cfi_startproc
 858              		@ args = 0, pretend = 0, frame = 8
 859              		@ frame_needed = 1, uses_anonymous_args = 0
 860 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 861              	.LCFI37:
 862              		.cfi_def_cfa_offset 20
 863              		.cfi_offset 4, -20
 864              		.cfi_offset 5, -16
 865              		.cfi_offset 6, -12
 866              		.cfi_offset 7, -8
 867              		.cfi_offset 14, -4
 868 0002 91B0     		sub	sp, sp, #68
 869              	.LCFI38:
 870              		.cfi_def_cfa_offset 88
 871 0004 0EAF     		add	r7, sp, #56
 872              	.LCFI39:
ARM GAS  /tmp/ccBHwZHp.s 			page 23


 873              		.cfi_def_cfa 7, 32
 259:Core/Src/main.c **** 	// Reset of all peripherals, Initializes the Flash interface and the Systick
 260:Core/Src/main.c **** 	HAL_Init();
 874              		.loc 1 260 2
 875 0006 FFF7FEFF 		bl	HAL_Init
 261:Core/Src/main.c **** 
 262:Core/Src/main.c **** 	// Configure the system clock
 263:Core/Src/main.c ****   // board do not have any external crystal and so we use internal clock. Final clock is 64MHz
 264:Core/Src/main.c **** 	SystemClock_Config();
 876              		.loc 1 264 2
 877 000a FFF7FEFF 		bl	SystemClock_Config
 265:Core/Src/main.c **** 
 266:Core/Src/main.c ****   // init GPIOS
 267:Core/Src/main.c **** 	GPIO_Init();
 878              		.loc 1 267 2
 879 000e FFF7FEFF 		bl	GPIO_Init
 268:Core/Src/main.c **** 
 269:Core/Src/main.c ****   // init DMA for ADC, USART_1 and USART_3
 270:Core/Src/main.c **** 	DMA_Init();
 880              		.loc 1 270 2
 881 0012 FFF7FEFF 		bl	DMA_Init
 271:Core/Src/main.c **** 
 272:Core/Src/main.c ****   // init USART_1 and USART_3
 273:Core/Src/main.c **** 	USART1_UART_Init();
 882              		.loc 1 273 2
 883 0016 FFF7FEFF 		bl	USART1_UART_Init
 274:Core/Src/main.c **** 	USART3_UART_Init();
 884              		.loc 1 274 2
 885 001a FFF7FEFF 		bl	USART3_UART_Init
 275:Core/Src/main.c **** 
 276:Core/Src/main.c ****   MSPublic.brake_active = true; // force motor stop until receive real value from brake
 886              		.loc 1 276 25
 887 001e 684B     		ldr	r3, .L41
 888 0020 0122     		movs	r2, #1
 889 0022 83F82820 		strb	r2, [r3, #40]
 277:Core/Src/main.c ****   MSPublic.i_q_setpoint_target = 0; // start at 0 until throttle value is readed
 890              		.loc 1 277 32
 891 0026 664B     		ldr	r3, .L41
 892 0028 0022     		movs	r2, #0
 893 002a 1A60     		str	r2, [r3]
 278:Core/Src/main.c ****   MSPublic.speed = 128000;
 894              		.loc 1 278 18
 895 002c 644B     		ldr	r3, .L41
 896 002e 4FF4FA32 		mov	r2, #128000
 897 0032 5A62     		str	r2, [r3, #36]
 279:Core/Src/main.c **** 	MSPublic.speed_limit = SPEEDLIMIT_NORMAL;
 898              		.loc 1 279 23
 899 0034 624B     		ldr	r3, .L41
 900 0036 1422     		movs	r2, #20
 901 0038 83F82220 		strb	r2, [r3, #34]
 280:Core/Src/main.c ****   MSPublic.phase_current_limit = PH_CURRENT_MAX_NORMAL;
 902              		.loc 1 280 32
 903 003c 604B     		ldr	r3, .L41
 904 003e 47F23052 		movw	r2, #30000
 905 0042 9A80     		strh	r2, [r3, #4]	@ movhi
 281:Core/Src/main.c ****   MSPublic.field_weakening_current_max = FIELD_WEAKNING_CURRENT_MAX;
 906              		.loc 1 281 40
ARM GAS  /tmp/ccBHwZHp.s 			page 24


 907 0044 5E4B     		ldr	r3, .L41
 908 0046 4FF47A72 		mov	r2, #1000
 909 004a 1A82     		strh	r2, [r3, #16]	@ movhi
 282:Core/Src/main.c ****   MSPublic.battery_voltage_min = BATTERYVOLTAGE_MIN;
 910              		.loc 1 282 32
 911 004c 5C4B     		ldr	r3, .L41
 912 004e 47F23052 		movw	r2, #30000
 913 0052 DA60     		str	r2, [r3, #12]
 283:Core/Src/main.c **** 
 284:Core/Src/main.c ****   motor_init(&MSPublic);
 914              		.loc 1 284 3
 915 0054 5A48     		ldr	r0, .L41
 916 0056 FFF7FEFF 		bl	motor_init
 285:Core/Src/main.c **** 
 286:Core/Src/main.c ****   M365State.phase_current_limit = PH_CURRENT_MAX_NORMAL;
 917              		.loc 1 286 33
 918 005a 5A4B     		ldr	r3, .L41+4
 919 005c 47F23052 		movw	r2, #30000
 920 0060 9A80     		strh	r2, [r3, #4]	@ movhi
 287:Core/Src/main.c ****   M365State.speed_limit = SPEEDLIMIT_NORMAL;
 921              		.loc 1 287 25
 922 0062 584B     		ldr	r3, .L41+4
 923 0064 1422     		movs	r2, #20
 924 0066 1A77     		strb	r2, [r3, #28]
 288:Core/Src/main.c ****   M365State.regen_current = REGEN_CURRENT;
 925              		.loc 1 288 27
 926 0068 564B     		ldr	r3, .L41+4
 927 006a 42F21072 		movw	r2, #10000
 928 006e DA80     		strh	r2, [r3, #6]	@ movhi
 289:Core/Src/main.c **** 
 290:Core/Src/main.c ****   // init dashboard
 291:Core/Src/main.c **** 	M365Dashboard_init(huart1);
 929              		.loc 1 291 2
 930 0070 554E     		ldr	r6, .L41+8
 931 0072 6D46     		mov	r5, sp
 932 0074 06F11004 		add	r4, r6, #16
 933 0078 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 934 007a 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 935 007c 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 936 007e 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 937 0080 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 938 0084 85E80F00 		stm	r5, {r0, r1, r2, r3}
 939 0088 96E80F00 		ldm	r6, {r0, r1, r2, r3}
 940 008c FFF7FEFF 		bl	M365Dashboard_init
 292:Core/Src/main.c **** 	PWR_init();
 941              		.loc 1 292 2
 942 0090 FFF7FEFF 		bl	PWR_init
 943              	.L40:
 944              	.LBB11:
 293:Core/Src/main.c **** 
 294:Core/Src/main.c **** 	while (1) {
 295:Core/Src/main.c **** 
 296:Core/Src/main.c ****     // update M365State vars that are calculated on motor_slow_loop
 297:Core/Src/main.c ****     M365State.speed = MSPublic.speed;
 945              		.loc 1 297 31
 946 0094 4A4B     		ldr	r3, .L41
 947 0096 5B6A     		ldr	r3, [r3, #36]
ARM GAS  /tmp/ccBHwZHp.s 			page 25


 948              		.loc 1 297 21
 949 0098 4A4A     		ldr	r2, .L41+4
 950 009a 1361     		str	r3, [r2, #16]
 298:Core/Src/main.c **** 
 299:Core/Src/main.c **** 		// search and process display message
 300:Core/Src/main.c **** 		search_DashboardMessage(&M365State, huart1);
 951              		.loc 1 300 3
 952 009c 4A4E     		ldr	r6, .L41+8
 953 009e 6D46     		mov	r5, sp
 954 00a0 06F10C04 		add	r4, r6, #12
 955 00a4 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 956 00a6 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 957 00a8 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 958 00aa 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 959 00ac 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 960 00ae 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 961 00b0 2368     		ldr	r3, [r4]
 962 00b2 2B60     		str	r3, [r5]
 963 00b4 96E80E00 		ldm	r6, {r1, r2, r3}
 964 00b8 4248     		ldr	r0, .L41+4
 965 00ba FFF7FEFF 		bl	search_DashboardMessage
 301:Core/Src/main.c ****     // update vars to MSPublic
 302:Core/Src/main.c ****     MSPublic.phase_current_limit = M365State.phase_current_limit;
 966              		.loc 1 302 45
 967 00be 414B     		ldr	r3, .L41+4
 968 00c0 B3F90420 		ldrsh	r2, [r3, #4]
 969              		.loc 1 302 34
 970 00c4 3E4B     		ldr	r3, .L41
 971 00c6 9A80     		strh	r2, [r3, #4]	@ movhi
 303:Core/Src/main.c ****     MSPublic.i_q_setpoint_target = M365State.i_q_setpoint_target;
 972              		.loc 1 303 45
 973 00c8 3E4B     		ldr	r3, .L41+4
 974 00ca DB68     		ldr	r3, [r3, #12]
 975              		.loc 1 303 34
 976 00cc 3C4A     		ldr	r2, .L41
 977 00ce 1360     		str	r3, [r2]
 304:Core/Src/main.c ****     MSPublic.brake_active = M365State.brake_active;
 978              		.loc 1 304 38
 979 00d0 3C4B     		ldr	r3, .L41+4
 980 00d2 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 981              		.loc 1 304 27
 982 00d4 3A4B     		ldr	r3, .L41
 983 00d6 83F82820 		strb	r2, [r3, #40]
 305:Core/Src/main.c **** 
 306:Core/Src/main.c **** 		//slow loop process, every 20ms
 307:Core/Src/main.c ****     static uint32_t systick_cnt_old = 0;
 308:Core/Src/main.c **** 		if ((systick_cnt_old != systick_cnt) && // only at a change
 984              		.loc 1 308 24
 985 00da 3C4B     		ldr	r3, .L41+12
 986 00dc 1A68     		ldr	r2, [r3]
 987 00de 3C4B     		ldr	r3, .L41+16
 988 00e0 1B68     		ldr	r3, [r3]
 989              		.loc 1 308 6
 990 00e2 9A42     		cmp	r2, r3
 991 00e4 D6D0     		beq	.L40
 309:Core/Src/main.c ****         (systick_cnt % 20) == 0) { // every 20ms
 992              		.loc 1 309 22 discriminator 1
ARM GAS  /tmp/ccBHwZHp.s 			page 26


 993 00e6 3A4B     		ldr	r3, .L41+16
 994 00e8 1968     		ldr	r1, [r3]
 995 00ea 3A4B     		ldr	r3, .L41+20
 996 00ec A3FB0123 		umull	r2, r3, r3, r1
 997 00f0 1A09     		lsrs	r2, r3, #4
 998 00f2 1346     		mov	r3, r2
 999 00f4 9B00     		lsls	r3, r3, #2
 1000 00f6 1344     		add	r3, r3, r2
 1001 00f8 9B00     		lsls	r3, r3, #2
 1002 00fa CA1A     		subs	r2, r1, r3
 308:Core/Src/main.c ****         (systick_cnt % 20) == 0) { // every 20ms
 1003              		.loc 1 308 40 discriminator 1
 1004 00fc 002A     		cmp	r2, #0
 1005 00fe C9D1     		bne	.L40
 1006              	.LBB12:
 310:Core/Src/main.c ****       systick_cnt_old = systick_cnt;
 1007              		.loc 1 310 23
 1008 0100 334B     		ldr	r3, .L41+16
 1009 0102 1B68     		ldr	r3, [r3]
 1010 0104 314A     		ldr	r2, .L41+12
 1011 0106 1360     		str	r3, [r2]
 311:Core/Src/main.c **** 
 312:Core/Src/main.c ****       #ifdef ADCTHROTTLE
 313:Core/Src/main.c ****       // low pass filter torque signal
 314:Core/Src/main.c ****       static uint32_t ui32_throttle_acc = 0;
 315:Core/Src/main.c ****       uint16_t ui16_throttle;
 316:Core/Src/main.c ****       ui32_throttle_acc -= ui32_throttle_acc >> 4;
 317:Core/Src/main.c **** 	    ui32_throttle_acc += MSPublic.adcData[ADC_THROTTLE];
 318:Core/Src/main.c **** 	    ui16_throttle = ui32_throttle_acc >> 4;
 319:Core/Src/main.c **** 
 320:Core/Src/main.c ****       // map throttle to motor current
 321:Core/Src/main.c ****       M365State.i_q_setpoint = map(ui16_throttle, THROTTLEOFFSET, THROTTLEMAX, 0, M365State.phase_c
 322:Core/Src/main.c ****       #endif
 323:Core/Src/main.c **** 
 324:Core/Src/main.c ****       // process buttons
 325:Core/Src/main.c **** 		  checkButton(&M365State);
 1012              		.loc 1 325 5
 1013 0108 2E48     		ldr	r0, .L41+4
 1014 010a FFF7FEFF 		bl	checkButton
 326:Core/Src/main.c ****       // update vars to MSPublic
 327:Core/Src/main.c ****       MSPublic.mode = M365State.mode;
 1015              		.loc 1 327 32
 1016 010e 2D4B     		ldr	r3, .L41+4
 1017 0110 93F90920 		ldrsb	r2, [r3, #9]
 1018              		.loc 1 327 21
 1019 0114 2A4B     		ldr	r3, .L41
 1020 0116 DA74     		strb	r2, [r3, #19]
 328:Core/Src/main.c ****       MSPublic.speed_limit = M365State.speed_limit;
 1021              		.loc 1 328 39
 1022 0118 2A4B     		ldr	r3, .L41+4
 1023 011a 93F91C20 		ldrsb	r2, [r3, #28]
 1024              		.loc 1 328 28
 1025 011e 284B     		ldr	r3, .L41
 1026 0120 83F82220 		strb	r2, [r3, #34]
 329:Core/Src/main.c **** 
 330:Core/Src/main.c ****       // battery voltage
 331:Core/Src/main.c ****       // low pass filter measured battery voltage 
ARM GAS  /tmp/ccBHwZHp.s 			page 27


 332:Core/Src/main.c ****       static q31_t q31_batt_voltage_acc = 0;
 333:Core/Src/main.c ****       q31_batt_voltage_acc -= (q31_batt_voltage_acc >> 7);
 1027              		.loc 1 333 28
 1028 0124 2C4B     		ldr	r3, .L41+24
 1029 0126 1A68     		ldr	r2, [r3]
 1030              		.loc 1 333 53
 1031 0128 2B4B     		ldr	r3, .L41+24
 1032 012a 1B68     		ldr	r3, [r3]
 1033 012c DB11     		asrs	r3, r3, #7
 1034              		.loc 1 333 28
 1035 012e D31A     		subs	r3, r2, r3
 1036 0130 294A     		ldr	r2, .L41+24
 1037 0132 1360     		str	r3, [r2]
 334:Core/Src/main.c ****       q31_batt_voltage_acc += MSPublic.adcData[ADC_VOLTAGE];
 1038              		.loc 1 334 47
 1039 0134 224B     		ldr	r3, .L41
 1040 0136 DB8A     		ldrh	r3, [r3, #22]
 1041 0138 1A46     		mov	r2, r3
 1042              		.loc 1 334 28
 1043 013a 274B     		ldr	r3, .L41+24
 1044 013c 1B68     		ldr	r3, [r3]
 1045 013e 1344     		add	r3, r3, r2
 1046 0140 254A     		ldr	r2, .L41+24
 1047 0142 1360     		str	r3, [r2]
 335:Core/Src/main.c ****       q31_t q31_battery_voltage = (q31_batt_voltage_acc >> 7) * CAL_BAT_V;
 1048              		.loc 1 335 57
 1049 0144 244B     		ldr	r3, .L41+24
 1050 0146 1B68     		ldr	r3, [r3]
 1051 0148 DA11     		asrs	r2, r3, #7
 1052              		.loc 1 335 13
 1053 014a 1346     		mov	r3, r2
 1054 014c DB00     		lsls	r3, r3, #3
 1055 014e 9B1A     		subs	r3, r3, r2
 1056 0150 5B00     		lsls	r3, r3, #1
 1057 0152 7B60     		str	r3, [r7, #4]
 336:Core/Src/main.c ****       // update vars to MSPublic
 337:Core/Src/main.c **** 			MSPublic.battery_voltage = M365State.battery_voltage = q31_battery_voltage;
 1058              		.loc 1 337 57
 1059 0154 1B4A     		ldr	r2, .L41+4
 1060 0156 7B68     		ldr	r3, [r7, #4]
 1061 0158 1360     		str	r3, [r2]
 1062              		.loc 1 337 40
 1063 015a 1A4B     		ldr	r3, .L41+4
 1064 015c 1B68     		ldr	r3, [r3]
 1065              		.loc 1 337 29
 1066 015e 184A     		ldr	r2, .L41
 1067 0160 9360     		str	r3, [r2, #8]
 338:Core/Src/main.c **** 
 339:Core/Src/main.c ****       // increase shutdown counter
 340:Core/Src/main.c **** 			if (M365State.shutdown) M365State.shutdown++;
 1068              		.loc 1 340 17
 1069 0162 184B     		ldr	r3, .L41+4
 1070 0164 9B69     		ldr	r3, [r3, #24]
 1071              		.loc 1 340 7
 1072 0166 002B     		cmp	r3, #0
 1073 0168 04D0     		beq	.L39
 1074              		.loc 1 340 37 discriminator 1
ARM GAS  /tmp/ccBHwZHp.s 			page 28


 1075 016a 164B     		ldr	r3, .L41+4
 1076 016c 9B69     		ldr	r3, [r3, #24]
 1077              		.loc 1 340 46 discriminator 1
 1078 016e 0133     		adds	r3, r3, #1
 1079 0170 144A     		ldr	r2, .L41+4
 1080 0172 9361     		str	r3, [r2, #24]
 1081              	.L39:
 341:Core/Src/main.c **** 
 342:Core/Src/main.c ****       // temperature
 343:Core/Src/main.c **** 			M365State.temperature = (MSPublic.adcData[ADC_TEMP] * 41) >> 8; //0.16 is calibration constant: 
 1082              		.loc 1 343 45
 1083 0174 124B     		ldr	r3, .L41
 1084 0176 5B8B     		ldrh	r3, [r3, #26]
 1085 0178 1A46     		mov	r2, r3
 1086              		.loc 1 343 56
 1087 017a 1346     		mov	r3, r2
 1088 017c 9B00     		lsls	r3, r3, #2
 1089 017e 1344     		add	r3, r3, r2
 1090 0180 DB00     		lsls	r3, r3, #3
 1091 0182 1344     		add	r3, r3, r2
 1092              		.loc 1 343 62
 1093 0184 1B12     		asrs	r3, r3, #8
 1094              		.loc 1 343 26
 1095 0186 5AB2     		sxtb	r2, r3
 1096 0188 0E4B     		ldr	r3, .L41+4
 1097 018a 1A72     		strb	r2, [r3, #8]
 344:Core/Src/main.c **** 
 345:Core/Src/main.c ****       // DEBUG
 346:Core/Src/main.c ****       static uint8_t debug_cnt = 0;
 347:Core/Src/main.c ****       if (++debug_cnt > 13) { // every 13 * 20 ms = 260ms
 1098              		.loc 1 347 11
 1099 018c 134B     		ldr	r3, .L41+28
 1100 018e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1101 0190 0133     		adds	r3, r3, #1
 1102 0192 DAB2     		uxtb	r2, r3
 1103              		.loc 1 347 10
 1104 0194 114B     		ldr	r3, .L41+28
 1105 0196 1A70     		strb	r2, [r3]
 1106              		.loc 1 347 11
 1107 0198 104B     		ldr	r3, .L41+28
 1108 019a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1109              		.loc 1 347 10
 1110 019c 0D2B     		cmp	r3, #13
 1111 019e 7FF679AF 		bls	.L40
 348:Core/Src/main.c ****         debug_cnt = 0;
 1112              		.loc 1 348 19
 1113 01a2 0E4B     		ldr	r3, .L41+28
 1114 01a4 0022     		movs	r2, #0
 1115 01a6 1A70     		strb	r2, [r3]
 349:Core/Src/main.c ****         printf_("%d, %d\n", MSPublic.debug[0], MSPublic.debug[1] * CAL_I);
 1116              		.loc 1 349 9
 1117 01a8 054B     		ldr	r3, .L41
 1118 01aa D96A     		ldr	r1, [r3, #44]
 1119              		.loc 1 349 62
 1120 01ac 044B     		ldr	r3, .L41
 1121 01ae 1B6B     		ldr	r3, [r3, #48]
 1122              		.loc 1 349 9
ARM GAS  /tmp/ccBHwZHp.s 			page 29


 1123 01b0 2622     		movs	r2, #38
 1124 01b2 02FB03F3 		mul	r3, r2, r3
 1125 01b6 1A46     		mov	r2, r3
 1126 01b8 0948     		ldr	r0, .L41+32
 1127 01ba FFF7FEFF 		bl	printf_
 1128              	.LBE12:
 1129              	.LBE11:
 294:Core/Src/main.c **** 
 1130              		.loc 1 294 12
 1131 01be 69E7     		b	.L40
 1132              	.L42:
 1133              		.align	2
 1134              	.L41:
 1135 01c0 00000000 		.word	MSPublic
 1136 01c4 00000000 		.word	M365State
 1137 01c8 00000000 		.word	huart1
 1138 01cc 00000000 		.word	systick_cnt_old.9946
 1139 01d0 00000000 		.word	systick_cnt
 1140 01d4 CDCCCCCC 		.word	-858993459
 1141 01d8 00000000 		.word	q31_batt_voltage_acc.9947
 1142 01dc 00000000 		.word	debug_cnt.9949
 1143 01e0 10000000 		.word	.LC1
 1144              		.cfi_endproc
 1145              	.LFE130:
 1147              		.section	.bss.c.9903,"aw",%nobits
 1148              		.align	2
 1151              	c.9903:
 1152 0000 00000000 		.space	4
 1153              		.section	.bss.systick_cnt_old.9946,"aw",%nobits
 1154              		.align	2
 1157              	systick_cnt_old.9946:
 1158 0000 00000000 		.space	4
 1159              		.section	.bss.q31_batt_voltage_acc.9947,"aw",%nobits
 1160              		.align	2
 1163              	q31_batt_voltage_acc.9947:
 1164 0000 00000000 		.space	4
 1165              		.section	.bss.debug_cnt.9949,"aw",%nobits
 1168              	debug_cnt.9949:
 1169 0000 00       		.space	1
 1170              		.text
 1171              	.Letext0:
 1172              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 1173              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 1174              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1175              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1176              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1177              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1178              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1179              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1180              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1181              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 1182              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1183              		.file 14 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 1184              		.file 15 "/usr/include/newlib/sys/_types.h"
 1185              		.file 16 "/usr/include/newlib/sys/reent.h"
 1186              		.file 17 "/usr/include/newlib/sys/lock.h"
 1187              		.file 18 "/usr/include/newlib/stdlib.h"
ARM GAS  /tmp/ccBHwZHp.s 			page 30


 1188              		.file 19 "/usr/include/newlib/math.h"
 1189              		.file 20 "Core/Inc/arm_math.h"
 1190              		.file 21 "Core/Inc/main.h"
 1191              		.file 22 "Core/Inc/motor.h"
ARM GAS  /tmp/ccBHwZHp.s 			page 31


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
                            *COM*:0000000000000040 huart1
                            *COM*:0000000000000040 huart3
                            *COM*:0000000000000044 hdma_usart1_tx
                            *COM*:0000000000000044 hdma_usart1_rx
                            *COM*:0000000000000044 hdma_usart3_tx
                            *COM*:0000000000000044 hdma_usart3_rx
                            *COM*:0000000000000020 M365State
                            *COM*:0000000000000054 MSPublic
     /tmp/ccBHwZHp.s:28     .bss.systick_cnt:0000000000000000 systick_cnt
     /tmp/ccBHwZHp.s:25     .bss.systick_cnt:0000000000000000 $d
     /tmp/ccBHwZHp.s:31     .text.UserSysTickHandler:0000000000000000 $t
     /tmp/ccBHwZHp.s:39     .text.UserSysTickHandler:0000000000000000 UserSysTickHandler
     /tmp/ccBHwZHp.s:90     .text.UserSysTickHandler:000000000000003c $d
     /tmp/ccBHwZHp.s:1151   .bss.c.9903:0000000000000000 c.9903
     /tmp/ccBHwZHp.s:98     .text.DMA_Init:0000000000000000 $t
     /tmp/ccBHwZHp.s:104    .text.DMA_Init:0000000000000000 DMA_Init
     /tmp/ccBHwZHp.s:171    .text.DMA_Init:0000000000000058 $d
     /tmp/ccBHwZHp.s:176    .rodata:0000000000000000 $d
     /tmp/ccBHwZHp.s:180    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccBHwZHp.s:187    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccBHwZHp.s:816    .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccBHwZHp.s:313    .text.SystemClock_Config:00000000000000b8 $d
     /tmp/ccBHwZHp.s:319    .text.USART1_UART_Init:0000000000000000 $t
     /tmp/ccBHwZHp.s:325    .text.USART1_UART_Init:0000000000000000 USART1_UART_Init
     /tmp/ccBHwZHp.s:773    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccBHwZHp.s:387    .text.USART1_UART_Init:000000000000004c $d
     /tmp/ccBHwZHp.s:393    .text.USART3_UART_Init:0000000000000000 $t
     /tmp/ccBHwZHp.s:399    .text.USART3_UART_Init:0000000000000000 USART3_UART_Init
     /tmp/ccBHwZHp.s:463    .text.USART3_UART_Init:0000000000000050 $d
     /tmp/ccBHwZHp.s:470    .text.GPIO_Init:0000000000000000 $t
     /tmp/ccBHwZHp.s:476    .text.GPIO_Init:0000000000000000 GPIO_Init
     /tmp/ccBHwZHp.s:662    .text.GPIO_Init:000000000000012c $d
     /tmp/ccBHwZHp.s:671    .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/ccBHwZHp.s:678    .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/ccBHwZHp.s:718    .text.HAL_UART_TxCpltCallback:0000000000000020 $d
     /tmp/ccBHwZHp.s:723    .text.HAL_UART_ErrorCallback:0000000000000000 $t
     /tmp/ccBHwZHp.s:730    .text.HAL_UART_ErrorCallback:0000000000000000 HAL_UART_ErrorCallback
     /tmp/ccBHwZHp.s:766    .text.Error_Handler:0000000000000000 $t
     /tmp/ccBHwZHp.s:809    .text._Error_Handler:0000000000000000 $t
     /tmp/ccBHwZHp.s:847    .text.main:0000000000000000 $t
     /tmp/ccBHwZHp.s:854    .text.main:0000000000000000 main
     /tmp/ccBHwZHp.s:1135   .text.main:00000000000001c0 $d
     /tmp/ccBHwZHp.s:1157   .bss.systick_cnt_old.9946:0000000000000000 systick_cnt_old.9946
     /tmp/ccBHwZHp.s:1163   .bss.q31_batt_voltage_acc.9947:0000000000000000 q31_batt_voltage_acc.9947
     /tmp/ccBHwZHp.s:1168   .bss.debug_cnt.9949:0000000000000000 debug_cnt.9949
     /tmp/ccBHwZHp.s:1148   .bss.c.9903:0000000000000000 $d
     /tmp/ccBHwZHp.s:1154   .bss.systick_cnt_old.9946:0000000000000000 $d
     /tmp/ccBHwZHp.s:1160   .bss.q31_batt_voltage_acc.9947:0000000000000000 $d
     /tmp/ccBHwZHp.s:1169   .bss.debug_cnt.9949:0000000000000000 $d

UNDEFINED SYMBOLS
motor_slow_loop
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_RCC_OscConfig
ARM GAS  /tmp/ccBHwZHp.s 			page 32


HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_HalfDuplex_Init
HAL_UART_Init
HAL_GPIO_Init
HAL_GPIO_WritePin
HAL_HalfDuplex_EnableReceiver
motor_disable_pwm
HAL_Init
motor_init
M365Dashboard_init
PWR_init
search_DashboardMessage
checkButton
printf_
