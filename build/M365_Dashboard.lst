ARM GAS  /tmp/ccEbWydE.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"M365_Dashboard.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.__NVIC_SystemReset,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	__NVIC_SystemReset:
  24              	.LFB59:
  25              		.file 1 "Drivers/CMSIS/Include/core_cm3.h"
   1:Drivers/CMSIS/Include/core_cm3.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm3.h ****  * @file     core_cm3.h
   3:Drivers/CMSIS/Include/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm3.h ****  * @version  V5.0.8
   5:Drivers/CMSIS/Include/core_cm3.h ****  * @date     04. June 2018
   6:Drivers/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm3.h **** /*
   8:Drivers/CMSIS/Include/core_cm3.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm3.h ****  *
  10:Drivers/CMSIS/Include/core_cm3.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm3.h ****  *
  12:Drivers/CMSIS/Include/core_cm3.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm3.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm3.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm3.h ****  *
  16:Drivers/CMSIS/Include/core_cm3.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm3.h ****  *
  18:Drivers/CMSIS/Include/core_cm3.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm3.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm3.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm3.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm3.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm3.h ****  */
  24:Drivers/CMSIS/Include/core_cm3.h **** 
  25:Drivers/CMSIS/Include/core_cm3.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm3.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm3.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm3.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm3.h **** #endif
  30:Drivers/CMSIS/Include/core_cm3.h **** 
  31:Drivers/CMSIS/Include/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccEbWydE.s 			page 2


  34:Drivers/CMSIS/Include/core_cm3.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm3.h **** 
  36:Drivers/CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm3.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm3.h **** #endif
  39:Drivers/CMSIS/Include/core_cm3.h **** 
  40:Drivers/CMSIS/Include/core_cm3.h **** /**
  41:Drivers/CMSIS/Include/core_cm3.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm3.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm3.h **** 
  44:Drivers/CMSIS/Include/core_cm3.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm3.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm3.h **** 
  47:Drivers/CMSIS/Include/core_cm3.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm3.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm3.h **** 
  50:Drivers/CMSIS/Include/core_cm3.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm3.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm3.h ****  */
  53:Drivers/CMSIS/Include/core_cm3.h **** 
  54:Drivers/CMSIS/Include/core_cm3.h **** 
  55:Drivers/CMSIS/Include/core_cm3.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm3.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm3.h **** /**
  59:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup Cortex_M3
  60:Drivers/CMSIS/Include/core_cm3.h ****   @{
  61:Drivers/CMSIS/Include/core_cm3.h ****  */
  62:Drivers/CMSIS/Include/core_cm3.h **** 
  63:Drivers/CMSIS/Include/core_cm3.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm3.h **** 
  65:Drivers/CMSIS/Include/core_cm3.h **** /*  CMSIS CM3 definitions */
  66:Drivers/CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm3.h ****                                     __CM3_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm3.h **** 
  71:Drivers/CMSIS/Include/core_cm3.h **** #define __CORTEX_M                (3U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm3.h **** 
  73:Drivers/CMSIS/Include/core_cm3.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm3.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm3.h **** */
  76:Drivers/CMSIS/Include/core_cm3.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm3.h **** 
  78:Drivers/CMSIS/Include/core_cm3.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm3.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm3.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm3.h **** 
  83:Drivers/CMSIS/Include/core_cm3.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm3.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm3.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm3.h **** 
  88:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
ARM GAS  /tmp/ccEbWydE.s 			page 3


  91:Drivers/CMSIS/Include/core_cm3.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm3.h **** 
  93:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm3.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm3.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm3.h **** 
  98:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm3.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm3.h **** 
 103:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm3.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm3.h **** 
 108:Drivers/CMSIS/Include/core_cm3.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm3.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm3.h **** 
 113:Drivers/CMSIS/Include/core_cm3.h **** #endif
 114:Drivers/CMSIS/Include/core_cm3.h **** 
 115:Drivers/CMSIS/Include/core_cm3.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm3.h **** 
 117:Drivers/CMSIS/Include/core_cm3.h **** 
 118:Drivers/CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm3.h **** }
 120:Drivers/CMSIS/Include/core_cm3.h **** #endif
 121:Drivers/CMSIS/Include/core_cm3.h **** 
 122:Drivers/CMSIS/Include/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm3.h **** 
 124:Drivers/CMSIS/Include/core_cm3.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm3.h **** 
 126:Drivers/CMSIS/Include/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm3.h **** 
 129:Drivers/CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm3.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm3.h **** #endif
 132:Drivers/CMSIS/Include/core_cm3.h **** 
 133:Drivers/CMSIS/Include/core_cm3.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm3.h ****   #ifndef __CM3_REV
 136:Drivers/CMSIS/Include/core_cm3.h ****     #define __CM3_REV               0x0200U
 137:Drivers/CMSIS/Include/core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm3.h **** 
 140:Drivers/CMSIS/Include/core_cm3.h ****   #ifndef __MPU_PRESENT
 141:Drivers/CMSIS/Include/core_cm3.h ****     #define __MPU_PRESENT             0U
 142:Drivers/CMSIS/Include/core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm3.h **** 
 145:Drivers/CMSIS/Include/core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 146:Drivers/CMSIS/Include/core_cm3.h ****     #define __NVIC_PRIO_BITS          3U
 147:Drivers/CMSIS/Include/core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
ARM GAS  /tmp/ccEbWydE.s 			page 4


 148:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm3.h **** 
 150:Drivers/CMSIS/Include/core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 151:Drivers/CMSIS/Include/core_cm3.h ****     #define __Vendor_SysTickConfig    0U
 152:Drivers/CMSIS/Include/core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 153:Drivers/CMSIS/Include/core_cm3.h ****   #endif
 154:Drivers/CMSIS/Include/core_cm3.h **** #endif
 155:Drivers/CMSIS/Include/core_cm3.h **** 
 156:Drivers/CMSIS/Include/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 157:Drivers/CMSIS/Include/core_cm3.h **** /**
 158:Drivers/CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 159:Drivers/CMSIS/Include/core_cm3.h **** 
 160:Drivers/CMSIS/Include/core_cm3.h ****     <strong>IO Type Qualifiers</strong> are used
 161:Drivers/CMSIS/Include/core_cm3.h ****     \li to specify the access to peripheral variables.
 162:Drivers/CMSIS/Include/core_cm3.h ****     \li for automatic generation of peripheral register debug information.
 163:Drivers/CMSIS/Include/core_cm3.h **** */
 164:Drivers/CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
 165:Drivers/CMSIS/Include/core_cm3.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 166:Drivers/CMSIS/Include/core_cm3.h **** #else
 167:Drivers/CMSIS/Include/core_cm3.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 168:Drivers/CMSIS/Include/core_cm3.h **** #endif
 169:Drivers/CMSIS/Include/core_cm3.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 170:Drivers/CMSIS/Include/core_cm3.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 171:Drivers/CMSIS/Include/core_cm3.h **** 
 172:Drivers/CMSIS/Include/core_cm3.h **** /* following defines should be used for structure members */
 173:Drivers/CMSIS/Include/core_cm3.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 174:Drivers/CMSIS/Include/core_cm3.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 175:Drivers/CMSIS/Include/core_cm3.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 176:Drivers/CMSIS/Include/core_cm3.h **** 
 177:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group Cortex_M3 */
 178:Drivers/CMSIS/Include/core_cm3.h **** 
 179:Drivers/CMSIS/Include/core_cm3.h **** 
 180:Drivers/CMSIS/Include/core_cm3.h **** 
 181:Drivers/CMSIS/Include/core_cm3.h **** /*******************************************************************************
 182:Drivers/CMSIS/Include/core_cm3.h ****  *                 Register Abstraction
 183:Drivers/CMSIS/Include/core_cm3.h ****   Core Register contain:
 184:Drivers/CMSIS/Include/core_cm3.h ****   - Core Register
 185:Drivers/CMSIS/Include/core_cm3.h ****   - Core NVIC Register
 186:Drivers/CMSIS/Include/core_cm3.h ****   - Core SCB Register
 187:Drivers/CMSIS/Include/core_cm3.h ****   - Core SysTick Register
 188:Drivers/CMSIS/Include/core_cm3.h ****   - Core Debug Register
 189:Drivers/CMSIS/Include/core_cm3.h ****   - Core MPU Register
 190:Drivers/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
 191:Drivers/CMSIS/Include/core_cm3.h **** /**
 192:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 193:Drivers/CMSIS/Include/core_cm3.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 194:Drivers/CMSIS/Include/core_cm3.h **** */
 195:Drivers/CMSIS/Include/core_cm3.h **** 
 196:Drivers/CMSIS/Include/core_cm3.h **** /**
 197:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup    CMSIS_core_register
 198:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 199:Drivers/CMSIS/Include/core_cm3.h ****   \brief      Core Register type definitions.
 200:Drivers/CMSIS/Include/core_cm3.h ****   @{
 201:Drivers/CMSIS/Include/core_cm3.h ****  */
 202:Drivers/CMSIS/Include/core_cm3.h **** 
 203:Drivers/CMSIS/Include/core_cm3.h **** /**
 204:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Union type to access the Application Program Status Register (APSR).
ARM GAS  /tmp/ccEbWydE.s 			page 5


 205:Drivers/CMSIS/Include/core_cm3.h ****  */
 206:Drivers/CMSIS/Include/core_cm3.h **** typedef union
 207:Drivers/CMSIS/Include/core_cm3.h **** {
 208:Drivers/CMSIS/Include/core_cm3.h ****   struct
 209:Drivers/CMSIS/Include/core_cm3.h ****   {
 210:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved */
 211:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 212:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 213:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 214:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 215:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 216:Drivers/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 217:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 218:Drivers/CMSIS/Include/core_cm3.h **** } APSR_Type;
 219:Drivers/CMSIS/Include/core_cm3.h **** 
 220:Drivers/CMSIS/Include/core_cm3.h **** /* APSR Register Definitions */
 221:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 222:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm3.h **** 
 224:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 225:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 226:Drivers/CMSIS/Include/core_cm3.h **** 
 227:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 228:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 229:Drivers/CMSIS/Include/core_cm3.h **** 
 230:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 231:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 232:Drivers/CMSIS/Include/core_cm3.h **** 
 233:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 234:Drivers/CMSIS/Include/core_cm3.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 235:Drivers/CMSIS/Include/core_cm3.h **** 
 236:Drivers/CMSIS/Include/core_cm3.h **** 
 237:Drivers/CMSIS/Include/core_cm3.h **** /**
 238:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 239:Drivers/CMSIS/Include/core_cm3.h ****  */
 240:Drivers/CMSIS/Include/core_cm3.h **** typedef union
 241:Drivers/CMSIS/Include/core_cm3.h **** {
 242:Drivers/CMSIS/Include/core_cm3.h ****   struct
 243:Drivers/CMSIS/Include/core_cm3.h ****   {
 244:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 245:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 246:Drivers/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 247:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 248:Drivers/CMSIS/Include/core_cm3.h **** } IPSR_Type;
 249:Drivers/CMSIS/Include/core_cm3.h **** 
 250:Drivers/CMSIS/Include/core_cm3.h **** /* IPSR Register Definitions */
 251:Drivers/CMSIS/Include/core_cm3.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 252:Drivers/CMSIS/Include/core_cm3.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 253:Drivers/CMSIS/Include/core_cm3.h **** 
 254:Drivers/CMSIS/Include/core_cm3.h **** 
 255:Drivers/CMSIS/Include/core_cm3.h **** /**
 256:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 257:Drivers/CMSIS/Include/core_cm3.h ****  */
 258:Drivers/CMSIS/Include/core_cm3.h **** typedef union
 259:Drivers/CMSIS/Include/core_cm3.h **** {
 260:Drivers/CMSIS/Include/core_cm3.h ****   struct
 261:Drivers/CMSIS/Include/core_cm3.h ****   {
ARM GAS  /tmp/ccEbWydE.s 			page 6


 262:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 263:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
 264:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
 265:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t _reserved1:8;               /*!< bit: 16..23  Reserved */
 266:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit */
 267:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
 268:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 269:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 270:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 271:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 272:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 273:Drivers/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 274:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 275:Drivers/CMSIS/Include/core_cm3.h **** } xPSR_Type;
 276:Drivers/CMSIS/Include/core_cm3.h **** 
 277:Drivers/CMSIS/Include/core_cm3.h **** /* xPSR Register Definitions */
 278:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 279:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm3.h **** 
 281:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 282:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 283:Drivers/CMSIS/Include/core_cm3.h **** 
 284:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 285:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 286:Drivers/CMSIS/Include/core_cm3.h **** 
 287:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 288:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 289:Drivers/CMSIS/Include/core_cm3.h **** 
 290:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 291:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 292:Drivers/CMSIS/Include/core_cm3.h **** 
 293:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR
 294:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR
 295:Drivers/CMSIS/Include/core_cm3.h **** 
 296:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 297:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 298:Drivers/CMSIS/Include/core_cm3.h **** 
 299:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR
 300:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR
 301:Drivers/CMSIS/Include/core_cm3.h **** 
 302:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 303:Drivers/CMSIS/Include/core_cm3.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 304:Drivers/CMSIS/Include/core_cm3.h **** 
 305:Drivers/CMSIS/Include/core_cm3.h **** 
 306:Drivers/CMSIS/Include/core_cm3.h **** /**
 307:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Union type to access the Control Registers (CONTROL).
 308:Drivers/CMSIS/Include/core_cm3.h ****  */
 309:Drivers/CMSIS/Include/core_cm3.h **** typedef union
 310:Drivers/CMSIS/Include/core_cm3.h **** {
 311:Drivers/CMSIS/Include/core_cm3.h ****   struct
 312:Drivers/CMSIS/Include/core_cm3.h ****   {
 313:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 314:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 315:Drivers/CMSIS/Include/core_cm3.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 316:Drivers/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 317:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 318:Drivers/CMSIS/Include/core_cm3.h **** } CONTROL_Type;
ARM GAS  /tmp/ccEbWydE.s 			page 7


 319:Drivers/CMSIS/Include/core_cm3.h **** 
 320:Drivers/CMSIS/Include/core_cm3.h **** /* CONTROL Register Definitions */
 321:Drivers/CMSIS/Include/core_cm3.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 322:Drivers/CMSIS/Include/core_cm3.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 323:Drivers/CMSIS/Include/core_cm3.h **** 
 324:Drivers/CMSIS/Include/core_cm3.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 325:Drivers/CMSIS/Include/core_cm3.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 326:Drivers/CMSIS/Include/core_cm3.h **** 
 327:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_CORE */
 328:Drivers/CMSIS/Include/core_cm3.h **** 
 329:Drivers/CMSIS/Include/core_cm3.h **** 
 330:Drivers/CMSIS/Include/core_cm3.h **** /**
 331:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup    CMSIS_core_register
 332:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 333:Drivers/CMSIS/Include/core_cm3.h ****   \brief      Type definitions for the NVIC Registers
 334:Drivers/CMSIS/Include/core_cm3.h ****   @{
 335:Drivers/CMSIS/Include/core_cm3.h ****  */
 336:Drivers/CMSIS/Include/core_cm3.h **** 
 337:Drivers/CMSIS/Include/core_cm3.h **** /**
 338:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 339:Drivers/CMSIS/Include/core_cm3.h ****  */
 340:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 341:Drivers/CMSIS/Include/core_cm3.h **** {
 342:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 343:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[24U];
 344:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 345:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RSERVED1[24U];
 346:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 347:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED2[24U];
 348:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 349:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED3[24U];
 350:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 351:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED4[56U];
 352:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 353:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED5[644U];
 354:Drivers/CMSIS/Include/core_cm3.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 355:Drivers/CMSIS/Include/core_cm3.h **** }  NVIC_Type;
 356:Drivers/CMSIS/Include/core_cm3.h **** 
 357:Drivers/CMSIS/Include/core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 358:Drivers/CMSIS/Include/core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 359:Drivers/CMSIS/Include/core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 360:Drivers/CMSIS/Include/core_cm3.h **** 
 361:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 362:Drivers/CMSIS/Include/core_cm3.h **** 
 363:Drivers/CMSIS/Include/core_cm3.h **** 
 364:Drivers/CMSIS/Include/core_cm3.h **** /**
 365:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 366:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 367:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the System Control Block Registers
 368:Drivers/CMSIS/Include/core_cm3.h ****   @{
 369:Drivers/CMSIS/Include/core_cm3.h ****  */
 370:Drivers/CMSIS/Include/core_cm3.h **** 
 371:Drivers/CMSIS/Include/core_cm3.h **** /**
 372:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the System Control Block (SCB).
 373:Drivers/CMSIS/Include/core_cm3.h ****  */
 374:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 375:Drivers/CMSIS/Include/core_cm3.h **** {
ARM GAS  /tmp/ccEbWydE.s 			page 8


 376:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 377:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 378:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 379:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 380:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 381:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 382:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 383:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 384:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 385:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 386:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 387:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 388:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 389:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 390:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 391:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 392:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 393:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 394:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 395:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[5U];
 396:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 397:Drivers/CMSIS/Include/core_cm3.h **** } SCB_Type;
 398:Drivers/CMSIS/Include/core_cm3.h **** 
 399:Drivers/CMSIS/Include/core_cm3.h **** /* SCB CPUID Register Definitions */
 400:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 402:Drivers/CMSIS/Include/core_cm3.h **** 
 403:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 405:Drivers/CMSIS/Include/core_cm3.h **** 
 406:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 408:Drivers/CMSIS/Include/core_cm3.h **** 
 409:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 411:Drivers/CMSIS/Include/core_cm3.h **** 
 412:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 414:Drivers/CMSIS/Include/core_cm3.h **** 
 415:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 416:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 418:Drivers/CMSIS/Include/core_cm3.h **** 
 419:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 421:Drivers/CMSIS/Include/core_cm3.h **** 
 422:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 424:Drivers/CMSIS/Include/core_cm3.h **** 
 425:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm3.h **** 
 428:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm3.h **** 
 431:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 432:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
ARM GAS  /tmp/ccEbWydE.s 			page 9


 433:Drivers/CMSIS/Include/core_cm3.h **** 
 434:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 435:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 436:Drivers/CMSIS/Include/core_cm3.h **** 
 437:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 438:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 439:Drivers/CMSIS/Include/core_cm3.h **** 
 440:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 442:Drivers/CMSIS/Include/core_cm3.h **** 
 443:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 445:Drivers/CMSIS/Include/core_cm3.h **** 
 446:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 447:Drivers/CMSIS/Include/core_cm3.h **** #if defined (__CM3_REV) && (__CM3_REV < 0x0201U)                   /* core r2p1 */
 448:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29U                                            /*!< SCB 
 449:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 450:Drivers/CMSIS/Include/core_cm3.h **** 
 451:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 452:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 453:Drivers/CMSIS/Include/core_cm3.h **** #else
 454:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 455:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 456:Drivers/CMSIS/Include/core_cm3.h **** #endif
 457:Drivers/CMSIS/Include/core_cm3.h **** 
 458:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 459:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 460:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 461:Drivers/CMSIS/Include/core_cm3.h **** 
 462:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 463:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 464:Drivers/CMSIS/Include/core_cm3.h **** 
 465:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 466:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 467:Drivers/CMSIS/Include/core_cm3.h **** 
 468:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 469:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 470:Drivers/CMSIS/Include/core_cm3.h **** 
 471:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 472:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 473:Drivers/CMSIS/Include/core_cm3.h **** 
 474:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 475:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 476:Drivers/CMSIS/Include/core_cm3.h **** 
 477:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 478:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 479:Drivers/CMSIS/Include/core_cm3.h **** 
 480:Drivers/CMSIS/Include/core_cm3.h **** /* SCB System Control Register Definitions */
 481:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 482:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 483:Drivers/CMSIS/Include/core_cm3.h **** 
 484:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 485:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 486:Drivers/CMSIS/Include/core_cm3.h **** 
 487:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 488:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 489:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccEbWydE.s 			page 10


 490:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 491:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 492:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 493:Drivers/CMSIS/Include/core_cm3.h **** 
 494:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 495:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 496:Drivers/CMSIS/Include/core_cm3.h **** 
 497:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 498:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 499:Drivers/CMSIS/Include/core_cm3.h **** 
 500:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 501:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 502:Drivers/CMSIS/Include/core_cm3.h **** 
 503:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 504:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 505:Drivers/CMSIS/Include/core_cm3.h **** 
 506:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 507:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 508:Drivers/CMSIS/Include/core_cm3.h **** 
 509:Drivers/CMSIS/Include/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 510:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 511:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 512:Drivers/CMSIS/Include/core_cm3.h **** 
 513:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 514:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 515:Drivers/CMSIS/Include/core_cm3.h **** 
 516:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 517:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 518:Drivers/CMSIS/Include/core_cm3.h **** 
 519:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 520:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 521:Drivers/CMSIS/Include/core_cm3.h **** 
 522:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 523:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 524:Drivers/CMSIS/Include/core_cm3.h **** 
 525:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 526:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 527:Drivers/CMSIS/Include/core_cm3.h **** 
 528:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 529:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 530:Drivers/CMSIS/Include/core_cm3.h **** 
 531:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 532:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 533:Drivers/CMSIS/Include/core_cm3.h **** 
 534:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 535:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 536:Drivers/CMSIS/Include/core_cm3.h **** 
 537:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 538:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 539:Drivers/CMSIS/Include/core_cm3.h **** 
 540:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 541:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 542:Drivers/CMSIS/Include/core_cm3.h **** 
 543:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 544:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 545:Drivers/CMSIS/Include/core_cm3.h **** 
 546:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
ARM GAS  /tmp/ccEbWydE.s 			page 11


 547:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 548:Drivers/CMSIS/Include/core_cm3.h **** 
 549:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 550:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 551:Drivers/CMSIS/Include/core_cm3.h **** 
 552:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Configurable Fault Status Register Definitions */
 553:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 554:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 555:Drivers/CMSIS/Include/core_cm3.h **** 
 556:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 557:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 558:Drivers/CMSIS/Include/core_cm3.h **** 
 559:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 560:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 561:Drivers/CMSIS/Include/core_cm3.h **** 
 562:Drivers/CMSIS/Include/core_cm3.h **** /* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
 563:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MMARVALID_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 7U)               /*!< SCB 
 564:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB 
 565:Drivers/CMSIS/Include/core_cm3.h **** 
 566:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MSTKERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 4U)               /*!< SCB 
 567:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB 
 568:Drivers/CMSIS/Include/core_cm3.h **** 
 569:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MUNSTKERR_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 3U)               /*!< SCB 
 570:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB 
 571:Drivers/CMSIS/Include/core_cm3.h **** 
 572:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_DACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 1U)               /*!< SCB 
 573:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB 
 574:Drivers/CMSIS/Include/core_cm3.h **** 
 575:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_IACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 0U)               /*!< SCB 
 576:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB 
 577:Drivers/CMSIS/Include/core_cm3.h **** 
 578:Drivers/CMSIS/Include/core_cm3.h **** /* BusFault Status Register (part of SCB Configurable Fault Status Register) */
 579:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB 
 580:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB 
 581:Drivers/CMSIS/Include/core_cm3.h **** 
 582:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB 
 583:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB 
 584:Drivers/CMSIS/Include/core_cm3.h **** 
 585:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB 
 586:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB 
 587:Drivers/CMSIS/Include/core_cm3.h **** 
 588:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB 
 589:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB 
 590:Drivers/CMSIS/Include/core_cm3.h **** 
 591:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB 
 592:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB 
 593:Drivers/CMSIS/Include/core_cm3.h **** 
 594:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB 
 595:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB 
 596:Drivers/CMSIS/Include/core_cm3.h **** 
 597:Drivers/CMSIS/Include/core_cm3.h **** /* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
 598:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB 
 599:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB 
 600:Drivers/CMSIS/Include/core_cm3.h **** 
 601:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB 
 602:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB 
 603:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccEbWydE.s 			page 12


 604:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB 
 605:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB 
 606:Drivers/CMSIS/Include/core_cm3.h **** 
 607:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB 
 608:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB 
 609:Drivers/CMSIS/Include/core_cm3.h **** 
 610:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB 
 611:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB 
 612:Drivers/CMSIS/Include/core_cm3.h **** 
 613:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB 
 614:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB 
 615:Drivers/CMSIS/Include/core_cm3.h **** 
 616:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Hard Fault Status Register Definitions */
 617:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 618:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 619:Drivers/CMSIS/Include/core_cm3.h **** 
 620:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 621:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 622:Drivers/CMSIS/Include/core_cm3.h **** 
 623:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 624:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 625:Drivers/CMSIS/Include/core_cm3.h **** 
 626:Drivers/CMSIS/Include/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 627:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 628:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 629:Drivers/CMSIS/Include/core_cm3.h **** 
 630:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 631:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 632:Drivers/CMSIS/Include/core_cm3.h **** 
 633:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 634:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 635:Drivers/CMSIS/Include/core_cm3.h **** 
 636:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 637:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 638:Drivers/CMSIS/Include/core_cm3.h **** 
 639:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 640:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 641:Drivers/CMSIS/Include/core_cm3.h **** 
 642:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SCB */
 643:Drivers/CMSIS/Include/core_cm3.h **** 
 644:Drivers/CMSIS/Include/core_cm3.h **** 
 645:Drivers/CMSIS/Include/core_cm3.h **** /**
 646:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 647:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 648:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 649:Drivers/CMSIS/Include/core_cm3.h ****   @{
 650:Drivers/CMSIS/Include/core_cm3.h ****  */
 651:Drivers/CMSIS/Include/core_cm3.h **** 
 652:Drivers/CMSIS/Include/core_cm3.h **** /**
 653:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 654:Drivers/CMSIS/Include/core_cm3.h ****  */
 655:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 656:Drivers/CMSIS/Include/core_cm3.h **** {
 657:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[1U];
 658:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 659:Drivers/CMSIS/Include/core_cm3.h **** #if defined (__CM3_REV) && (__CM3_REV >= 0x200U)
 660:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
ARM GAS  /tmp/ccEbWydE.s 			page 13


 661:Drivers/CMSIS/Include/core_cm3.h **** #else
 662:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED1[1U];
 663:Drivers/CMSIS/Include/core_cm3.h **** #endif
 664:Drivers/CMSIS/Include/core_cm3.h **** } SCnSCB_Type;
 665:Drivers/CMSIS/Include/core_cm3.h **** 
 666:Drivers/CMSIS/Include/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 667:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 668:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 669:Drivers/CMSIS/Include/core_cm3.h **** 
 670:Drivers/CMSIS/Include/core_cm3.h **** /* Auxiliary Control Register Definitions */
 671:Drivers/CMSIS/Include/core_cm3.h **** 
 672:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 673:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 674:Drivers/CMSIS/Include/core_cm3.h **** 
 675:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 676:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 677:Drivers/CMSIS/Include/core_cm3.h **** 
 678:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 679:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 680:Drivers/CMSIS/Include/core_cm3.h **** 
 681:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
 682:Drivers/CMSIS/Include/core_cm3.h **** 
 683:Drivers/CMSIS/Include/core_cm3.h **** 
 684:Drivers/CMSIS/Include/core_cm3.h **** /**
 685:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 686:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 687:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the System Timer Registers.
 688:Drivers/CMSIS/Include/core_cm3.h ****   @{
 689:Drivers/CMSIS/Include/core_cm3.h ****  */
 690:Drivers/CMSIS/Include/core_cm3.h **** 
 691:Drivers/CMSIS/Include/core_cm3.h **** /**
 692:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the System Timer (SysTick).
 693:Drivers/CMSIS/Include/core_cm3.h ****  */
 694:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 695:Drivers/CMSIS/Include/core_cm3.h **** {
 696:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 697:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 698:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 699:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 700:Drivers/CMSIS/Include/core_cm3.h **** } SysTick_Type;
 701:Drivers/CMSIS/Include/core_cm3.h **** 
 702:Drivers/CMSIS/Include/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 703:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 704:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 705:Drivers/CMSIS/Include/core_cm3.h **** 
 706:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 707:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 708:Drivers/CMSIS/Include/core_cm3.h **** 
 709:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 710:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 711:Drivers/CMSIS/Include/core_cm3.h **** 
 712:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 713:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 714:Drivers/CMSIS/Include/core_cm3.h **** 
 715:Drivers/CMSIS/Include/core_cm3.h **** /* SysTick Reload Register Definitions */
 716:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 717:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
ARM GAS  /tmp/ccEbWydE.s 			page 14


 718:Drivers/CMSIS/Include/core_cm3.h **** 
 719:Drivers/CMSIS/Include/core_cm3.h **** /* SysTick Current Register Definitions */
 720:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 721:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 722:Drivers/CMSIS/Include/core_cm3.h **** 
 723:Drivers/CMSIS/Include/core_cm3.h **** /* SysTick Calibration Register Definitions */
 724:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 725:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 726:Drivers/CMSIS/Include/core_cm3.h **** 
 727:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 728:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 729:Drivers/CMSIS/Include/core_cm3.h **** 
 730:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 731:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 732:Drivers/CMSIS/Include/core_cm3.h **** 
 733:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 734:Drivers/CMSIS/Include/core_cm3.h **** 
 735:Drivers/CMSIS/Include/core_cm3.h **** 
 736:Drivers/CMSIS/Include/core_cm3.h **** /**
 737:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 738:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 739:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 740:Drivers/CMSIS/Include/core_cm3.h ****   @{
 741:Drivers/CMSIS/Include/core_cm3.h ****  */
 742:Drivers/CMSIS/Include/core_cm3.h **** 
 743:Drivers/CMSIS/Include/core_cm3.h **** /**
 744:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 745:Drivers/CMSIS/Include/core_cm3.h ****  */
 746:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 747:Drivers/CMSIS/Include/core_cm3.h **** {
 748:Drivers/CMSIS/Include/core_cm3.h ****   __OM  union
 749:Drivers/CMSIS/Include/core_cm3.h ****   {
 750:Drivers/CMSIS/Include/core_cm3.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 751:Drivers/CMSIS/Include/core_cm3.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 752:Drivers/CMSIS/Include/core_cm3.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 753:Drivers/CMSIS/Include/core_cm3.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 754:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[864U];
 755:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 756:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED1[15U];
 757:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 758:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED2[15U];
 759:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 760:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED3[29U];
 761:Drivers/CMSIS/Include/core_cm3.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 762:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 763:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 764:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED4[43U];
 765:Drivers/CMSIS/Include/core_cm3.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 766:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 767:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED5[6U];
 768:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 769:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 770:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 771:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 772:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 773:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 774:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
ARM GAS  /tmp/ccEbWydE.s 			page 15


 775:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 776:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 777:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 778:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 779:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 780:Drivers/CMSIS/Include/core_cm3.h **** } ITM_Type;
 781:Drivers/CMSIS/Include/core_cm3.h **** 
 782:Drivers/CMSIS/Include/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 783:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 784:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFFFFFFFFUL /*<< ITM_TPR_PRIVMASK_Pos*/)     /*!< ITM 
 785:Drivers/CMSIS/Include/core_cm3.h **** 
 786:Drivers/CMSIS/Include/core_cm3.h **** /* ITM Trace Control Register Definitions */
 787:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 788:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 789:Drivers/CMSIS/Include/core_cm3.h **** 
 790:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 791:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 792:Drivers/CMSIS/Include/core_cm3.h **** 
 793:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 794:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 795:Drivers/CMSIS/Include/core_cm3.h **** 
 796:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 797:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 798:Drivers/CMSIS/Include/core_cm3.h **** 
 799:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 800:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 801:Drivers/CMSIS/Include/core_cm3.h **** 
 802:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 803:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 804:Drivers/CMSIS/Include/core_cm3.h **** 
 805:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 806:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 807:Drivers/CMSIS/Include/core_cm3.h **** 
 808:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 809:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 810:Drivers/CMSIS/Include/core_cm3.h **** 
 811:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 812:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 813:Drivers/CMSIS/Include/core_cm3.h **** 
 814:Drivers/CMSIS/Include/core_cm3.h **** /* ITM Integration Write Register Definitions */
 815:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 816:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 817:Drivers/CMSIS/Include/core_cm3.h **** 
 818:Drivers/CMSIS/Include/core_cm3.h **** /* ITM Integration Read Register Definitions */
 819:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 820:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 821:Drivers/CMSIS/Include/core_cm3.h **** 
 822:Drivers/CMSIS/Include/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 823:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 824:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 825:Drivers/CMSIS/Include/core_cm3.h **** 
 826:Drivers/CMSIS/Include/core_cm3.h **** /* ITM Lock Status Register Definitions */
 827:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 828:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 829:Drivers/CMSIS/Include/core_cm3.h **** 
 830:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 831:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
ARM GAS  /tmp/ccEbWydE.s 			page 16


 832:Drivers/CMSIS/Include/core_cm3.h **** 
 833:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 834:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 835:Drivers/CMSIS/Include/core_cm3.h **** 
 836:Drivers/CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 837:Drivers/CMSIS/Include/core_cm3.h **** 
 838:Drivers/CMSIS/Include/core_cm3.h **** 
 839:Drivers/CMSIS/Include/core_cm3.h **** /**
 840:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 841:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 842:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 843:Drivers/CMSIS/Include/core_cm3.h ****   @{
 844:Drivers/CMSIS/Include/core_cm3.h ****  */
 845:Drivers/CMSIS/Include/core_cm3.h **** 
 846:Drivers/CMSIS/Include/core_cm3.h **** /**
 847:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 848:Drivers/CMSIS/Include/core_cm3.h ****  */
 849:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 850:Drivers/CMSIS/Include/core_cm3.h **** {
 851:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 852:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 853:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 854:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 855:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 856:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 857:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 858:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 859:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 860:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 861:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 862:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[1U];
 863:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 864:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 865:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 866:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED1[1U];
 867:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 868:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 869:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 870:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED2[1U];
 871:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 872:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 873:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 874:Drivers/CMSIS/Include/core_cm3.h **** } DWT_Type;
 875:Drivers/CMSIS/Include/core_cm3.h **** 
 876:Drivers/CMSIS/Include/core_cm3.h **** /* DWT Control Register Definitions */
 877:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 878:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 879:Drivers/CMSIS/Include/core_cm3.h **** 
 880:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 881:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 882:Drivers/CMSIS/Include/core_cm3.h **** 
 883:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 884:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 885:Drivers/CMSIS/Include/core_cm3.h **** 
 886:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 887:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 888:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccEbWydE.s 			page 17


 889:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 890:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 891:Drivers/CMSIS/Include/core_cm3.h **** 
 892:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 893:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 894:Drivers/CMSIS/Include/core_cm3.h **** 
 895:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 896:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 897:Drivers/CMSIS/Include/core_cm3.h **** 
 898:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 899:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 900:Drivers/CMSIS/Include/core_cm3.h **** 
 901:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 902:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 903:Drivers/CMSIS/Include/core_cm3.h **** 
 904:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 905:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 906:Drivers/CMSIS/Include/core_cm3.h **** 
 907:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 908:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 909:Drivers/CMSIS/Include/core_cm3.h **** 
 910:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 911:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 912:Drivers/CMSIS/Include/core_cm3.h **** 
 913:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 914:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 915:Drivers/CMSIS/Include/core_cm3.h **** 
 916:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 917:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 918:Drivers/CMSIS/Include/core_cm3.h **** 
 919:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 920:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 921:Drivers/CMSIS/Include/core_cm3.h **** 
 922:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 923:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 924:Drivers/CMSIS/Include/core_cm3.h **** 
 925:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 926:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 927:Drivers/CMSIS/Include/core_cm3.h **** 
 928:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 929:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 930:Drivers/CMSIS/Include/core_cm3.h **** 
 931:Drivers/CMSIS/Include/core_cm3.h **** /* DWT CPI Count Register Definitions */
 932:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 933:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 934:Drivers/CMSIS/Include/core_cm3.h **** 
 935:Drivers/CMSIS/Include/core_cm3.h **** /* DWT Exception Overhead Count Register Definitions */
 936:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
 937:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
 938:Drivers/CMSIS/Include/core_cm3.h **** 
 939:Drivers/CMSIS/Include/core_cm3.h **** /* DWT Sleep Count Register Definitions */
 940:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
 941:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
 942:Drivers/CMSIS/Include/core_cm3.h **** 
 943:Drivers/CMSIS/Include/core_cm3.h **** /* DWT LSU Count Register Definitions */
 944:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
 945:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
ARM GAS  /tmp/ccEbWydE.s 			page 18


 946:Drivers/CMSIS/Include/core_cm3.h **** 
 947:Drivers/CMSIS/Include/core_cm3.h **** /* DWT Folded-instruction Count Register Definitions */
 948:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
 949:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
 950:Drivers/CMSIS/Include/core_cm3.h **** 
 951:Drivers/CMSIS/Include/core_cm3.h **** /* DWT Comparator Mask Register Definitions */
 952:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
 953:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
 954:Drivers/CMSIS/Include/core_cm3.h **** 
 955:Drivers/CMSIS/Include/core_cm3.h **** /* DWT Comparator Function Register Definitions */
 956:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
 957:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 958:Drivers/CMSIS/Include/core_cm3.h **** 
 959:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
 960:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 961:Drivers/CMSIS/Include/core_cm3.h **** 
 962:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
 963:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 964:Drivers/CMSIS/Include/core_cm3.h **** 
 965:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
 966:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 967:Drivers/CMSIS/Include/core_cm3.h **** 
 968:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
 969:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 970:Drivers/CMSIS/Include/core_cm3.h **** 
 971:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
 972:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 973:Drivers/CMSIS/Include/core_cm3.h **** 
 974:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
 975:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 976:Drivers/CMSIS/Include/core_cm3.h **** 
 977:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
 978:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 979:Drivers/CMSIS/Include/core_cm3.h **** 
 980:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
 981:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
 982:Drivers/CMSIS/Include/core_cm3.h **** 
 983:Drivers/CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_DWT */
 984:Drivers/CMSIS/Include/core_cm3.h **** 
 985:Drivers/CMSIS/Include/core_cm3.h **** 
 986:Drivers/CMSIS/Include/core_cm3.h **** /**
 987:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 988:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 989:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
 990:Drivers/CMSIS/Include/core_cm3.h ****   @{
 991:Drivers/CMSIS/Include/core_cm3.h ****  */
 992:Drivers/CMSIS/Include/core_cm3.h **** 
 993:Drivers/CMSIS/Include/core_cm3.h **** /**
 994:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
 995:Drivers/CMSIS/Include/core_cm3.h ****  */
 996:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
 997:Drivers/CMSIS/Include/core_cm3.h **** {
 998:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
 999:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1000:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[2U];
1001:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1002:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED1[55U];
ARM GAS  /tmp/ccEbWydE.s 			page 19


1003:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1004:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED2[131U];
1005:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1006:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1007:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1008:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED3[759U];
1009:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER Register */
1010:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1011:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1012:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED4[1U];
1013:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1014:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1015:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1016:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED5[39U];
1017:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1018:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1019:Drivers/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED7[8U];
1020:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1021:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1022:Drivers/CMSIS/Include/core_cm3.h **** } TPI_Type;
1023:Drivers/CMSIS/Include/core_cm3.h **** 
1024:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1025:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1026:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1027:Drivers/CMSIS/Include/core_cm3.h **** 
1028:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Selected Pin Protocol Register Definitions */
1029:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1030:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1031:Drivers/CMSIS/Include/core_cm3.h **** 
1032:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Formatter and Flush Status Register Definitions */
1033:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1034:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1035:Drivers/CMSIS/Include/core_cm3.h **** 
1036:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1037:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1038:Drivers/CMSIS/Include/core_cm3.h **** 
1039:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1040:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1041:Drivers/CMSIS/Include/core_cm3.h **** 
1042:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1043:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1044:Drivers/CMSIS/Include/core_cm3.h **** 
1045:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Formatter and Flush Control Register Definitions */
1046:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1047:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1048:Drivers/CMSIS/Include/core_cm3.h **** 
1049:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1050:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1051:Drivers/CMSIS/Include/core_cm3.h **** 
1052:Drivers/CMSIS/Include/core_cm3.h **** /* TPI TRIGGER Register Definitions */
1053:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1054:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1055:Drivers/CMSIS/Include/core_cm3.h **** 
1056:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1057:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1058:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1059:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccEbWydE.s 			page 20


1060:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1061:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1062:Drivers/CMSIS/Include/core_cm3.h **** 
1063:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1064:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1065:Drivers/CMSIS/Include/core_cm3.h **** 
1066:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1067:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1068:Drivers/CMSIS/Include/core_cm3.h **** 
1069:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1070:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1071:Drivers/CMSIS/Include/core_cm3.h **** 
1072:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1073:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1074:Drivers/CMSIS/Include/core_cm3.h **** 
1075:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1076:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1077:Drivers/CMSIS/Include/core_cm3.h **** 
1078:Drivers/CMSIS/Include/core_cm3.h **** /* TPI ITATBCTR2 Register Definitions */
1079:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY2_Pos          0U                                         /*!< TPI ITA
1080:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY2_Pos*/)   /*!< TPI ITA
1081:Drivers/CMSIS/Include/core_cm3.h **** 
1082:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY1_Pos          0U                                         /*!< TPI ITA
1083:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY1_Pos*/)   /*!< TPI ITA
1084:Drivers/CMSIS/Include/core_cm3.h **** 
1085:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1086:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1087:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1088:Drivers/CMSIS/Include/core_cm3.h **** 
1089:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1090:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1091:Drivers/CMSIS/Include/core_cm3.h **** 
1092:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1093:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1094:Drivers/CMSIS/Include/core_cm3.h **** 
1095:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1096:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1097:Drivers/CMSIS/Include/core_cm3.h **** 
1098:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1099:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1100:Drivers/CMSIS/Include/core_cm3.h **** 
1101:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1102:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1103:Drivers/CMSIS/Include/core_cm3.h **** 
1104:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1105:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1106:Drivers/CMSIS/Include/core_cm3.h **** 
1107:Drivers/CMSIS/Include/core_cm3.h **** /* TPI ITATBCTR0 Register Definitions */
1108:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY2_Pos          0U                                         /*!< TPI ITA
1109:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY2_Pos*/)   /*!< TPI ITA
1110:Drivers/CMSIS/Include/core_cm3.h **** 
1111:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY1_Pos          0U                                         /*!< TPI ITA
1112:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY1_Pos*/)   /*!< TPI ITA
1113:Drivers/CMSIS/Include/core_cm3.h **** 
1114:Drivers/CMSIS/Include/core_cm3.h **** /* TPI Integration Mode Control Register Definitions */
1115:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1116:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_ITCTRL_Mode_Msk                (0x3UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
ARM GAS  /tmp/ccEbWydE.s 			page 21


1117:Drivers/CMSIS/Include/core_cm3.h **** 
1118:Drivers/CMSIS/Include/core_cm3.h **** /* TPI DEVID Register Definitions */
1119:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1120:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1121:Drivers/CMSIS/Include/core_cm3.h **** 
1122:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1123:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1124:Drivers/CMSIS/Include/core_cm3.h **** 
1125:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1126:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1127:Drivers/CMSIS/Include/core_cm3.h **** 
1128:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1129:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1130:Drivers/CMSIS/Include/core_cm3.h **** 
1131:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1132:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1133:Drivers/CMSIS/Include/core_cm3.h **** 
1134:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1135:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1136:Drivers/CMSIS/Include/core_cm3.h **** 
1137:Drivers/CMSIS/Include/core_cm3.h **** /* TPI DEVTYPE Register Definitions */
1138:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_SubType_Pos             4U                                         /*!< TPI DEV
1139:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1140:Drivers/CMSIS/Include/core_cm3.h **** 
1141:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Pos           0U                                         /*!< TPI DEV
1142:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1143:Drivers/CMSIS/Include/core_cm3.h **** 
1144:Drivers/CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_TPI */
1145:Drivers/CMSIS/Include/core_cm3.h **** 
1146:Drivers/CMSIS/Include/core_cm3.h **** 
1147:Drivers/CMSIS/Include/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1148:Drivers/CMSIS/Include/core_cm3.h **** /**
1149:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
1150:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1151:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1152:Drivers/CMSIS/Include/core_cm3.h ****   @{
1153:Drivers/CMSIS/Include/core_cm3.h ****  */
1154:Drivers/CMSIS/Include/core_cm3.h **** 
1155:Drivers/CMSIS/Include/core_cm3.h **** /**
1156:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1157:Drivers/CMSIS/Include/core_cm3.h ****  */
1158:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
1159:Drivers/CMSIS/Include/core_cm3.h **** {
1160:Drivers/CMSIS/Include/core_cm3.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1161:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1162:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1163:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1164:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1165:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1166:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1167:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1168:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1169:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1170:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1171:Drivers/CMSIS/Include/core_cm3.h **** } MPU_Type;
1172:Drivers/CMSIS/Include/core_cm3.h **** 
1173:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_RALIASES                  4U
ARM GAS  /tmp/ccEbWydE.s 			page 22


1174:Drivers/CMSIS/Include/core_cm3.h **** 
1175:Drivers/CMSIS/Include/core_cm3.h **** /* MPU Type Register Definitions */
1176:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1177:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1178:Drivers/CMSIS/Include/core_cm3.h **** 
1179:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1180:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1181:Drivers/CMSIS/Include/core_cm3.h **** 
1182:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1183:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1184:Drivers/CMSIS/Include/core_cm3.h **** 
1185:Drivers/CMSIS/Include/core_cm3.h **** /* MPU Control Register Definitions */
1186:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1187:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1188:Drivers/CMSIS/Include/core_cm3.h **** 
1189:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1190:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1191:Drivers/CMSIS/Include/core_cm3.h **** 
1192:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1193:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1194:Drivers/CMSIS/Include/core_cm3.h **** 
1195:Drivers/CMSIS/Include/core_cm3.h **** /* MPU Region Number Register Definitions */
1196:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1197:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1198:Drivers/CMSIS/Include/core_cm3.h **** 
1199:Drivers/CMSIS/Include/core_cm3.h **** /* MPU Region Base Address Register Definitions */
1200:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1201:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1202:Drivers/CMSIS/Include/core_cm3.h **** 
1203:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1204:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1205:Drivers/CMSIS/Include/core_cm3.h **** 
1206:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1207:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1208:Drivers/CMSIS/Include/core_cm3.h **** 
1209:Drivers/CMSIS/Include/core_cm3.h **** /* MPU Region Attribute and Size Register Definitions */
1210:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1211:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1212:Drivers/CMSIS/Include/core_cm3.h **** 
1213:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1214:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1215:Drivers/CMSIS/Include/core_cm3.h **** 
1216:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1217:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1218:Drivers/CMSIS/Include/core_cm3.h **** 
1219:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1220:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1221:Drivers/CMSIS/Include/core_cm3.h **** 
1222:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1223:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1224:Drivers/CMSIS/Include/core_cm3.h **** 
1225:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1226:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1227:Drivers/CMSIS/Include/core_cm3.h **** 
1228:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1229:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1230:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccEbWydE.s 			page 23


1231:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1232:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1233:Drivers/CMSIS/Include/core_cm3.h **** 
1234:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1235:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1236:Drivers/CMSIS/Include/core_cm3.h **** 
1237:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1238:Drivers/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1239:Drivers/CMSIS/Include/core_cm3.h **** 
1240:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_MPU */
1241:Drivers/CMSIS/Include/core_cm3.h **** #endif
1242:Drivers/CMSIS/Include/core_cm3.h **** 
1243:Drivers/CMSIS/Include/core_cm3.h **** 
1244:Drivers/CMSIS/Include/core_cm3.h **** /**
1245:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
1246:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1247:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Core Debug Registers
1248:Drivers/CMSIS/Include/core_cm3.h ****   @{
1249:Drivers/CMSIS/Include/core_cm3.h ****  */
1250:Drivers/CMSIS/Include/core_cm3.h **** 
1251:Drivers/CMSIS/Include/core_cm3.h **** /**
1252:Drivers/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1253:Drivers/CMSIS/Include/core_cm3.h ****  */
1254:Drivers/CMSIS/Include/core_cm3.h **** typedef struct
1255:Drivers/CMSIS/Include/core_cm3.h **** {
1256:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1257:Drivers/CMSIS/Include/core_cm3.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1258:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1259:Drivers/CMSIS/Include/core_cm3.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1260:Drivers/CMSIS/Include/core_cm3.h **** } CoreDebug_Type;
1261:Drivers/CMSIS/Include/core_cm3.h **** 
1262:Drivers/CMSIS/Include/core_cm3.h **** /* Debug Halting Control and Status Register Definitions */
1263:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1264:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1265:Drivers/CMSIS/Include/core_cm3.h **** 
1266:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1267:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1268:Drivers/CMSIS/Include/core_cm3.h **** 
1269:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1270:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1271:Drivers/CMSIS/Include/core_cm3.h **** 
1272:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1273:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1274:Drivers/CMSIS/Include/core_cm3.h **** 
1275:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1276:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1277:Drivers/CMSIS/Include/core_cm3.h **** 
1278:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1279:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1280:Drivers/CMSIS/Include/core_cm3.h **** 
1281:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1282:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1283:Drivers/CMSIS/Include/core_cm3.h **** 
1284:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1285:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1286:Drivers/CMSIS/Include/core_cm3.h **** 
1287:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
ARM GAS  /tmp/ccEbWydE.s 			page 24


1288:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1289:Drivers/CMSIS/Include/core_cm3.h **** 
1290:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1291:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1292:Drivers/CMSIS/Include/core_cm3.h **** 
1293:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1294:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1295:Drivers/CMSIS/Include/core_cm3.h **** 
1296:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1297:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1298:Drivers/CMSIS/Include/core_cm3.h **** 
1299:Drivers/CMSIS/Include/core_cm3.h **** /* Debug Core Register Selector Register Definitions */
1300:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1301:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1302:Drivers/CMSIS/Include/core_cm3.h **** 
1303:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1304:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1305:Drivers/CMSIS/Include/core_cm3.h **** 
1306:Drivers/CMSIS/Include/core_cm3.h **** /* Debug Exception and Monitor Control Register Definitions */
1307:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1308:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1309:Drivers/CMSIS/Include/core_cm3.h **** 
1310:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1311:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1312:Drivers/CMSIS/Include/core_cm3.h **** 
1313:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1314:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1315:Drivers/CMSIS/Include/core_cm3.h **** 
1316:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1317:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1318:Drivers/CMSIS/Include/core_cm3.h **** 
1319:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1320:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1321:Drivers/CMSIS/Include/core_cm3.h **** 
1322:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1323:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1324:Drivers/CMSIS/Include/core_cm3.h **** 
1325:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1326:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1327:Drivers/CMSIS/Include/core_cm3.h **** 
1328:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1329:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1330:Drivers/CMSIS/Include/core_cm3.h **** 
1331:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1332:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1333:Drivers/CMSIS/Include/core_cm3.h **** 
1334:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1335:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1336:Drivers/CMSIS/Include/core_cm3.h **** 
1337:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1338:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1339:Drivers/CMSIS/Include/core_cm3.h **** 
1340:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1341:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1342:Drivers/CMSIS/Include/core_cm3.h **** 
1343:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1344:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
ARM GAS  /tmp/ccEbWydE.s 			page 25


1345:Drivers/CMSIS/Include/core_cm3.h **** 
1346:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
1347:Drivers/CMSIS/Include/core_cm3.h **** 
1348:Drivers/CMSIS/Include/core_cm3.h **** 
1349:Drivers/CMSIS/Include/core_cm3.h **** /**
1350:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup    CMSIS_core_register
1351:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1352:Drivers/CMSIS/Include/core_cm3.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1353:Drivers/CMSIS/Include/core_cm3.h ****   @{
1354:Drivers/CMSIS/Include/core_cm3.h ****  */
1355:Drivers/CMSIS/Include/core_cm3.h **** 
1356:Drivers/CMSIS/Include/core_cm3.h **** /**
1357:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1358:Drivers/CMSIS/Include/core_cm3.h ****   \param[in] field  Name of the register bit field.
1359:Drivers/CMSIS/Include/core_cm3.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
1360:Drivers/CMSIS/Include/core_cm3.h ****   \return           Masked and shifted value.
1361:Drivers/CMSIS/Include/core_cm3.h **** */
1362:Drivers/CMSIS/Include/core_cm3.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
1363:Drivers/CMSIS/Include/core_cm3.h **** 
1364:Drivers/CMSIS/Include/core_cm3.h **** /**
1365:Drivers/CMSIS/Include/core_cm3.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1366:Drivers/CMSIS/Include/core_cm3.h ****   \param[in] field  Name of the register bit field.
1367:Drivers/CMSIS/Include/core_cm3.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
1368:Drivers/CMSIS/Include/core_cm3.h ****   \return           Masked and shifted bit field value.
1369:Drivers/CMSIS/Include/core_cm3.h **** */
1370:Drivers/CMSIS/Include/core_cm3.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
1371:Drivers/CMSIS/Include/core_cm3.h **** 
1372:Drivers/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_core_bitfield */
1373:Drivers/CMSIS/Include/core_cm3.h **** 
1374:Drivers/CMSIS/Include/core_cm3.h **** 
1375:Drivers/CMSIS/Include/core_cm3.h **** /**
1376:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup    CMSIS_core_register
1377:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup   CMSIS_core_base     Core Definitions
1378:Drivers/CMSIS/Include/core_cm3.h ****   \brief      Definitions for base addresses, unions, and structures.
1379:Drivers/CMSIS/Include/core_cm3.h ****   @{
1380:Drivers/CMSIS/Include/core_cm3.h ****  */
1381:Drivers/CMSIS/Include/core_cm3.h **** 
1382:Drivers/CMSIS/Include/core_cm3.h **** /* Memory mapping of Core Hardware */
1383:Drivers/CMSIS/Include/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1384:Drivers/CMSIS/Include/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1385:Drivers/CMSIS/Include/core_cm3.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1386:Drivers/CMSIS/Include/core_cm3.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1387:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1388:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1389:Drivers/CMSIS/Include/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1390:Drivers/CMSIS/Include/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1391:Drivers/CMSIS/Include/core_cm3.h **** 
1392:Drivers/CMSIS/Include/core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1393:Drivers/CMSIS/Include/core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1394:Drivers/CMSIS/Include/core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1395:Drivers/CMSIS/Include/core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1396:Drivers/CMSIS/Include/core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1397:Drivers/CMSIS/Include/core_cm3.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1398:Drivers/CMSIS/Include/core_cm3.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1399:Drivers/CMSIS/Include/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1400:Drivers/CMSIS/Include/core_cm3.h **** 
1401:Drivers/CMSIS/Include/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
ARM GAS  /tmp/ccEbWydE.s 			page 26


1402:Drivers/CMSIS/Include/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1403:Drivers/CMSIS/Include/core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1404:Drivers/CMSIS/Include/core_cm3.h **** #endif
1405:Drivers/CMSIS/Include/core_cm3.h **** 
1406:Drivers/CMSIS/Include/core_cm3.h **** /*@} */
1407:Drivers/CMSIS/Include/core_cm3.h **** 
1408:Drivers/CMSIS/Include/core_cm3.h **** 
1409:Drivers/CMSIS/Include/core_cm3.h **** 
1410:Drivers/CMSIS/Include/core_cm3.h **** /*******************************************************************************
1411:Drivers/CMSIS/Include/core_cm3.h ****  *                Hardware Abstraction Layer
1412:Drivers/CMSIS/Include/core_cm3.h ****   Core Function Interface contains:
1413:Drivers/CMSIS/Include/core_cm3.h ****   - Core NVIC Functions
1414:Drivers/CMSIS/Include/core_cm3.h ****   - Core SysTick Functions
1415:Drivers/CMSIS/Include/core_cm3.h ****   - Core Debug Functions
1416:Drivers/CMSIS/Include/core_cm3.h ****   - Core Register Access Functions
1417:Drivers/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
1418:Drivers/CMSIS/Include/core_cm3.h **** /**
1419:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1420:Drivers/CMSIS/Include/core_cm3.h **** */
1421:Drivers/CMSIS/Include/core_cm3.h **** 
1422:Drivers/CMSIS/Include/core_cm3.h **** 
1423:Drivers/CMSIS/Include/core_cm3.h **** 
1424:Drivers/CMSIS/Include/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1425:Drivers/CMSIS/Include/core_cm3.h **** /**
1426:Drivers/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_Core_FunctionInterface
1427:Drivers/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1428:Drivers/CMSIS/Include/core_cm3.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1429:Drivers/CMSIS/Include/core_cm3.h ****   @{
1430:Drivers/CMSIS/Include/core_cm3.h ****  */
1431:Drivers/CMSIS/Include/core_cm3.h **** 
1432:Drivers/CMSIS/Include/core_cm3.h **** #ifdef CMSIS_NVIC_VIRTUAL
1433:Drivers/CMSIS/Include/core_cm3.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
1434:Drivers/CMSIS/Include/core_cm3.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
1435:Drivers/CMSIS/Include/core_cm3.h ****   #endif
1436:Drivers/CMSIS/Include/core_cm3.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
1437:Drivers/CMSIS/Include/core_cm3.h **** #else
1438:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
1439:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
1440:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
1441:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
1442:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
1443:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
1444:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
1445:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
1446:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_GetActive              __NVIC_GetActive
1447:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
1448:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
1449:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
1450:Drivers/CMSIS/Include/core_cm3.h **** #endif /* CMSIS_NVIC_VIRTUAL */
1451:Drivers/CMSIS/Include/core_cm3.h **** 
1452:Drivers/CMSIS/Include/core_cm3.h **** #ifdef CMSIS_VECTAB_VIRTUAL
1453:Drivers/CMSIS/Include/core_cm3.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1454:Drivers/CMSIS/Include/core_cm3.h ****    #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
1455:Drivers/CMSIS/Include/core_cm3.h ****   #endif
1456:Drivers/CMSIS/Include/core_cm3.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1457:Drivers/CMSIS/Include/core_cm3.h **** #else
1458:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_SetVector              __NVIC_SetVector
ARM GAS  /tmp/ccEbWydE.s 			page 27


1459:Drivers/CMSIS/Include/core_cm3.h ****   #define NVIC_GetVector              __NVIC_GetVector
1460:Drivers/CMSIS/Include/core_cm3.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
1461:Drivers/CMSIS/Include/core_cm3.h **** 
1462:Drivers/CMSIS/Include/core_cm3.h **** #define NVIC_USER_IRQ_OFFSET          16
1463:Drivers/CMSIS/Include/core_cm3.h **** 
1464:Drivers/CMSIS/Include/core_cm3.h **** 
1465:Drivers/CMSIS/Include/core_cm3.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
1466:Drivers/CMSIS/Include/core_cm3.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
1467:Drivers/CMSIS/Include/core_cm3.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
1468:Drivers/CMSIS/Include/core_cm3.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
1469:Drivers/CMSIS/Include/core_cm3.h **** 
1470:Drivers/CMSIS/Include/core_cm3.h **** 
1471:Drivers/CMSIS/Include/core_cm3.h **** /**
1472:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Set Priority Grouping
1473:Drivers/CMSIS/Include/core_cm3.h ****   \details Sets the priority grouping field using the required unlock sequence.
1474:Drivers/CMSIS/Include/core_cm3.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1475:Drivers/CMSIS/Include/core_cm3.h ****            Only values from 0..7 are used.
1476:Drivers/CMSIS/Include/core_cm3.h ****            In case of a conflict between priority grouping and available
1477:Drivers/CMSIS/Include/core_cm3.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1478:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      PriorityGroup  Priority grouping field.
1479:Drivers/CMSIS/Include/core_cm3.h ****  */
1480:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1481:Drivers/CMSIS/Include/core_cm3.h **** {
1482:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t reg_value;
1483:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1484:Drivers/CMSIS/Include/core_cm3.h **** 
1485:Drivers/CMSIS/Include/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1486:Drivers/CMSIS/Include/core_cm3.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1487:Drivers/CMSIS/Include/core_cm3.h ****   reg_value  =  (reg_value                                   |
1488:Drivers/CMSIS/Include/core_cm3.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1489:Drivers/CMSIS/Include/core_cm3.h ****                 (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key a
1490:Drivers/CMSIS/Include/core_cm3.h ****   SCB->AIRCR =  reg_value;
1491:Drivers/CMSIS/Include/core_cm3.h **** }
1492:Drivers/CMSIS/Include/core_cm3.h **** 
1493:Drivers/CMSIS/Include/core_cm3.h **** 
1494:Drivers/CMSIS/Include/core_cm3.h **** /**
1495:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Get Priority Grouping
1496:Drivers/CMSIS/Include/core_cm3.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1497:Drivers/CMSIS/Include/core_cm3.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1498:Drivers/CMSIS/Include/core_cm3.h ****  */
1499:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
1500:Drivers/CMSIS/Include/core_cm3.h **** {
1501:Drivers/CMSIS/Include/core_cm3.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1502:Drivers/CMSIS/Include/core_cm3.h **** }
1503:Drivers/CMSIS/Include/core_cm3.h **** 
1504:Drivers/CMSIS/Include/core_cm3.h **** 
1505:Drivers/CMSIS/Include/core_cm3.h **** /**
1506:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Enable Interrupt
1507:Drivers/CMSIS/Include/core_cm3.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
1508:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1509:Drivers/CMSIS/Include/core_cm3.h ****   \note    IRQn must not be negative.
1510:Drivers/CMSIS/Include/core_cm3.h ****  */
1511:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
1512:Drivers/CMSIS/Include/core_cm3.h **** {
1513:Drivers/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1514:Drivers/CMSIS/Include/core_cm3.h ****   {
1515:Drivers/CMSIS/Include/core_cm3.h ****     NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
ARM GAS  /tmp/ccEbWydE.s 			page 28


1516:Drivers/CMSIS/Include/core_cm3.h ****   }
1517:Drivers/CMSIS/Include/core_cm3.h **** }
1518:Drivers/CMSIS/Include/core_cm3.h **** 
1519:Drivers/CMSIS/Include/core_cm3.h **** 
1520:Drivers/CMSIS/Include/core_cm3.h **** /**
1521:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Get Interrupt Enable status
1522:Drivers/CMSIS/Include/core_cm3.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
1523:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1524:Drivers/CMSIS/Include/core_cm3.h ****   \return             0  Interrupt is not enabled.
1525:Drivers/CMSIS/Include/core_cm3.h ****   \return             1  Interrupt is enabled.
1526:Drivers/CMSIS/Include/core_cm3.h ****   \note    IRQn must not be negative.
1527:Drivers/CMSIS/Include/core_cm3.h ****  */
1528:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
1529:Drivers/CMSIS/Include/core_cm3.h **** {
1530:Drivers/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1531:Drivers/CMSIS/Include/core_cm3.h ****   {
1532:Drivers/CMSIS/Include/core_cm3.h ****     return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1533:Drivers/CMSIS/Include/core_cm3.h ****   }
1534:Drivers/CMSIS/Include/core_cm3.h ****   else
1535:Drivers/CMSIS/Include/core_cm3.h ****   {
1536:Drivers/CMSIS/Include/core_cm3.h ****     return(0U);
1537:Drivers/CMSIS/Include/core_cm3.h ****   }
1538:Drivers/CMSIS/Include/core_cm3.h **** }
1539:Drivers/CMSIS/Include/core_cm3.h **** 
1540:Drivers/CMSIS/Include/core_cm3.h **** 
1541:Drivers/CMSIS/Include/core_cm3.h **** /**
1542:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Disable Interrupt
1543:Drivers/CMSIS/Include/core_cm3.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
1544:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1545:Drivers/CMSIS/Include/core_cm3.h ****   \note    IRQn must not be negative.
1546:Drivers/CMSIS/Include/core_cm3.h ****  */
1547:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
1548:Drivers/CMSIS/Include/core_cm3.h **** {
1549:Drivers/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1550:Drivers/CMSIS/Include/core_cm3.h ****   {
1551:Drivers/CMSIS/Include/core_cm3.h ****     NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1552:Drivers/CMSIS/Include/core_cm3.h ****     __DSB();
1553:Drivers/CMSIS/Include/core_cm3.h ****     __ISB();
1554:Drivers/CMSIS/Include/core_cm3.h ****   }
1555:Drivers/CMSIS/Include/core_cm3.h **** }
1556:Drivers/CMSIS/Include/core_cm3.h **** 
1557:Drivers/CMSIS/Include/core_cm3.h **** 
1558:Drivers/CMSIS/Include/core_cm3.h **** /**
1559:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Get Pending Interrupt
1560:Drivers/CMSIS/Include/core_cm3.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
1561:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1562:Drivers/CMSIS/Include/core_cm3.h ****   \return             0  Interrupt status is not pending.
1563:Drivers/CMSIS/Include/core_cm3.h ****   \return             1  Interrupt status is pending.
1564:Drivers/CMSIS/Include/core_cm3.h ****   \note    IRQn must not be negative.
1565:Drivers/CMSIS/Include/core_cm3.h ****  */
1566:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
1567:Drivers/CMSIS/Include/core_cm3.h **** {
1568:Drivers/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1569:Drivers/CMSIS/Include/core_cm3.h ****   {
1570:Drivers/CMSIS/Include/core_cm3.h ****     return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1571:Drivers/CMSIS/Include/core_cm3.h ****   }
1572:Drivers/CMSIS/Include/core_cm3.h ****   else
ARM GAS  /tmp/ccEbWydE.s 			page 29


1573:Drivers/CMSIS/Include/core_cm3.h ****   {
1574:Drivers/CMSIS/Include/core_cm3.h ****     return(0U);
1575:Drivers/CMSIS/Include/core_cm3.h ****   }
1576:Drivers/CMSIS/Include/core_cm3.h **** }
1577:Drivers/CMSIS/Include/core_cm3.h **** 
1578:Drivers/CMSIS/Include/core_cm3.h **** 
1579:Drivers/CMSIS/Include/core_cm3.h **** /**
1580:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Set Pending Interrupt
1581:Drivers/CMSIS/Include/core_cm3.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
1582:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1583:Drivers/CMSIS/Include/core_cm3.h ****   \note    IRQn must not be negative.
1584:Drivers/CMSIS/Include/core_cm3.h ****  */
1585:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
1586:Drivers/CMSIS/Include/core_cm3.h **** {
1587:Drivers/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1588:Drivers/CMSIS/Include/core_cm3.h ****   {
1589:Drivers/CMSIS/Include/core_cm3.h ****     NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1590:Drivers/CMSIS/Include/core_cm3.h ****   }
1591:Drivers/CMSIS/Include/core_cm3.h **** }
1592:Drivers/CMSIS/Include/core_cm3.h **** 
1593:Drivers/CMSIS/Include/core_cm3.h **** 
1594:Drivers/CMSIS/Include/core_cm3.h **** /**
1595:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Clear Pending Interrupt
1596:Drivers/CMSIS/Include/core_cm3.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
1597:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1598:Drivers/CMSIS/Include/core_cm3.h ****   \note    IRQn must not be negative.
1599:Drivers/CMSIS/Include/core_cm3.h ****  */
1600:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1601:Drivers/CMSIS/Include/core_cm3.h **** {
1602:Drivers/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1603:Drivers/CMSIS/Include/core_cm3.h ****   {
1604:Drivers/CMSIS/Include/core_cm3.h ****     NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1605:Drivers/CMSIS/Include/core_cm3.h ****   }
1606:Drivers/CMSIS/Include/core_cm3.h **** }
1607:Drivers/CMSIS/Include/core_cm3.h **** 
1608:Drivers/CMSIS/Include/core_cm3.h **** 
1609:Drivers/CMSIS/Include/core_cm3.h **** /**
1610:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Get Active Interrupt
1611:Drivers/CMSIS/Include/core_cm3.h ****   \details Reads the active register in the NVIC and returns the active bit for the device specific
1612:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1613:Drivers/CMSIS/Include/core_cm3.h ****   \return             0  Interrupt status is not active.
1614:Drivers/CMSIS/Include/core_cm3.h ****   \return             1  Interrupt status is active.
1615:Drivers/CMSIS/Include/core_cm3.h ****   \note    IRQn must not be negative.
1616:Drivers/CMSIS/Include/core_cm3.h ****  */
1617:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
1618:Drivers/CMSIS/Include/core_cm3.h **** {
1619:Drivers/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1620:Drivers/CMSIS/Include/core_cm3.h ****   {
1621:Drivers/CMSIS/Include/core_cm3.h ****     return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1622:Drivers/CMSIS/Include/core_cm3.h ****   }
1623:Drivers/CMSIS/Include/core_cm3.h ****   else
1624:Drivers/CMSIS/Include/core_cm3.h ****   {
1625:Drivers/CMSIS/Include/core_cm3.h ****     return(0U);
1626:Drivers/CMSIS/Include/core_cm3.h ****   }
1627:Drivers/CMSIS/Include/core_cm3.h **** }
1628:Drivers/CMSIS/Include/core_cm3.h **** 
1629:Drivers/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccEbWydE.s 			page 30


1630:Drivers/CMSIS/Include/core_cm3.h **** /**
1631:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Set Interrupt Priority
1632:Drivers/CMSIS/Include/core_cm3.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
1633:Drivers/CMSIS/Include/core_cm3.h ****            The interrupt number can be positive to specify a device specific interrupt,
1634:Drivers/CMSIS/Include/core_cm3.h ****            or negative to specify a processor exception.
1635:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Interrupt number.
1636:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]  priority  Priority to set.
1637:Drivers/CMSIS/Include/core_cm3.h ****   \note    The priority cannot be set for every processor exception.
1638:Drivers/CMSIS/Include/core_cm3.h ****  */
1639:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1640:Drivers/CMSIS/Include/core_cm3.h **** {
1641:Drivers/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1642:Drivers/CMSIS/Include/core_cm3.h ****   {
1643:Drivers/CMSIS/Include/core_cm3.h ****     NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (u
1644:Drivers/CMSIS/Include/core_cm3.h ****   }
1645:Drivers/CMSIS/Include/core_cm3.h ****   else
1646:Drivers/CMSIS/Include/core_cm3.h ****   {
1647:Drivers/CMSIS/Include/core_cm3.h ****     SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (u
1648:Drivers/CMSIS/Include/core_cm3.h ****   }
1649:Drivers/CMSIS/Include/core_cm3.h **** }
1650:Drivers/CMSIS/Include/core_cm3.h **** 
1651:Drivers/CMSIS/Include/core_cm3.h **** 
1652:Drivers/CMSIS/Include/core_cm3.h **** /**
1653:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Get Interrupt Priority
1654:Drivers/CMSIS/Include/core_cm3.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
1655:Drivers/CMSIS/Include/core_cm3.h ****            The interrupt number can be positive to specify a device specific interrupt,
1656:Drivers/CMSIS/Include/core_cm3.h ****            or negative to specify a processor exception.
1657:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]   IRQn  Interrupt number.
1658:Drivers/CMSIS/Include/core_cm3.h ****   \return             Interrupt Priority.
1659:Drivers/CMSIS/Include/core_cm3.h ****                       Value is aligned automatically to the implemented priority bits of the microc
1660:Drivers/CMSIS/Include/core_cm3.h ****  */
1661:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
1662:Drivers/CMSIS/Include/core_cm3.h **** {
1663:Drivers/CMSIS/Include/core_cm3.h **** 
1664:Drivers/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1665:Drivers/CMSIS/Include/core_cm3.h ****   {
1666:Drivers/CMSIS/Include/core_cm3.h ****     return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
1667:Drivers/CMSIS/Include/core_cm3.h ****   }
1668:Drivers/CMSIS/Include/core_cm3.h ****   else
1669:Drivers/CMSIS/Include/core_cm3.h ****   {
1670:Drivers/CMSIS/Include/core_cm3.h ****     return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
1671:Drivers/CMSIS/Include/core_cm3.h ****   }
1672:Drivers/CMSIS/Include/core_cm3.h **** }
1673:Drivers/CMSIS/Include/core_cm3.h **** 
1674:Drivers/CMSIS/Include/core_cm3.h **** 
1675:Drivers/CMSIS/Include/core_cm3.h **** /**
1676:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Encode Priority
1677:Drivers/CMSIS/Include/core_cm3.h ****   \details Encodes the priority for an interrupt with the given priority group,
1678:Drivers/CMSIS/Include/core_cm3.h ****            preemptive priority value, and subpriority value.
1679:Drivers/CMSIS/Include/core_cm3.h ****            In case of a conflict between priority grouping and available
1680:Drivers/CMSIS/Include/core_cm3.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1681:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]     PriorityGroup  Used priority group.
1682:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1683:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
1684:Drivers/CMSIS/Include/core_cm3.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
1685:Drivers/CMSIS/Include/core_cm3.h ****  */
1686:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
ARM GAS  /tmp/ccEbWydE.s 			page 31


1687:Drivers/CMSIS/Include/core_cm3.h **** {
1688:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1689:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t PreemptPriorityBits;
1690:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t SubPriorityBits;
1691:Drivers/CMSIS/Include/core_cm3.h **** 
1692:Drivers/CMSIS/Include/core_cm3.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1693:Drivers/CMSIS/Include/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1694:Drivers/CMSIS/Include/core_cm3.h **** 
1695:Drivers/CMSIS/Include/core_cm3.h ****   return (
1696:Drivers/CMSIS/Include/core_cm3.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
1697:Drivers/CMSIS/Include/core_cm3.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
1698:Drivers/CMSIS/Include/core_cm3.h ****          );
1699:Drivers/CMSIS/Include/core_cm3.h **** }
1700:Drivers/CMSIS/Include/core_cm3.h **** 
1701:Drivers/CMSIS/Include/core_cm3.h **** 
1702:Drivers/CMSIS/Include/core_cm3.h **** /**
1703:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Decode Priority
1704:Drivers/CMSIS/Include/core_cm3.h ****   \details Decodes an interrupt priority value with a given priority group to
1705:Drivers/CMSIS/Include/core_cm3.h ****            preemptive priority value and subpriority value.
1706:Drivers/CMSIS/Include/core_cm3.h ****            In case of a conflict between priority grouping and available
1707:Drivers/CMSIS/Include/core_cm3.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1708:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
1709:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]     PriorityGroup  Used priority group.
1710:Drivers/CMSIS/Include/core_cm3.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
1711:Drivers/CMSIS/Include/core_cm3.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
1712:Drivers/CMSIS/Include/core_cm3.h ****  */
1713:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
1714:Drivers/CMSIS/Include/core_cm3.h **** {
1715:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1716:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t PreemptPriorityBits;
1717:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t SubPriorityBits;
1718:Drivers/CMSIS/Include/core_cm3.h **** 
1719:Drivers/CMSIS/Include/core_cm3.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1720:Drivers/CMSIS/Include/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1721:Drivers/CMSIS/Include/core_cm3.h **** 
1722:Drivers/CMSIS/Include/core_cm3.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
1723:Drivers/CMSIS/Include/core_cm3.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
1724:Drivers/CMSIS/Include/core_cm3.h **** }
1725:Drivers/CMSIS/Include/core_cm3.h **** 
1726:Drivers/CMSIS/Include/core_cm3.h **** 
1727:Drivers/CMSIS/Include/core_cm3.h **** /**
1728:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Set Interrupt Vector
1729:Drivers/CMSIS/Include/core_cm3.h ****   \details Sets an interrupt vector in SRAM based interrupt vector table.
1730:Drivers/CMSIS/Include/core_cm3.h ****            The interrupt number can be positive to specify a device specific interrupt,
1731:Drivers/CMSIS/Include/core_cm3.h ****            or negative to specify a processor exception.
1732:Drivers/CMSIS/Include/core_cm3.h ****            VTOR must been relocated to SRAM before.
1733:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]   IRQn      Interrupt number
1734:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]   vector    Address of interrupt handler function
1735:Drivers/CMSIS/Include/core_cm3.h ****  */
1736:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
1737:Drivers/CMSIS/Include/core_cm3.h **** {
1738:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
1739:Drivers/CMSIS/Include/core_cm3.h ****   vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
1740:Drivers/CMSIS/Include/core_cm3.h **** }
1741:Drivers/CMSIS/Include/core_cm3.h **** 
1742:Drivers/CMSIS/Include/core_cm3.h **** 
1743:Drivers/CMSIS/Include/core_cm3.h **** /**
ARM GAS  /tmp/ccEbWydE.s 			page 32


1744:Drivers/CMSIS/Include/core_cm3.h ****   \brief   Get Interrupt Vector
1745:Drivers/CMSIS/Include/core_cm3.h ****   \details Reads an interrupt vector from interrupt vector table.
1746:Drivers/CMSIS/Include/core_cm3.h ****            The interrupt number can be positive to specify a device specific interrupt,
1747:Drivers/CMSIS/Include/core_cm3.h ****            or negative to specify a processor exception.
1748:Drivers/CMSIS/Include/core_cm3.h ****   \param [in]   IRQn      Interrupt number.
1749:Drivers/CMSIS/Include/core_cm3.h ****   \return                 Address of interrupt handler function
1750:Drivers/CMSIS/Include/core_cm3.h ****  */
1751:Drivers/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
1752:Drivers/CMSIS/Include/core_cm3.h **** {
1753:Drivers/CMSIS/Include/core_cm3.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
1754:Drivers/CMSIS/Include/core_cm3.h ****   return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
1755:Drivers/CMSIS/Include/core_cm3.h **** }
1756:Drivers/CMSIS/Include/core_cm3.h **** 
1757:Drivers/CMSIS/Include/core_cm3.h **** 
1758:Drivers/CMSIS/Include/core_cm3.h **** /**
1759:Drivers/CMSIS/Include/core_cm3.h ****   \brief   System Reset
1760:Drivers/CMSIS/Include/core_cm3.h ****   \details Initiates a system reset request to reset the MCU.
1761:Drivers/CMSIS/Include/core_cm3.h ****  */
1762:Drivers/CMSIS/Include/core_cm3.h **** __NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
1763:Drivers/CMSIS/Include/core_cm3.h **** {
  26              		.loc 1 1763 1
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 00AF     		add	r7, sp, #0
  36              	.LCFI1:
  37              		.cfi_def_cfa_register 7
  38              	.LBB6:
  39              	.LBB7:
  40              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
ARM GAS  /tmp/ccEbWydE.s 			page 33


  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
ARM GAS  /tmp/ccEbWydE.s 			page 34


  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
ARM GAS  /tmp/ccEbWydE.s 			page 35


 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
ARM GAS  /tmp/ccEbWydE.s 			page 36


 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccEbWydE.s 			page 37


 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccEbWydE.s 			page 38


 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccEbWydE.s 			page 39


 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
ARM GAS  /tmp/ccEbWydE.s 			page 40


 422:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccEbWydE.s 			page 41


 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccEbWydE.s 			page 42


 536:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
ARM GAS  /tmp/ccEbWydE.s 			page 43


 593:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
ARM GAS  /tmp/ccEbWydE.s 			page 44


 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
ARM GAS  /tmp/ccEbWydE.s 			page 45


 707:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
ARM GAS  /tmp/ccEbWydE.s 			page 46


 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
ARM GAS  /tmp/ccEbWydE.s 			page 47


 821:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
ARM GAS  /tmp/ccEbWydE.s 			page 48


 878:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
  41              		.loc 2 879 3
  42              		.syntax unified
  43              	@ 879 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  44 0004 BFF34F8F 		dsb 0xF
  45              	@ 0 "" 2
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  46              		.loc 2 880 1
  47              		.thumb
  48              		.syntax unified
  49 0008 00BF     		nop
  50              	.LBE7:
  51              	.LBE6:
1764:Drivers/CMSIS/Include/core_cm3.h ****   __DSB();                                                          /* Ensure all outstanding memor
1765:Drivers/CMSIS/Include/core_cm3.h ****                                                                        buffered write are completed
1766:Drivers/CMSIS/Include/core_cm3.h ****   SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
1767:Drivers/CMSIS/Include/core_cm3.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
  52              		.loc 1 1767 32
  53 000a 064B     		ldr	r3, .L3
  54 000c DB68     		ldr	r3, [r3, #12]
  55              		.loc 1 1767 40
  56 000e 03F4E062 		and	r2, r3, #1792
1766:Drivers/CMSIS/Include/core_cm3.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
  57              		.loc 1 1766 6
  58 0012 0449     		ldr	r1, .L3
1766:Drivers/CMSIS/Include/core_cm3.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
  59              		.loc 1 1766 17
  60 0014 044B     		ldr	r3, .L3+4
  61 0016 1343     		orrs	r3, r3, r2
1766:Drivers/CMSIS/Include/core_cm3.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
  62              		.loc 1 1766 15
  63 0018 CB60     		str	r3, [r1, #12]
  64              	.LBB8:
  65              	.LBB9:
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  66              		.loc 2 879 3
  67              		.syntax unified
  68              	@ 879 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  69 001a BFF34F8F 		dsb 0xF
  70              	@ 0 "" 2
  71              		.loc 2 880 1
  72              		.thumb
  73              		.syntax unified
  74 001e 00BF     		nop
  75              	.L2:
  76              	.LBE9:
  77              	.LBE8:
1768:Drivers/CMSIS/Include/core_cm3.h ****                             SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchange
1769:Drivers/CMSIS/Include/core_cm3.h ****   __DSB();                                                          /* Ensure completion of memory 
1770:Drivers/CMSIS/Include/core_cm3.h **** 
1771:Drivers/CMSIS/Include/core_cm3.h ****   for(;;)                                                           /* wait until reset */
1772:Drivers/CMSIS/Include/core_cm3.h ****   {
1773:Drivers/CMSIS/Include/core_cm3.h ****     __NOP();
  78              		.loc 1 1773 5 discriminator 1
  79              		.syntax unified
  80              	@ 1773 "Drivers/CMSIS/Include/core_cm3.h" 1
ARM GAS  /tmp/ccEbWydE.s 			page 49


  81 0020 00BF     		nop
  82              	@ 0 "" 2
  83              		.thumb
  84              		.syntax unified
  85 0022 FDE7     		b	.L2
  86              	.L4:
  87              		.align	2
  88              	.L3:
  89 0024 00ED00E0 		.word	-536810240
  90 0028 0400FA05 		.word	100270084
  91              		.cfi_endproc
  92              	.LFE59:
  94              		.comm	huart3,64,4
  95              		.section	.bss.ui8_rx_buffer,"aw",%nobits
  96              		.align	2
  99              	ui8_rx_buffer:
 100 0000 00000000 		.space	132
 100      00000000 
 100      00000000 
 100      00000000 
 100      00000000 
 101              		.section	.bss.ui8_dashboardmessage,"aw",%nobits
 102              		.align	2
 105              	ui8_dashboardmessage:
 106 0000 00000000 		.space	132
 106      00000000 
 106      00000000 
 106      00000000 
 106      00000000 
 107              		.section	.bss.enc,"aw",%nobits
 108              		.align	2
 111              	enc:
 112 0000 00000000 		.space	128
 112      00000000 
 112      00000000 
 112      00000000 
 112      00000000 
 113              		.section	.bss.buffer,"aw",%nobits
 114              		.align	2
 117              	buffer:
 118 0000 00000000 		.space	64
 118      00000000 
 118      00000000 
 118      00000000 
 118      00000000 
 119              		.section	.bss.ui8_tx_buffer,"aw",%nobits
 120              		.align	2
 123              	ui8_tx_buffer:
 124 0000 00000000 		.space	96
 124      00000000 
 124      00000000 
 124      00000000 
 124      00000000 
 125              		.section	.data.ui8_oldpointerposition,"aw"
 128              	ui8_oldpointerposition:
 129 0000 40       		.byte	64
 130              		.section	.bss.ui8_recentpointerposition,"aw",%nobits
ARM GAS  /tmp/ccEbWydE.s 			page 50


 133              	ui8_recentpointerposition:
 134 0000 00       		.space	1
 135              		.section	.data.ui8_messagestartpos,"aw"
 138              	ui8_messagestartpos:
 139 0000 FF       		.byte	-1
 140              		.section	.bss.ui8_messagelength,"aw",%nobits
 143              	ui8_messagelength:
 144 0000 00       		.space	1
 145              		.section	.bss.ui8_state,"aw",%nobits
 148              	ui8_state:
 149 0000 00       		.space	1
 150              		.section	.bss.ui32_timeoutcounter,"aw",%nobits
 151              		.align	2
 154              	ui32_timeoutcounter:
 155 0000 00000000 		.space	4
 156              		.section	.bss.ui16_update_size,"aw",%nobits
 157              		.align	1
 160              	ui16_update_size:
 161 0000 0000     		.space	2
 162              		.section	.data.flashstartaddress,"aw"
 163              		.align	2
 166              	flashstartaddress:
 167 0000 00840008 		.word	134251520
 168              		.section	.data.updateflagaddress,"aw"
 169              		.align	2
 172              	updateflagaddress:
 173 0000 00FC0008 		.word	134282240
 174              		.section	.data.sysinfoaddress,"aw"
 175              		.align	2
 178              	sysinfoaddress:
 179 0000 00F80008 		.word	134281216
 180              		.section	.data.proc_ID_address,"aw"
 181              		.align	2
 184              	proc_ID_address:
 185 0000 E8F7FF1F 		.word	536868840
 186              		.global	sys_info
 187              		.section	.data.sys_info,"aw"
 188              		.align	2
 191              	sys_info:
 192 0000 5C51EE07 		.ascii	"\\Q\356\007\000\000\000\000\000\000\000\000\000\000"
 192      00000000 
 192      00000000 
 192      0000
 193 000e 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 193      00000000 
 193      00000000 
 193      00
 194 001b 08000800 		.ascii	"\010\000\010\000\01013678/001100290000004\001\000\000"
 194      08313336 
 194      37382F30 
 194      30313130 
 194      30323930 
 195 0038 00000008 		.ascii	"\000\000\000\010\000\000\000\000\000\000\000\000\000"
 195      00000000 
 195      00000000 
 195      00
 196 0045 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
ARM GAS  /tmp/ccEbWydE.s 			page 51


 196      00000000 
 196      00000000 
 196      00
 197 0052 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 197      00000000 
 197      00000000 
 197      00
 198 005f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 198      00000000 
 198      00000000 
 198      00
 199 006c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 199      00000000 
 199      00000000 
 199      00
 200 0079 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 200      00000000 
 200      00000000 
 200      00
 201 0086 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 201      00000000 
 201      00000000 
 201      00
 202 0093 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 202      00000000 
 202      00000000 
 202      00
 203 00a0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 203      00000000 
 203      00000000 
 203      00
 204 00ad 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 204      00000000 
 204      00000000 
 204      00
 205 00ba 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 205      00000000 
 205      00000000 
 205      00
 206 00c7 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 206      00000000 
 206      00000000 
 206      00
 207 00d4 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 207      00000000 
 207      00000000 
 207      00
 208 00e1 00000000 		.ascii	"\000\000\000\000\000 N\020'\000\000\000\000\000\000"
 208      00204E10 
 208      27000000 
 208      000000
 209 00f0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 209      00000000 
 209      00000000 
 209      00
 210 00fd 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 210      00000000 
ARM GAS  /tmp/ccEbWydE.s 			page 52


 210      00000000 
 210      00
 211 010a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 211      00000000 
 211      00000000 
 211      00
 212 0117 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 212      00000000 
 212      00000000 
 212      00
 213 0124 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 213      00000000 
 213      00000000 
 213      00
 214 0131 00000000 		.ascii	"\000\000\000\000\000\001\000\000\000\000\000\000\000"
 214      00010000 
 214      00000000 
 214      00
 215 013e 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 215      00000000 
 215      00000000 
 215      00
 216 014b 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 216      00000000 
 216      00000000 
 216      00
 217 0158 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 217      00000000 
 217      00000000 
 217      00
 218 0165 08000000 		.ascii	"\010\000\000\000\000\000\000\000\000\000\000\000\000"
 218      00000000 
 218      00000000 
 218      00
 219 0172 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 219      00000000 
 219      00000000 
 219      00
 220 017f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 220      00000000 
 220      00000000 
 220      00
 221 018c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 221      00000000 
 221      00000000 
 221      00
 222 0199 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 222      00000000 
 222      00000000 
 222      00
 223 01a6 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 223      00000000 
 223      00000000 
 223      00
 224 01b3 0050FF70 		.ascii	"\000P\377p\006\203gQV0D\011g\000\000\000\000\000\000"
 224      06836751 
 224      56304409 
ARM GAS  /tmp/ccEbWydE.s 			page 53


 224      67000000 
 224      000000
 225 01c6 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 225      00000000 
 225      00000000 
 225      00
 226 01d3 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 226      00000000 
 226      00000000 
 226      00
 227 01e0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 227      00000000 
 227      00000000 
 227      00
 228 01ed 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 228      00000000 
 228      00000000 
 228      00
 229 01fa 00000000 		.ascii	"\000\000\000\000\000\000"
 229      0000
 230              		.comm	target,4,4
 231              		.comm	source,4,4
 232              		.section	.bss.ui8_target_offset,"aw",%nobits
 235              	ui8_target_offset:
 236 0000 00       		.space	1
 237              		.section	.bss.ui8_source_offset,"aw",%nobits
 240              	ui8_source_offset:
 241 0000 00       		.space	1
 242              		.comm	MT,416,4
 243              		.comm	msg65,1,1
 244              		.comm	msg64,1,1
 245              		.comm	gen_msg,1,1
 246              		.section	.rodata
 247              		.align	2
 248              	.LC0:
 249 0000 45426943 		.ascii	"EBiCS_0.4\000"
 249      535F302E 
 249      3400
 250              		.section	.text.M365Dashboard_init,"ax",%progbits
 251              		.align	1
 252              		.global	M365Dashboard_init
 253              		.syntax unified
 254              		.thumb
 255              		.thumb_func
 256              		.fpu softvfp
 258              	M365Dashboard_init:
 259              	.LFB120:
 260              		.file 3 "Core/Src/M365_Dashboard.c"
   1:Core/Src/M365_Dashboard.c **** /*
   2:Core/Src/M365_Dashboard.c ****  * M365_Dashboard.c
   3:Core/Src/M365_Dashboard.c ****  *
   4:Core/Src/M365_Dashboard.c ****  *  Created on: Nov 27, 2021
   5:Core/Src/M365_Dashboard.c ****  *      Author: stancecoke
   6:Core/Src/M365_Dashboard.c ****  */
   7:Core/Src/M365_Dashboard.c **** 
   8:Core/Src/M365_Dashboard.c **** 
   9:Core/Src/M365_Dashboard.c **** #include "main.h"
ARM GAS  /tmp/ccEbWydE.s 			page 54


  10:Core/Src/M365_Dashboard.c **** #include "config.h"
  11:Core/Src/M365_Dashboard.c **** #include "stm32f1xx_hal.h"
  12:Core/Src/M365_Dashboard.c **** #include "print.h"
  13:Core/Src/M365_Dashboard.c **** #include "M365_Dashboard.h"
  14:Core/Src/M365_Dashboard.c **** #include "M365_memory_table.h"
  15:Core/Src/M365_Dashboard.c **** #include "decr_and_flash.h"
  16:Core/Src/M365_Dashboard.c **** #include "stm32f1xx_hal_flash.h"
  17:Core/Src/M365_Dashboard.c **** enum { STATE_LOST, STATE_START_DETECTED, STATE_LENGTH_DETECTED };
  18:Core/Src/M365_Dashboard.c **** 
  19:Core/Src/M365_Dashboard.c **** UART_HandleTypeDef huart3;
  20:Core/Src/M365_Dashboard.c **** static uint8_t ui8_rx_buffer[132];
  21:Core/Src/M365_Dashboard.c **** static uint8_t ui8_dashboardmessage[132];
  22:Core/Src/M365_Dashboard.c **** static uint8_t enc[128];
  23:Core/Src/M365_Dashboard.c **** static char buffer[64];
  24:Core/Src/M365_Dashboard.c **** static uint8_t	ui8_tx_buffer[96];// = {0x55, 0xAA, 0x08, 0x21, 0x64, 0x00, 0x01, 0xF0, 0x00, 0x00, 
  25:Core/Src/M365_Dashboard.c **** static uint8_t ui8_oldpointerposition=64;
  26:Core/Src/M365_Dashboard.c **** static uint8_t ui8_recentpointerposition=0;
  27:Core/Src/M365_Dashboard.c **** static uint8_t ui8_messagestartpos=255;
  28:Core/Src/M365_Dashboard.c **** static uint8_t ui8_messagelength=0;
  29:Core/Src/M365_Dashboard.c **** static uint8_t ui8_state= STATE_LOST;
  30:Core/Src/M365_Dashboard.c **** static uint32_t ui32_timeoutcounter=0;
  31:Core/Src/M365_Dashboard.c **** static uint16_t ui16_update_size=0;
  32:Core/Src/M365_Dashboard.c **** static uint32_t flashstartaddress = 0x08008400;
  33:Core/Src/M365_Dashboard.c **** static uint32_t updateflagaddress = 0x0800FC00;
  34:Core/Src/M365_Dashboard.c **** static uint32_t sysinfoaddress = 0x0800F800;
  35:Core/Src/M365_Dashboard.c **** static uint32_t proc_ID_address = 0x1FFFF7E8;
  36:Core/Src/M365_Dashboard.c **** char sys_info[512] = {
  37:Core/Src/M365_Dashboard.c **** 		0x5C,0x51,0xEE,0x7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x
  38:Core/Src/M365_Dashboard.c **** };
  39:Core/Src/M365_Dashboard.c **** 
  40:Core/Src/M365_Dashboard.c **** char *target;
  41:Core/Src/M365_Dashboard.c **** char *source;
  42:Core/Src/M365_Dashboard.c **** static uint8_t ui8_target_offset;
  43:Core/Src/M365_Dashboard.c **** static uint8_t ui8_source_offset;
  44:Core/Src/M365_Dashboard.c **** 
  45:Core/Src/M365_Dashboard.c **** 
  46:Core/Src/M365_Dashboard.c **** M365_menory_table_t MT;
  47:Core/Src/M365_Dashboard.c **** 
  48:Core/Src/M365_Dashboard.c **** enum bytesOfMessage65 {
  49:Core/Src/M365_Dashboard.c **** 	Throttle = 7,
  50:Core/Src/M365_Dashboard.c **** 	Brake = 8,
  51:Core/Src/M365_Dashboard.c **** } msg65;
  52:Core/Src/M365_Dashboard.c **** 
  53:Core/Src/M365_Dashboard.c **** enum bytesOfMessage64 {
  54:Core/Src/M365_Dashboard.c **** 	Speed = 10,
  55:Core/Src/M365_Dashboard.c **** 	Mode = 6,
  56:Core/Src/M365_Dashboard.c **** 	SOC = 7,
  57:Core/Src/M365_Dashboard.c **** 	Light = 8,
  58:Core/Src/M365_Dashboard.c **** 	Beep = 9,
  59:Core/Src/M365_Dashboard.c ****   errorcode = 11
  60:Core/Src/M365_Dashboard.c **** } msg64;
  61:Core/Src/M365_Dashboard.c **** 
  62:Core/Src/M365_Dashboard.c **** enum bytesOfGeneralMessage {
  63:Core/Src/M365_Dashboard.c **** 	msglength = 2,
  64:Core/Src/M365_Dashboard.c **** 	receiver = 3,
  65:Core/Src/M365_Dashboard.c **** 	command = 4,
  66:Core/Src/M365_Dashboard.c **** 	startAddress = 5,
ARM GAS  /tmp/ccEbWydE.s 			page 55


  67:Core/Src/M365_Dashboard.c **** 	payloadLength = 6
  68:Core/Src/M365_Dashboard.c **** } gen_msg;
  69:Core/Src/M365_Dashboard.c **** 
  70:Core/Src/M365_Dashboard.c **** 
  71:Core/Src/M365_Dashboard.c **** void M365Dashboard_init(UART_HandleTypeDef huart1) {
 261              		.loc 3 71 52
 262              		.cfi_startproc
 263              		@ args = 64, pretend = 16, frame = 32
 264              		@ frame_needed = 1, uses_anonymous_args = 0
 265 0000 84B0     		sub	sp, sp, #16
 266              	.LCFI2:
 267              		.cfi_def_cfa_offset 16
 268 0002 80B5     		push	{r7, lr}
 269              	.LCFI3:
 270              		.cfi_def_cfa_offset 24
 271              		.cfi_offset 7, -24
 272              		.cfi_offset 14, -20
 273 0004 88B0     		sub	sp, sp, #32
 274              	.LCFI4:
 275              		.cfi_def_cfa_offset 56
 276 0006 00AF     		add	r7, sp, #0
 277              	.LCFI5:
 278              		.cfi_def_cfa_register 7
 279 0008 07F1280C 		add	ip, r7, #40
 280 000c 8CE80F00 		stm	ip, {r0, r1, r2, r3}
  72:Core/Src/M365_Dashboard.c **** //        CLEAR_BIT(huart3.Instance->CR3, USART_CR3_EIE);
  73:Core/Src/M365_Dashboard.c **** 	if (HAL_UART_Receive_DMA(&huart1, (uint8_t*) ui8_rx_buffer, sizeof(ui8_rx_buffer)) != HAL_OK) {
 281              		.loc 3 73 6
 282 0010 8422     		movs	r2, #132
 283 0012 5749     		ldr	r1, .L14
 284 0014 07F12800 		add	r0, r7, #40
 285 0018 FFF7FEFF 		bl	HAL_UART_Receive_DMA
 286 001c 0346     		mov	r3, r0
 287              		.loc 3 73 5
 288 001e 002B     		cmp	r3, #0
 289 0020 01D0     		beq	.L6
  74:Core/Src/M365_Dashboard.c **** 		Error_Handler();
 290              		.loc 3 74 3
 291 0022 FFF7FEFF 		bl	Error_Handler
 292              	.L6:
  75:Core/Src/M365_Dashboard.c **** 	}
  76:Core/Src/M365_Dashboard.c **** 	ui8_tx_buffer[0] = 0x55;
 293              		.loc 3 76 19
 294 0026 534B     		ldr	r3, .L14+4
 295 0028 5522     		movs	r2, #85
 296 002a 1A70     		strb	r2, [r3]
  77:Core/Src/M365_Dashboard.c **** 	ui8_tx_buffer[1] = 0xAA;
 297              		.loc 3 77 19
 298 002c 514B     		ldr	r3, .L14+4
 299 002e AA22     		movs	r2, #170
 300 0030 5A70     		strb	r2, [r3, #1]
  78:Core/Src/M365_Dashboard.c **** 	MT.ESC_version = 0x0222;
 301              		.loc 3 78 17
 302 0032 514B     		ldr	r3, .L14+8
 303 0034 0022     		movs	r2, #0
 304 0036 42F02202 		orr	r2, r2, #34
 305 003a 83F83420 		strb	r2, [r3, #52]
ARM GAS  /tmp/ccEbWydE.s 			page 56


 306 003e 0022     		movs	r2, #0
 307 0040 42F00202 		orr	r2, r2, #2
 308 0044 83F83520 		strb	r2, [r3, #53]
  79:Core/Src/M365_Dashboard.c **** 	MT.internal_battery_version = 0x0289;
 309              		.loc 3 79 30
 310 0048 4B4B     		ldr	r3, .L14+8
 311 004a 0022     		movs	r2, #0
 312 004c 62F07602 		orn	r2, r2, #118
 313 0050 83F8CE20 		strb	r2, [r3, #206]
 314 0054 0022     		movs	r2, #0
 315 0056 42F00202 		orr	r2, r2, #2
 316 005a 83F8CF20 		strb	r2, [r3, #207]
  80:Core/Src/M365_Dashboard.c **** 	MT.total_riding_time[0]=0xFFFF;
 317              		.loc 3 80 25
 318 005e 464B     		ldr	r3, .L14+8
 319 0060 4FF0FF32 		mov	r2, #-1
 320 0064 83F86820 		strb	r2, [r3, #104]
 321 0068 4FF0FF32 		mov	r2, #-1
 322 006c 83F86920 		strb	r2, [r3, #105]
  81:Core/Src/M365_Dashboard.c **** 	strcpy(MT.scooter_serial, "EBiCS_0.4");
 323              		.loc 3 81 2
 324 0070 424A     		ldr	r2, .L14+12
 325 0072 434B     		ldr	r3, .L14+16
 326 0074 03CB     		ldmia	r3!, {r0, r1}
 327 0076 1060     		str	r0, [r2]	@ unaligned
 328 0078 5160     		str	r1, [r2, #4]	@ unaligned
 329 007a 1B88     		ldrh	r3, [r3]	@ unaligned
 330 007c 1381     		strh	r3, [r2, #8]	@ unaligned
  82:Core/Src/M365_Dashboard.c **** 	MT.ESC_status_2= 0x0800;
 331              		.loc 3 82 17
 332 007e 3E4B     		ldr	r3, .L14+8
 333 0080 0022     		movs	r2, #0
 334 0082 83F86421 		strb	r2, [r3, #356]
 335 0086 0022     		movs	r2, #0
 336 0088 42F00802 		orr	r2, r2, #8
 337 008c 83F86521 		strb	r2, [r3, #357]
  83:Core/Src/M365_Dashboard.c **** 	char *IDp = (char *)proc_ID_address;
 338              		.loc 3 83 14
 339 0090 3C4B     		ldr	r3, .L14+20
 340 0092 1B68     		ldr	r3, [r3]
 341              		.loc 3 83 8
 342 0094 BB61     		str	r3, [r7, #24]
  84:Core/Src/M365_Dashboard.c **** 	char *IDs = ((char *)sysinfoaddress)+436;
 343              		.loc 3 84 38
 344 0096 3C4B     		ldr	r3, .L14+24
 345 0098 1B68     		ldr	r3, [r3]
 346 009a 03F5DA73 		add	r3, r3, #436
 347              		.loc 3 84 8
 348 009e 7B61     		str	r3, [r7, #20]
  85:Core/Src/M365_Dashboard.c **** 	if(*IDp!=*IDs){
 349              		.loc 3 85 5
 350 00a0 BB69     		ldr	r3, [r7, #24]
 351 00a2 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 352              		.loc 3 85 11
 353 00a4 7B69     		ldr	r3, [r7, #20]
 354 00a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 355              		.loc 3 85 4
ARM GAS  /tmp/ccEbWydE.s 			page 57


 356 00a8 9A42     		cmp	r2, r3
 357 00aa 59D0     		beq	.L13
 358              	.LBB10:
  86:Core/Src/M365_Dashboard.c **** 		HAL_FLASH_Unlock();
 359              		.loc 3 86 3
 360 00ac FFF7FEFF 		bl	HAL_FLASH_Unlock
  87:Core/Src/M365_Dashboard.c **** 
  88:Core/Src/M365_Dashboard.c **** 					uint32_t PAGEError = 0;
 361              		.loc 3 88 15
 362 00b0 0023     		movs	r3, #0
 363 00b2 BB60     		str	r3, [r7, #8]
  89:Core/Src/M365_Dashboard.c **** 					/*Variable used for Erase procedure*/
  90:Core/Src/M365_Dashboard.c **** 					static FLASH_EraseInitTypeDef EraseInitStruct;
  91:Core/Src/M365_Dashboard.c **** 					 /* Erase the user Flash area
  92:Core/Src/M365_Dashboard.c **** 					    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/
  93:Core/Src/M365_Dashboard.c **** 					  //write sysinfo
  94:Core/Src/M365_Dashboard.c **** 					  EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 364              		.loc 3 94 36
 365 00b4 354B     		ldr	r3, .L14+28
 366 00b6 0022     		movs	r2, #0
 367 00b8 1A60     		str	r2, [r3]
  95:Core/Src/M365_Dashboard.c **** 					  EraseInitStruct.PageAddress = sysinfoaddress;
 368              		.loc 3 95 36
 369 00ba 334B     		ldr	r3, .L14+24
 370 00bc 1B68     		ldr	r3, [r3]
 371 00be 334A     		ldr	r2, .L14+28
 372 00c0 9360     		str	r3, [r2, #8]
  96:Core/Src/M365_Dashboard.c **** 					  EraseInitStruct.NbPages     = 1;
 373              		.loc 3 96 36
 374 00c2 324B     		ldr	r3, .L14+28
 375 00c4 0122     		movs	r2, #1
 376 00c6 DA60     		str	r2, [r3, #12]
  97:Core/Src/M365_Dashboard.c **** 
  98:Core/Src/M365_Dashboard.c **** 					  if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 377              		.loc 3 98 12
 378 00c8 07F10803 		add	r3, r7, #8
 379 00cc 1946     		mov	r1, r3
 380 00ce 2F48     		ldr	r0, .L14+28
 381 00d0 FFF7FEFF 		bl	HAL_FLASHEx_Erase
 382 00d4 0346     		mov	r3, r0
 383              		.loc 3 98 11
 384 00d6 002B     		cmp	r3, #0
 385 00d8 00D0     		beq	.L8
 386              	.L9:
  99:Core/Src/M365_Dashboard.c **** 					  {
 100:Core/Src/M365_Dashboard.c **** 					    /*
 101:Core/Src/M365_Dashboard.c **** 					      Error occurred while page erase.
 102:Core/Src/M365_Dashboard.c **** 					      User can add here some code to deal with this error.
 103:Core/Src/M365_Dashboard.c **** 					      PAGEError will contain the faulty page and then to know the code error on this page,
 104:Core/Src/M365_Dashboard.c **** 					      user can call function 'HAL_FLASH_GetError()'
 105:Core/Src/M365_Dashboard.c **** 					    */
 106:Core/Src/M365_Dashboard.c **** 					    /* Infinite loop */
 107:Core/Src/M365_Dashboard.c **** 					    while (1)
 387              		.loc 3 107 16 discriminator 1
 388 00da FEE7     		b	.L9
 389              	.L8:
 108:Core/Src/M365_Dashboard.c **** 					    {
ARM GAS  /tmp/ccEbWydE.s 			page 58


 109:Core/Src/M365_Dashboard.c **** 					      /* Make LED2 blink (100ms on, 2s off) to indicate error in Erase operation */
 110:Core/Src/M365_Dashboard.c **** 
 111:Core/Src/M365_Dashboard.c **** 					    }
 112:Core/Src/M365_Dashboard.c **** 					  }
 113:Core/Src/M365_Dashboard.c **** 					    uint32_t data;
 114:Core/Src/M365_Dashboard.c **** 					    //write processor ID
 115:Core/Src/M365_Dashboard.c **** 					    char *source = (char *)proc_ID_address;
 390              		.loc 3 115 25
 391 00dc 294B     		ldr	r3, .L14+20
 392 00de 1B68     		ldr	r3, [r3]
 393              		.loc 3 115 16
 394 00e0 3B61     		str	r3, [r7, #16]
 116:Core/Src/M365_Dashboard.c **** 					    char *target = (char *)&sys_info;
 395              		.loc 3 116 16
 396 00e2 2B4B     		ldr	r3, .L14+32
 397 00e4 FB60     		str	r3, [r7, #12]
 117:Core/Src/M365_Dashboard.c **** 					    memcpy(target+436,source,12); //https://electro.club/post/48886
 398              		.loc 3 117 23
 399 00e6 FB68     		ldr	r3, [r7, #12]
 400 00e8 03F5DA73 		add	r3, r3, #436
 401              		.loc 3 117 10
 402 00ec 0C22     		movs	r2, #12
 403 00ee 3969     		ldr	r1, [r7, #16]
 404 00f0 1846     		mov	r0, r3
 405 00f2 FFF7FEFF 		bl	memcpy
 118:Core/Src/M365_Dashboard.c **** 					    //write Scooter serial number
 119:Core/Src/M365_Dashboard.c **** 					    source = (char *)&MT.scooter_serial;
 406              		.loc 3 119 17
 407 00f6 214B     		ldr	r3, .L14+12
 408 00f8 3B61     		str	r3, [r7, #16]
 120:Core/Src/M365_Dashboard.c **** 					    memcpy(target+32,source,14);
 409              		.loc 3 120 23
 410 00fa FB68     		ldr	r3, [r7, #12]
 411 00fc 2033     		adds	r3, r3, #32
 412              		.loc 3 120 10
 413 00fe 0E22     		movs	r2, #14
 414 0100 3969     		ldr	r1, [r7, #16]
 415 0102 1846     		mov	r0, r3
 416 0104 FFF7FEFF 		bl	memcpy
 121:Core/Src/M365_Dashboard.c **** 
 122:Core/Src/M365_Dashboard.c **** 						source = (char *)&sys_info;
 417              		.loc 3 122 14
 418 0108 214B     		ldr	r3, .L14+32
 419 010a 3B61     		str	r3, [r7, #16]
 123:Core/Src/M365_Dashboard.c **** 					    target = (char *)&data;
 420              		.loc 3 123 17
 421 010c 3B1D     		adds	r3, r7, #4
 422 010e FB60     		str	r3, [r7, #12]
 423              	.LBB11:
 124:Core/Src/M365_Dashboard.c **** 
 125:Core/Src/M365_Dashboard.c **** 					    for(int i =0 ; i<512; i+=4){
 424              		.loc 3 125 18
 425 0110 0023     		movs	r3, #0
 426 0112 FB61     		str	r3, [r7, #28]
 427              		.loc 3 125 10
 428 0114 1EE0     		b	.L10
 429              	.L12:
ARM GAS  /tmp/ccEbWydE.s 			page 59


 126:Core/Src/M365_Dashboard.c **** 							memcpy(target,source+i,4);
 430              		.loc 3 126 8
 431 0116 FB69     		ldr	r3, [r7, #28]
 432              		.loc 3 126 28
 433 0118 3A69     		ldr	r2, [r7, #16]
 434 011a 1344     		add	r3, r3, r2
 435 011c 1B68     		ldr	r3, [r3]	@ unaligned
 436 011e 1A46     		mov	r2, r3
 437              		.loc 3 126 8
 438 0120 FB68     		ldr	r3, [r7, #12]
 439 0122 1A60     		str	r2, [r3]	@ unaligned
 127:Core/Src/M365_Dashboard.c **** 							if(sysinfoaddress+i<sysinfoaddress+512){
 440              		.loc 3 127 25
 441 0124 184B     		ldr	r3, .L14+24
 442 0126 1A68     		ldr	r2, [r3]
 443 0128 FB69     		ldr	r3, [r7, #28]
 444 012a 1A44     		add	r2, r2, r3
 445              		.loc 3 127 42
 446 012c 164B     		ldr	r3, .L14+24
 447 012e 1B68     		ldr	r3, [r3]
 448 0130 03F50073 		add	r3, r3, #512
 449              		.loc 3 127 10
 450 0134 9A42     		cmp	r2, r3
 451 0136 0AD2     		bcs	.L11
 128:Core/Src/M365_Dashboard.c **** 					    	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, sysinfoaddress+i, data);
 452              		.loc 3 128 11
 453 0138 134B     		ldr	r3, .L14+24
 454 013a 1A68     		ldr	r2, [r3]
 455 013c FB69     		ldr	r3, [r7, #28]
 456 013e D118     		adds	r1, r2, r3
 457 0140 7B68     		ldr	r3, [r7, #4]
 458 0142 1A46     		mov	r2, r3
 459 0144 4FF00003 		mov	r3, #0
 460 0148 0220     		movs	r0, #2
 461 014a FFF7FEFF 		bl	HAL_FLASH_Program
 462              	.L11:
 125:Core/Src/M365_Dashboard.c **** 							memcpy(target,source+i,4);
 463              		.loc 3 125 33 discriminator 2
 464 014e FB69     		ldr	r3, [r7, #28]
 465 0150 0433     		adds	r3, r3, #4
 466 0152 FB61     		str	r3, [r7, #28]
 467              	.L10:
 125:Core/Src/M365_Dashboard.c **** 							memcpy(target,source+i,4);
 468              		.loc 3 125 10 discriminator 1
 469 0154 FB69     		ldr	r3, [r7, #28]
 470 0156 B3F5007F 		cmp	r3, #512
 471 015a DCDB     		blt	.L12
 472              	.LBE11:
 129:Core/Src/M365_Dashboard.c **** 							}
 130:Core/Src/M365_Dashboard.c **** 					    }
 131:Core/Src/M365_Dashboard.c **** 						HAL_FLASH_Lock();
 473              		.loc 3 131 7
 474 015c FFF7FEFF 		bl	HAL_FLASH_Lock
 475              	.L13:
 476              	.LBE10:
 132:Core/Src/M365_Dashboard.c **** 	}
 133:Core/Src/M365_Dashboard.c **** 
ARM GAS  /tmp/ccEbWydE.s 			page 60


 134:Core/Src/M365_Dashboard.c **** 
 135:Core/Src/M365_Dashboard.c **** 
 136:Core/Src/M365_Dashboard.c **** }
 477              		.loc 3 136 1
 478 0160 00BF     		nop
 479 0162 2037     		adds	r7, r7, #32
 480              	.LCFI6:
 481              		.cfi_def_cfa_offset 24
 482 0164 BD46     		mov	sp, r7
 483              	.LCFI7:
 484              		.cfi_def_cfa_register 13
 485              		@ sp needed
 486 0166 BDE88040 		pop	{r7, lr}
 487              	.LCFI8:
 488              		.cfi_restore 14
 489              		.cfi_restore 7
 490              		.cfi_def_cfa_offset 16
 491 016a 04B0     		add	sp, sp, #16
 492              	.LCFI9:
 493              		.cfi_def_cfa_offset 0
 494 016c 7047     		bx	lr
 495              	.L15:
 496 016e 00BF     		.align	2
 497              	.L14:
 498 0170 00000000 		.word	ui8_rx_buffer
 499 0174 00000000 		.word	ui8_tx_buffer
 500 0178 00000000 		.word	MT
 501 017c 20000000 		.word	MT+32
 502 0180 00000000 		.word	.LC0
 503 0184 00000000 		.word	proc_ID_address
 504 0188 00000000 		.word	sysinfoaddress
 505 018c 00000000 		.word	EraseInitStruct.10002
 506 0190 00000000 		.word	sys_info
 507              		.cfi_endproc
 508              	.LFE120:
 510              		.section	.text.search_DashboardMessage,"ax",%progbits
 511              		.align	1
 512              		.global	search_DashboardMessage
 513              		.syntax unified
 514              		.thumb
 515              		.thumb_func
 516              		.fpu softvfp
 518              	search_DashboardMessage:
 519              	.LFB121:
 137:Core/Src/M365_Dashboard.c **** 
 138:Core/Src/M365_Dashboard.c **** void search_DashboardMessage(M365State_t* p_M365State, UART_HandleTypeDef huart1){
 520              		.loc 3 138 82
 521              		.cfi_startproc
 522              		@ args = 68, pretend = 16, frame = 8
 523              		@ frame_needed = 1, uses_anonymous_args = 0
 524 0000 84B0     		sub	sp, sp, #16
 525              	.LCFI10:
 526              		.cfi_def_cfa_offset 16
 527 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 528              	.LCFI11:
 529              		.cfi_def_cfa_offset 36
 530              		.cfi_offset 4, -36
ARM GAS  /tmp/ccEbWydE.s 			page 61


 531              		.cfi_offset 5, -32
 532              		.cfi_offset 6, -28
 533              		.cfi_offset 7, -24
 534              		.cfi_offset 14, -20
 535 0004 93B0     		sub	sp, sp, #76
 536              	.LCFI12:
 537              		.cfi_def_cfa_offset 112
 538 0006 10AF     		add	r7, sp, #64
 539              	.LCFI13:
 540              		.cfi_def_cfa 7, 48
 541 0008 7860     		str	r0, [r7, #4]
 542 000a 07F12400 		add	r0, r7, #36
 543 000e 80E80E00 		stm	r0, {r1, r2, r3}
 139:Core/Src/M365_Dashboard.c **** 
 140:Core/Src/M365_Dashboard.c **** 	if(ui32_timeoutcounter>3200&&MT.ESC_status_2 != 0x0802){
 544              		.loc 3 140 24
 545 0012 794B     		ldr	r3, .L31
 546 0014 1B68     		ldr	r3, [r3]
 547              		.loc 3 140 4
 548 0016 B3F5486F 		cmp	r3, #3200
 549 001a 2CD9     		bls	.L17
 550              		.loc 3 140 33 discriminator 1
 551 001c 774B     		ldr	r3, .L31+4
 552 001e B3F86431 		ldrh	r3, [r3, #356]	@ unaligned
 553 0022 9BB2     		uxth	r3, r3
 554              		.loc 3 140 29 discriminator 1
 555 0024 40F60202 		movw	r2, #2050
 556 0028 9342     		cmp	r3, r2
 557 002a 24D0     		beq	.L17
 141:Core/Src/M365_Dashboard.c **** 
 142:Core/Src/M365_Dashboard.c **** 
 143:Core/Src/M365_Dashboard.c **** 		ui32_timeoutcounter=0;
 558              		.loc 3 143 22
 559 002c 724B     		ldr	r3, .L31
 560 002e 0022     		movs	r2, #0
 561 0030 1A60     		str	r2, [r3]
 144:Core/Src/M365_Dashboard.c **** 		//printf_("DMA Receive timeout! \n");
 145:Core/Src/M365_Dashboard.c **** 		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 562              		.loc 3 145 3
 563 0032 0221     		movs	r1, #2
 564 0034 7248     		ldr	r0, .L31+8
 565 0036 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 146:Core/Src/M365_Dashboard.c **** 		ui8_state=STATE_LOST;
 566              		.loc 3 146 12
 567 003a 724B     		ldr	r3, .L31+12
 568 003c 0022     		movs	r2, #0
 569 003e 1A70     		strb	r2, [r3]
 147:Core/Src/M365_Dashboard.c **** 	  	CLEAR_BIT(DMA1_Channel5->CCR, DMA_CCR_EN);
 570              		.loc 3 147 5
 571 0040 714B     		ldr	r3, .L31+16
 572 0042 1B68     		ldr	r3, [r3]
 573 0044 704A     		ldr	r2, .L31+16
 574 0046 23F00103 		bic	r3, r3, #1
 575 004a 1360     		str	r3, [r2]
 148:Core/Src/M365_Dashboard.c **** 	  	DMA1_Channel5->CNDTR=sizeof(ui8_rx_buffer);
 576              		.loc 3 148 18
 577 004c 6E4B     		ldr	r3, .L31+16
ARM GAS  /tmp/ccEbWydE.s 			page 62


 578              		.loc 3 148 25
 579 004e 8422     		movs	r2, #132
 580 0050 5A60     		str	r2, [r3, #4]
 149:Core/Src/M365_Dashboard.c **** 	  	SET_BIT(DMA1_Channel5->CCR, DMA_CCR_EN);
 581              		.loc 3 149 5
 582 0052 6D4B     		ldr	r3, .L31+16
 583 0054 1B68     		ldr	r3, [r3]
 584 0056 6C4A     		ldr	r2, .L31+16
 585 0058 43F00103 		orr	r3, r3, #1
 586 005c 1360     		str	r3, [r2]
 150:Core/Src/M365_Dashboard.c **** 
 151:Core/Src/M365_Dashboard.c **** 		if (HAL_UART_Receive_DMA(&huart1, (uint8_t*) ui8_rx_buffer, sizeof(ui8_rx_buffer)) != HAL_OK) {
 587              		.loc 3 151 7
 588 005e 07F12403 		add	r3, r7, #36
 589 0062 8422     		movs	r2, #132
 590 0064 6949     		ldr	r1, .L31+20
 591 0066 1846     		mov	r0, r3
 592 0068 FFF7FEFF 		bl	HAL_UART_Receive_DMA
 593 006c 0346     		mov	r3, r0
 594              		.loc 3 151 6
 595 006e 002B     		cmp	r3, #0
 596 0070 01D0     		beq	.L17
 152:Core/Src/M365_Dashboard.c **** 			Error_Handler();
 597              		.loc 3 152 4
 598 0072 FFF7FEFF 		bl	Error_Handler
 599              	.L17:
 153:Core/Src/M365_Dashboard.c **** 		}
 154:Core/Src/M365_Dashboard.c **** 
 155:Core/Src/M365_Dashboard.c **** 	}
 156:Core/Src/M365_Dashboard.c **** 
 157:Core/Src/M365_Dashboard.c **** 
 158:Core/Src/M365_Dashboard.c **** 	ui8_recentpointerposition = sizeof(ui8_rx_buffer) - (DMA1_Channel5->CNDTR); //Pointer of UART1RX D
 600              		.loc 3 158 68
 601 0076 644B     		ldr	r3, .L31+16
 602 0078 5B68     		ldr	r3, [r3, #4]
 603              		.loc 3 158 52
 604 007a DAB2     		uxtb	r2, r3
 605 007c 6FF07B03 		mvn	r3, #123
 606 0080 9B1A     		subs	r3, r3, r2
 607 0082 DAB2     		uxtb	r2, r3
 608              		.loc 3 158 28
 609 0084 624B     		ldr	r3, .L31+24
 610 0086 1A70     		strb	r2, [r3]
 159:Core/Src/M365_Dashboard.c **** 		if (ui8_recentpointerposition<ui8_oldpointerposition){
 611              		.loc 3 159 32
 612 0088 614B     		ldr	r3, .L31+24
 613 008a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 614 008c 614B     		ldr	r3, .L31+28
 615 008e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 616              		.loc 3 159 6
 617 0090 9A42     		cmp	r2, r3
 618 0092 80F09D80 		bcs	.L19
 160:Core/Src/M365_Dashboard.c **** 			ui8_oldpointerposition=ui8_recentpointerposition-1;
 619              		.loc 3 160 52
 620 0096 5E4B     		ldr	r3, .L31+24
 621 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 622 009a 013B     		subs	r3, r3, #1
ARM GAS  /tmp/ccEbWydE.s 			page 63


 623 009c DAB2     		uxtb	r2, r3
 624              		.loc 3 160 26
 625 009e 5D4B     		ldr	r3, .L31+28
 626 00a0 1A70     		strb	r2, [r3]
 161:Core/Src/M365_Dashboard.c **** 			ui8_state=STATE_LOST;
 627              		.loc 3 161 13
 628 00a2 584B     		ldr	r3, .L31+12
 629 00a4 0022     		movs	r2, #0
 630 00a6 1A70     		strb	r2, [r3]
 162:Core/Src/M365_Dashboard.c **** 		}
 163:Core/Src/M365_Dashboard.c **** 		while(ui8_oldpointerposition!=ui8_recentpointerposition){
 631              		.loc 3 163 8
 632 00a8 92E0     		b	.L19
 633              	.L27:
 164:Core/Src/M365_Dashboard.c **** 
 165:Core/Src/M365_Dashboard.c **** 			switch (ui8_state) {
 634              		.loc 3 165 4
 635 00aa 564B     		ldr	r3, .L31+12
 636 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 637 00ae 022B     		cmp	r3, #2
 638 00b0 37D0     		beq	.L20
 639 00b2 022B     		cmp	r3, #2
 640 00b4 7CDC     		bgt	.L21
 641 00b6 002B     		cmp	r3, #0
 642 00b8 02D0     		beq	.L22
 643 00ba 012B     		cmp	r3, #1
 644 00bc 1CD0     		beq	.L23
 645 00be 77E0     		b	.L21
 646              	.L22:
 166:Core/Src/M365_Dashboard.c **** 			case STATE_LOST: { //if no message start is detected yet, search for start pattern 0x55 0xAA
 167:Core/Src/M365_Dashboard.c **** 				if(ui8_rx_buffer[ui8_oldpointerposition]==0xAA&&ui8_rx_buffer[ui8_oldpointerposition-1]==0x55){
 647              		.loc 3 167 21
 648 00c0 544B     		ldr	r3, .L31+28
 649 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 650 00c4 1A46     		mov	r2, r3
 651 00c6 514B     		ldr	r3, .L31+20
 652 00c8 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 653              		.loc 3 167 7
 654 00ca AA2B     		cmp	r3, #170
 655 00cc 6BD1     		bne	.L28
 656              		.loc 3 167 89 discriminator 1
 657 00ce 514B     		ldr	r3, .L31+28
 658 00d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 659 00d2 013B     		subs	r3, r3, #1
 660              		.loc 3 167 66 discriminator 1
 661 00d4 4D4A     		ldr	r2, .L31+20
 662 00d6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 663              		.loc 3 167 51 discriminator 1
 664 00d8 552B     		cmp	r3, #85
 665 00da 64D1     		bne	.L28
 168:Core/Src/M365_Dashboard.c **** 					ui8_messagestartpos=ui8_oldpointerposition-1;
 666              		.loc 3 168 48
 667 00dc 4D4B     		ldr	r3, .L31+28
 668 00de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 669 00e0 013B     		subs	r3, r3, #1
 670 00e2 DAB2     		uxtb	r2, r3
 671              		.loc 3 168 25
ARM GAS  /tmp/ccEbWydE.s 			page 64


 672 00e4 4C4B     		ldr	r3, .L31+32
 673 00e6 1A70     		strb	r2, [r3]
 169:Core/Src/M365_Dashboard.c **** 					if(ui8_messagestartpos<sizeof(ui8_rx_buffer)-24){
 674              		.loc 3 169 28
 675 00e8 4B4B     		ldr	r3, .L31+32
 676 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 677              		.loc 3 169 8
 678 00ec 6B2B     		cmp	r3, #107
 679 00ee 5AD8     		bhi	.L28
 170:Core/Src/M365_Dashboard.c **** 					ui8_state=STATE_START_DETECTED;
 680              		.loc 3 170 15
 681 00f0 444B     		ldr	r3, .L31+12
 682 00f2 0122     		movs	r2, #1
 683 00f4 1A70     		strb	r2, [r3]
 171:Core/Src/M365_Dashboard.c **** 					}
 172:Core/Src/M365_Dashboard.c **** 				}
 173:Core/Src/M365_Dashboard.c **** 			}
 174:Core/Src/M365_Dashboard.c **** 				break;
 684              		.loc 3 174 5
 685 00f6 56E0     		b	.L28
 686              	.L23:
 175:Core/Src/M365_Dashboard.c **** 
 176:Core/Src/M365_Dashboard.c **** 			case STATE_START_DETECTED: { //read the lenght of the message
 177:Core/Src/M365_Dashboard.c **** 				if(ui8_oldpointerposition==ui8_messagestartpos+2){
 687              		.loc 3 177 30
 688 00f8 464B     		ldr	r3, .L31+28
 689 00fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 690 00fc 1A46     		mov	r2, r3
 691              		.loc 3 177 51
 692 00fe 464B     		ldr	r3, .L31+32
 693 0100 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 694 0102 0233     		adds	r3, r3, #2
 695              		.loc 3 177 7
 696 0104 9A42     		cmp	r2, r3
 697 0106 50D1     		bne	.L29
 178:Core/Src/M365_Dashboard.c **** 					ui8_messagelength=ui8_rx_buffer[ui8_oldpointerposition]+6;
 698              		.loc 3 178 37
 699 0108 424B     		ldr	r3, .L31+28
 700 010a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 701 010c 1A46     		mov	r2, r3
 702 010e 3F4B     		ldr	r3, .L31+20
 703 0110 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 704              		.loc 3 178 61
 705 0112 0633     		adds	r3, r3, #6
 706 0114 DAB2     		uxtb	r2, r3
 707              		.loc 3 178 23
 708 0116 414B     		ldr	r3, .L31+36
 709 0118 1A70     		strb	r2, [r3]
 179:Core/Src/M365_Dashboard.c **** 					ui8_state=STATE_LENGTH_DETECTED;
 710              		.loc 3 179 15
 711 011a 3A4B     		ldr	r3, .L31+12
 712 011c 0222     		movs	r2, #2
 713 011e 1A70     		strb	r2, [r3]
 180:Core/Src/M365_Dashboard.c **** 				}
 181:Core/Src/M365_Dashboard.c **** 			}
 182:Core/Src/M365_Dashboard.c **** 				break;
 714              		.loc 3 182 5
ARM GAS  /tmp/ccEbWydE.s 			page 65


 715 0120 43E0     		b	.L29
 716              	.L20:
 183:Core/Src/M365_Dashboard.c **** 			case STATE_LENGTH_DETECTED: { //read whole message and call processing
 184:Core/Src/M365_Dashboard.c **** 				if(ui8_oldpointerposition==ui8_messagestartpos+ui8_messagelength-1){
 717              		.loc 3 184 30
 718 0122 3C4B     		ldr	r3, .L31+28
 719 0124 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 720 0126 1A46     		mov	r2, r3
 721              		.loc 3 184 51
 722 0128 3B4B     		ldr	r3, .L31+32
 723 012a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 724 012c 1946     		mov	r1, r3
 725 012e 3B4B     		ldr	r3, .L31+36
 726 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 727 0132 0B44     		add	r3, r3, r1
 728              		.loc 3 184 69
 729 0134 013B     		subs	r3, r3, #1
 730              		.loc 3 184 7
 731 0136 9A42     		cmp	r2, r3
 732 0138 39D1     		bne	.L30
 185:Core/Src/M365_Dashboard.c **** 					memcpy(ui8_dashboardmessage,ui8_rx_buffer+ui8_messagestartpos,ui8_messagelength);
 733              		.loc 3 185 6
 734 013a 374B     		ldr	r3, .L31+32
 735 013c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 736 013e 1A46     		mov	r2, r3
 737 0140 324B     		ldr	r3, .L31+20
 738 0142 1344     		add	r3, r3, r2
 739 0144 354A     		ldr	r2, .L31+36
 740 0146 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 741 0148 1946     		mov	r1, r3
 742 014a 3548     		ldr	r0, .L31+40
 743 014c FFF7FEFF 		bl	memcpy
 186:Core/Src/M365_Dashboard.c **** 					process_DashboardMessage(p_M365State, (uint8_t*)&ui8_dashboardmessage,ui8_messagelength,huart1
 744              		.loc 3 186 6
 745 0150 324B     		ldr	r3, .L31+36
 746 0152 1E78     		ldrb	r6, [r3]	@ zero_extendqisi2
 747 0154 6D46     		mov	r5, sp
 748 0156 07F12804 		add	r4, r7, #40
 749 015a 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 750 015c 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 751 015e 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 752 0160 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 753 0162 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 754 0164 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 755 0166 94E80700 		ldm	r4, {r0, r1, r2}
 756 016a 85E80700 		stm	r5, {r0, r1, r2}
 757 016e 7B6A     		ldr	r3, [r7, #36]
 758 0170 3246     		mov	r2, r6
 759 0172 2B49     		ldr	r1, .L31+40
 760 0174 7868     		ldr	r0, [r7, #4]
 761 0176 FFF7FEFF 		bl	process_DashboardMessage
 187:Core/Src/M365_Dashboard.c **** 					ui8_state=STATE_LOST;
 762              		.loc 3 187 15
 763 017a 224B     		ldr	r3, .L31+12
 764 017c 0022     		movs	r2, #0
 765 017e 1A70     		strb	r2, [r3]
 188:Core/Src/M365_Dashboard.c **** 				  	   CLEAR_BIT(DMA1_Channel5->CCR, DMA_CCR_EN);
ARM GAS  /tmp/ccEbWydE.s 			page 66


 766              		.loc 3 188 11
 767 0180 214B     		ldr	r3, .L31+16
 768 0182 1B68     		ldr	r3, [r3]
 769 0184 204A     		ldr	r2, .L31+16
 770 0186 23F00103 		bic	r3, r3, #1
 771 018a 1360     		str	r3, [r2]
 189:Core/Src/M365_Dashboard.c **** 				  	   DMA1_Channel5->CNDTR=sizeof(ui8_rx_buffer);
 772              		.loc 3 189 24
 773 018c 1E4B     		ldr	r3, .L31+16
 774              		.loc 3 189 31
 775 018e 8422     		movs	r2, #132
 776 0190 5A60     		str	r2, [r3, #4]
 190:Core/Src/M365_Dashboard.c **** 				  	   SET_BIT(DMA1_Channel5->CCR, DMA_CCR_EN);
 777              		.loc 3 190 11
 778 0192 1D4B     		ldr	r3, .L31+16
 779 0194 1B68     		ldr	r3, [r3]
 780 0196 1C4A     		ldr	r2, .L31+16
 781 0198 43F00103 		orr	r3, r3, #1
 782 019c 1360     		str	r3, [r2]
 191:Core/Src/M365_Dashboard.c **** 				  	   ui32_timeoutcounter=0;
 783              		.loc 3 191 30
 784 019e 164B     		ldr	r3, .L31
 785 01a0 0022     		movs	r2, #0
 786 01a2 1A60     		str	r2, [r3]
 192:Core/Src/M365_Dashboard.c **** 
 193:Core/Src/M365_Dashboard.c **** 
 194:Core/Src/M365_Dashboard.c **** 				}
 195:Core/Src/M365_Dashboard.c **** 			}
 196:Core/Src/M365_Dashboard.c **** 				break;
 787              		.loc 3 196 5
 788 01a4 03E0     		b	.L30
 789              	.L28:
 174:Core/Src/M365_Dashboard.c **** 
 790              		.loc 3 174 5
 791 01a6 00BF     		nop
 792 01a8 02E0     		b	.L21
 793              	.L29:
 182:Core/Src/M365_Dashboard.c **** 			case STATE_LENGTH_DETECTED: { //read whole message and call processing
 794              		.loc 3 182 5
 795 01aa 00BF     		nop
 796 01ac 00E0     		b	.L21
 797              	.L30:
 798              		.loc 3 196 5
 799 01ae 00BF     		nop
 800              	.L21:
 197:Core/Src/M365_Dashboard.c **** 			} //end switch
 198:Core/Src/M365_Dashboard.c **** 
 199:Core/Src/M365_Dashboard.c **** 			ui8_oldpointerposition=(ui8_oldpointerposition+1)% sizeof(ui8_rx_buffer);
 801              		.loc 3 199 50
 802 01b0 184B     		ldr	r3, .L31+28
 803 01b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 804 01b4 0133     		adds	r3, r3, #1
 805 01b6 1946     		mov	r1, r3
 806              		.loc 3 199 53
 807 01b8 1A4B     		ldr	r3, .L31+44
 808 01ba A3FB0123 		umull	r2, r3, r3, r1
 809 01be 5A09     		lsrs	r2, r3, #5
ARM GAS  /tmp/ccEbWydE.s 			page 67


 810 01c0 1346     		mov	r3, r2
 811 01c2 5B01     		lsls	r3, r3, #5
 812 01c4 1344     		add	r3, r3, r2
 813 01c6 9B00     		lsls	r3, r3, #2
 814 01c8 CA1A     		subs	r2, r1, r3
 815              		.loc 3 199 26
 816 01ca D2B2     		uxtb	r2, r2
 817 01cc 114B     		ldr	r3, .L31+28
 818 01ce 1A70     		strb	r2, [r3]
 819              	.L19:
 163:Core/Src/M365_Dashboard.c **** 
 820              		.loc 3 163 31
 821 01d0 104B     		ldr	r3, .L31+28
 822 01d2 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 823 01d4 0E4B     		ldr	r3, .L31+24
 824 01d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 163:Core/Src/M365_Dashboard.c **** 
 825              		.loc 3 163 8
 826 01d8 9A42     		cmp	r2, r3
 827 01da 7FF466AF 		bne	.L27
 200:Core/Src/M365_Dashboard.c **** 		}// end of while
 201:Core/Src/M365_Dashboard.c **** 		ui32_timeoutcounter++;
 828              		.loc 3 201 22
 829 01de 064B     		ldr	r3, .L31
 830 01e0 1B68     		ldr	r3, [r3]
 831 01e2 0133     		adds	r3, r3, #1
 832 01e4 044A     		ldr	r2, .L31
 833 01e6 1360     		str	r3, [r2]
 202:Core/Src/M365_Dashboard.c **** }
 834              		.loc 3 202 1
 835 01e8 00BF     		nop
 836 01ea 0C37     		adds	r7, r7, #12
 837              	.LCFI14:
 838              		.cfi_def_cfa_offset 36
 839 01ec BD46     		mov	sp, r7
 840              	.LCFI15:
 841              		.cfi_def_cfa_register 13
 842              		@ sp needed
 843 01ee BDE8F040 		pop	{r4, r5, r6, r7, lr}
 844              	.LCFI16:
 845              		.cfi_restore 14
 846              		.cfi_restore 7
 847              		.cfi_restore 6
 848              		.cfi_restore 5
 849              		.cfi_restore 4
 850              		.cfi_def_cfa_offset 16
 851 01f2 04B0     		add	sp, sp, #16
 852              	.LCFI17:
 853              		.cfi_def_cfa_offset 0
 854 01f4 7047     		bx	lr
 855              	.L32:
 856 01f6 00BF     		.align	2
 857              	.L31:
 858 01f8 00000000 		.word	ui32_timeoutcounter
 859 01fc 00000000 		.word	MT
 860 0200 00140140 		.word	1073812480
 861 0204 00000000 		.word	ui8_state
ARM GAS  /tmp/ccEbWydE.s 			page 68


 862 0208 58000240 		.word	1073872984
 863 020c 00000000 		.word	ui8_rx_buffer
 864 0210 00000000 		.word	ui8_recentpointerposition
 865 0214 00000000 		.word	ui8_oldpointerposition
 866 0218 00000000 		.word	ui8_messagestartpos
 867 021c 00000000 		.word	ui8_messagelength
 868 0220 00000000 		.word	ui8_dashboardmessage
 869 0224 E1830F3E 		.word	1041204193
 870              		.cfi_endproc
 871              	.LFE121:
 873              		.section	.rodata
 874 000a 0000     		.align	2
 875              	.LC1:
 876 000c 25642C20 		.ascii	"%d, %d, %d\015\012\000"
 876      25642C20 
 876      25640D0A 
 876      00
 877              		.section	.text.process_DashboardMessage,"ax",%progbits
 878              		.align	1
 879              		.global	process_DashboardMessage
 880              		.syntax unified
 881              		.thumb
 882              		.thumb_func
 883              		.fpu softvfp
 885              	process_DashboardMessage:
 886              	.LFB122:
 203:Core/Src/M365_Dashboard.c **** 
 204:Core/Src/M365_Dashboard.c **** void process_DashboardMessage(M365State_t* p_M365State, uint8_t *message, uint8_t length, UART_Hand
 887              		.loc 3 204 118
 888              		.cfi_startproc
 889              		@ args = 68, pretend = 8, frame = 24
 890              		@ frame_needed = 1, uses_anonymous_args = 0
 891 0000 82B0     		sub	sp, sp, #8
 892              	.LCFI18:
 893              		.cfi_def_cfa_offset 8
 894 0002 80B5     		push	{r7, lr}
 895              	.LCFI19:
 896              		.cfi_def_cfa_offset 16
 897              		.cfi_offset 7, -16
 898              		.cfi_offset 14, -12
 899 0004 88B0     		sub	sp, sp, #32
 900              	.LCFI20:
 901              		.cfi_def_cfa_offset 48
 902 0006 02AF     		add	r7, sp, #8
 903              	.LCFI21:
 904              		.cfi_def_cfa 7, 40
 905 0008 F860     		str	r0, [r7, #12]
 906 000a B960     		str	r1, [r7, #8]
 907 000c 7B62     		str	r3, [r7, #36]
 908 000e 1346     		mov	r3, r2
 909 0010 FB71     		strb	r3, [r7, #7]
 205:Core/Src/M365_Dashboard.c **** 	//while(HAL_UART_GetState(&huart1)!=HAL_UART_STATE_READY){}
 206:Core/Src/M365_Dashboard.c **** 	//HAL_Delay(2); // bad style, but wait for characters coming in, if message is longer than expecte
 207:Core/Src/M365_Dashboard.c **** 	if(!checkCRC(message, length)){
 910              		.loc 3 207 6
 911 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 912 0014 1946     		mov	r1, r3
ARM GAS  /tmp/ccEbWydE.s 			page 69


 913 0016 B868     		ldr	r0, [r7, #8]
 914 0018 FFF7FEFF 		bl	checkCRC
 915 001c 0346     		mov	r3, r0
 916              		.loc 3 207 4
 917 001e 002B     		cmp	r3, #0
 918 0020 40F0D482 		bne	.L63
 208:Core/Src/M365_Dashboard.c **** 	//55 AA 06 21 64 00 00 00 00 00 74 FF
 209:Core/Src/M365_Dashboard.c **** 	//55	AA	8	21	64	0	20	0	0	1	0	12	3F	FF
 210:Core/Src/M365_Dashboard.c **** 
 211:Core/Src/M365_Dashboard.c **** 		switch (message[command]) {
 919              		.loc 3 211 18
 920 0024 BB68     		ldr	r3, [r7, #8]
 921 0026 0433     		adds	r3, r3, #4
 922 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 923              		.loc 3 211 3
 924 002a 652B     		cmp	r3, #101
 925 002c 00F08B80 		beq	.L35
 926 0030 652B     		cmp	r3, #101
 927 0032 00F3CD82 		bgt	.L64
 928 0036 642B     		cmp	r3, #100
 929 0038 22D0     		beq	.L37
 930 003a 642B     		cmp	r3, #100
 931 003c 00F3C882 		bgt	.L64
 932 0040 0A2B     		cmp	r3, #10
 933 0042 19DC     		bgt	.L38
 934 0044 032B     		cmp	r3, #3
 935 0046 C0F2C382 		blt	.L64
 936 004a 033B     		subs	r3, r3, #3
 937 004c 072B     		cmp	r3, #7
 938 004e 00F2BF82 		bhi	.L64
 939 0052 01A2     		adr	r2, .L40
 940 0054 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 941              		.p2align 2
 942              	.L40:
 943 0058 31030000 		.word	.L44+1
 944 005c D1050000 		.word	.L64+1
 945 0060 D1050000 		.word	.L64+1
 946 0064 D1050000 		.word	.L64+1
 947 0068 27040000 		.word	.L43+1
 948 006c 95040000 		.word	.L42+1
 949 0070 7B050000 		.word	.L41+1
 950 0074 B1030000 		.word	.L39+1
 951              		.p2align 1
 952              	.L38:
 953 0078 612B     		cmp	r3, #97
 954 007a 00F0C880 		beq	.L45
 212:Core/Src/M365_Dashboard.c **** 
 213:Core/Src/M365_Dashboard.c **** 		case 0x64: {
 214:Core/Src/M365_Dashboard.c **** 
 215:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[5]=0x00;
 216:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[msglength]=0x08;
 217:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[receiver]=0x21;
 218:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[command]=message[command];
 219:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[Speed]=p_M365State->speed;
 220:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[Mode]=p_M365State->mode;
 221:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[SOC]=map(p_M365State->battery_voltage,BATTERYVOLTAGE_MIN,BATTERYVOLTAGE_MAX,0,96);
 222:Core/Src/M365_Dashboard.c **** 			if(p_M365State->light)ui8_tx_buffer[Light]=64;
ARM GAS  /tmp/ccEbWydE.s 			page 70


 223:Core/Src/M365_Dashboard.c **** 			else ui8_tx_buffer[Light]=0;
 224:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[Beep] = p_M365State->beep;
 225:Core/Src/M365_Dashboard.c ****       ui8_tx_buffer[errorcode] = p_M365State->error_state;
 226:Core/Src/M365_Dashboard.c **** 
 227:Core/Src/M365_Dashboard.c **** 			addCRC((uint8_t*)ui8_tx_buffer, ui8_tx_buffer[msglength]+6);
 228:Core/Src/M365_Dashboard.c **** 			HAL_HalfDuplex_EnableTransmitter(&huart1);
 229:Core/Src/M365_Dashboard.c **** 			HAL_UART_Transmit_DMA(&huart1, (uint8_t*)ui8_tx_buffer, ui8_tx_buffer[msglength]+6);
 230:Core/Src/M365_Dashboard.c **** 			if(p_M365State->beep&&ui8_tx_buffer[Beep])p_M365State->beep = 0;
 231:Core/Src/M365_Dashboard.c **** 
 232:Core/Src/M365_Dashboard.c **** 			}
 233:Core/Src/M365_Dashboard.c **** 			break;
 234:Core/Src/M365_Dashboard.c **** 
 235:Core/Src/M365_Dashboard.c **** 		case 0x65:
 236:Core/Src/M365_Dashboard.c ****     
 237:Core/Src/M365_Dashboard.c **** 			if (message[Brake] < (BRAKEOFFSET >> 1)) {
 238:Core/Src/M365_Dashboard.c ****         p_M365State->error_state = brake;
 239:Core/Src/M365_Dashboard.c ****       } else if(p_M365State->error_state == brake) {
 240:Core/Src/M365_Dashboard.c ****         p_M365State->error_state = none;
 241:Core/Src/M365_Dashboard.c ****       }
 242:Core/Src/M365_Dashboard.c **** 
 243:Core/Src/M365_Dashboard.c **** 			if (map(message[Brake], BRAKEOFFSET, BRAKEMAX, 0, p_M365State->regen_current) > 0) {
 244:Core/Src/M365_Dashboard.c **** 				if (p_M365State->speed > 2) {
 245:Core/Src/M365_Dashboard.c **** 
 246:Core/Src/M365_Dashboard.c **** 					p_M365State->i_q_setpoint_target = map(message[Brake], BRAKEOFFSET, BRAKEMAX, 0, p_M365State->
 247:Core/Src/M365_Dashboard.c **** 
 248:Core/Src/M365_Dashboard.c ****           // ramp down regen strength at the max voltage to avoid the BMS shutting down the battery
 249:Core/Src/M365_Dashboard.c ****           p_M365State->i_q_setpoint_target = -map(p_M365State->battery_voltage, BATTERYVOLTAGE_MAX 
 250:Core/Src/M365_Dashboard.c **** 
 251:Core/Src/M365_Dashboard.c **** 					p_M365State->brake_active = true;
 252:Core/Src/M365_Dashboard.c ****         } else {
 253:Core/Src/M365_Dashboard.c ****           p_M365State->i_q_setpoint_target = 0;
 254:Core/Src/M365_Dashboard.c ****           p_M365State->brake_active = false;
 255:Core/Src/M365_Dashboard.c **** 				}
 256:Core/Src/M365_Dashboard.c ****       } else {
 257:Core/Src/M365_Dashboard.c **** 				p_M365State->i_q_setpoint_target = map(message[Throttle], THROTTLEOFFSET, THROTTLEMAX, 0, p_M36
 258:Core/Src/M365_Dashboard.c ****         p_M365State->brake_active = false;
 259:Core/Src/M365_Dashboard.c ****       }
 260:Core/Src/M365_Dashboard.c ****     break;
 261:Core/Src/M365_Dashboard.c **** 
 262:Core/Src/M365_Dashboard.c **** 		case 0x61: {
 263:Core/Src/M365_Dashboard.c **** 			//55 AA 06 20 61 DA 0C 02 27 00 69 FE
 264:Core/Src/M365_Dashboard.c **** 			//55 AA 0E 23 01 DA 48 FF 73 06 78 78 54 51 53 32 10 67 A2 FA
 265:Core/Src/M365_Dashboard.c **** 
 266:Core/Src/M365_Dashboard.c **** 			if(map(message[9],BRAKEOFFSET,BRAKEMAX,0,REGEN_CURRENT)>0){
 267:Core/Src/M365_Dashboard.c **** 				if(p_M365State->speed > 2) p_M365State->i_q_setpoint_target = -map(message[9],BRAKEOFFSET,BRAKE
 268:Core/Src/M365_Dashboard.c **** 				else p_M365State->i_q_setpoint_target = 0;
 269:Core/Src/M365_Dashboard.c **** 				}
 270:Core/Src/M365_Dashboard.c **** 			else{
 271:Core/Src/M365_Dashboard.c **** 				p_M365State->i_q_setpoint_target = map(message[8],THROTTLEOFFSET,THROTTLEMAX,0,p_M365State->pha
 272:Core/Src/M365_Dashboard.c **** 				}
 273:Core/Src/M365_Dashboard.c **** 
 274:Core/Src/M365_Dashboard.c **** 
 275:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[msglength]=message[payloadLength]+2;
 276:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[receiver]=message[receiver]+3;
 277:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[command]=0x01;
 278:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[startAddress] =message[startAddress];
 279:Core/Src/M365_Dashboard.c **** 
ARM GAS  /tmp/ccEbWydE.s 			page 71


 280:Core/Src/M365_Dashboard.c **** 			source = (char *)&MT;
 281:Core/Src/M365_Dashboard.c **** 			target = (char *)&ui8_tx_buffer;
 282:Core/Src/M365_Dashboard.c **** 			ui8_source_offset = message[startAddress];
 283:Core/Src/M365_Dashboard.c **** 			ui8_target_offset = 6;
 284:Core/Src/M365_Dashboard.c **** 			memcpy(target+ui8_target_offset,source+ui8_source_offset*2,message[payloadLength]);
 285:Core/Src/M365_Dashboard.c **** 			addCRC((uint8_t*)ui8_tx_buffer, ui8_tx_buffer[msglength]+6);
 286:Core/Src/M365_Dashboard.c **** 			HAL_HalfDuplex_EnableTransmitter(&huart1);
 287:Core/Src/M365_Dashboard.c **** 			HAL_UART_Transmit_DMA(&huart1, (uint8_t*)ui8_tx_buffer, ui8_tx_buffer[msglength]+6);
 288:Core/Src/M365_Dashboard.c **** 			}
 289:Core/Src/M365_Dashboard.c **** 			break;
 290:Core/Src/M365_Dashboard.c **** 
 291:Core/Src/M365_Dashboard.c **** 		case 0x03: {
 292:Core/Src/M365_Dashboard.c **** 			//55	AA	4	20	3	70	1	0	67	FF
 293:Core/Src/M365_Dashboard.c **** 
 294:Core/Src/M365_Dashboard.c **** 			source = (char *)message;
 295:Core/Src/M365_Dashboard.c **** 			target = (char *)&MT;
 296:Core/Src/M365_Dashboard.c **** 			ui8_target_offset = message[startAddress];
 297:Core/Src/M365_Dashboard.c **** 
 298:Core/Src/M365_Dashboard.c **** 			memcpy(target+ui8_target_offset,source+6,1);
 299:Core/Src/M365_Dashboard.c **** 			if (message[payloadLength]==1){
 300:Core/Src/M365_Dashboard.c **** 				MT.ESC_status_2= 0x0802;
 301:Core/Src/M365_Dashboard.c **** 				HAL_FLASH_Unlock();
 302:Core/Src/M365_Dashboard.c **** 				uint32_t PAGEError = 0;
 303:Core/Src/M365_Dashboard.c **** 				/*Variable used for Erase procedure*/
 304:Core/Src/M365_Dashboard.c **** 				static FLASH_EraseInitTypeDef EraseInitStruct;
 305:Core/Src/M365_Dashboard.c **** 				 /* Erase the user Flash area
 306:Core/Src/M365_Dashboard.c **** 				    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/
 307:Core/Src/M365_Dashboard.c **** 
 308:Core/Src/M365_Dashboard.c **** 				  /* Fill EraseInit structure*/
 309:Core/Src/M365_Dashboard.c **** 				  EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 310:Core/Src/M365_Dashboard.c **** 				  EraseInitStruct.PageAddress = flashstartaddress;
 311:Core/Src/M365_Dashboard.c **** 				  EraseInitStruct.NbPages     = 29;
 312:Core/Src/M365_Dashboard.c **** 
 313:Core/Src/M365_Dashboard.c **** 				  if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 314:Core/Src/M365_Dashboard.c **** 				  {
 315:Core/Src/M365_Dashboard.c **** 				    /*
 316:Core/Src/M365_Dashboard.c **** 				      Error occurred while page erase.
 317:Core/Src/M365_Dashboard.c **** 				      User can add here some code to deal with this error.
 318:Core/Src/M365_Dashboard.c **** 				      PAGEError will contain the faulty page and then to know the code error on this page,
 319:Core/Src/M365_Dashboard.c **** 				      user can call function 'HAL_FLASH_GetError()'
 320:Core/Src/M365_Dashboard.c **** 				    */
 321:Core/Src/M365_Dashboard.c **** 				    /* Infinite loop */
 322:Core/Src/M365_Dashboard.c **** 				    while (1)
 323:Core/Src/M365_Dashboard.c **** 				    {
 324:Core/Src/M365_Dashboard.c **** 				      /* Make LED2 blink (100ms on, 2s off) to indicate error in Erase operation */
 325:Core/Src/M365_Dashboard.c **** 
 326:Core/Src/M365_Dashboard.c **** 				    }
 327:Core/Src/M365_Dashboard.c **** 				  }
 328:Core/Src/M365_Dashboard.c **** 				  HAL_FLASH_Lock();
 329:Core/Src/M365_Dashboard.c **** 			}
 330:Core/Src/M365_Dashboard.c **** 
 331:Core/Src/M365_Dashboard.c **** 			}
 332:Core/Src/M365_Dashboard.c **** 			break;
 333:Core/Src/M365_Dashboard.c **** 
 334:Core/Src/M365_Dashboard.c **** 		case 0x0A: {
 335:Core/Src/M365_Dashboard.c **** 			HAL_FLASH_Unlock();
 336:Core/Src/M365_Dashboard.c **** 
ARM GAS  /tmp/ccEbWydE.s 			page 72


 337:Core/Src/M365_Dashboard.c **** 							uint32_t PAGEError = 0;
 338:Core/Src/M365_Dashboard.c **** 							/*Variable used for Erase procedure*/
 339:Core/Src/M365_Dashboard.c **** 							static FLASH_EraseInitTypeDef EraseInitStruct;
 340:Core/Src/M365_Dashboard.c **** 							 /* Erase the user Flash area
 341:Core/Src/M365_Dashboard.c **** 							    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/
 342:Core/Src/M365_Dashboard.c **** 							  //write sysinfo
 343:Core/Src/M365_Dashboard.c **** //							  EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 344:Core/Src/M365_Dashboard.c **** //							  EraseInitStruct.PageAddress = sysinfoaddress;
 345:Core/Src/M365_Dashboard.c **** //							  EraseInitStruct.NbPages     = 1;
 346:Core/Src/M365_Dashboard.c **** //
 347:Core/Src/M365_Dashboard.c **** //							  if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 348:Core/Src/M365_Dashboard.c **** //							  {
 349:Core/Src/M365_Dashboard.c **** //							    /*
 350:Core/Src/M365_Dashboard.c **** //							      Error occurred while page erase.
 351:Core/Src/M365_Dashboard.c **** //							      User can add here some code to deal with this error.
 352:Core/Src/M365_Dashboard.c **** //							      PAGEError will contain the faulty page and then to know the code error on this page,
 353:Core/Src/M365_Dashboard.c **** //							      user can call function 'HAL_FLASH_GetError()'
 354:Core/Src/M365_Dashboard.c **** //							    */
 355:Core/Src/M365_Dashboard.c **** //							    /* Infinite loop */
 356:Core/Src/M365_Dashboard.c **** //							    while (1)
 357:Core/Src/M365_Dashboard.c **** //							    {
 358:Core/Src/M365_Dashboard.c **** //							      /* Make LED2 blink (100ms on, 2s off) to indicate error in Erase operation */
 359:Core/Src/M365_Dashboard.c **** //
 360:Core/Src/M365_Dashboard.c **** //							    }
 361:Core/Src/M365_Dashboard.c **** //							  }
 362:Core/Src/M365_Dashboard.c **** //							    uint32_t data;
 363:Core/Src/M365_Dashboard.c **** //							    //write processor ID
 364:Core/Src/M365_Dashboard.c **** //							    char *source = (char *)proc_ID_address;
 365:Core/Src/M365_Dashboard.c **** //							    char *target = (char *)&sys_info;
 366:Core/Src/M365_Dashboard.c **** //							    memcpy(target+436,source,12); //https://electro.club/post/48886
 367:Core/Src/M365_Dashboard.c **** //							    //write Scooter serial number
 368:Core/Src/M365_Dashboard.c **** //							    source = (char *)&MT.scooter_serial;
 369:Core/Src/M365_Dashboard.c **** //							    memcpy(target+32,source,14);
 370:Core/Src/M365_Dashboard.c **** //
 371:Core/Src/M365_Dashboard.c **** //								source = (char *)&sys_info;
 372:Core/Src/M365_Dashboard.c **** //							    target = (char *)&data;
 373:Core/Src/M365_Dashboard.c **** //
 374:Core/Src/M365_Dashboard.c **** //							    for(int i =0 ; i<512; i+=4){
 375:Core/Src/M365_Dashboard.c **** //									memcpy(target,source+i,4);
 376:Core/Src/M365_Dashboard.c **** //									if(sysinfoaddress+i<sysinfoaddress+512){
 377:Core/Src/M365_Dashboard.c **** //							    	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, sysinfoaddress+i, data);
 378:Core/Src/M365_Dashboard.c **** //									}
 379:Core/Src/M365_Dashboard.c **** //							    }
 380:Core/Src/M365_Dashboard.c **** 							//write updateinfo
 381:Core/Src/M365_Dashboard.c **** 							  EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 382:Core/Src/M365_Dashboard.c **** 							  EraseInitStruct.PageAddress = updateflagaddress;
 383:Core/Src/M365_Dashboard.c **** 							  EraseInitStruct.NbPages     = 1;
 384:Core/Src/M365_Dashboard.c **** 
 385:Core/Src/M365_Dashboard.c **** 							  if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 386:Core/Src/M365_Dashboard.c **** 							  {
 387:Core/Src/M365_Dashboard.c **** 							    /*
 388:Core/Src/M365_Dashboard.c **** 							      Error occurred while page erase.
 389:Core/Src/M365_Dashboard.c **** 							      User can add here some code to deal with this error.
 390:Core/Src/M365_Dashboard.c **** 							      PAGEError will contain the faulty page and then to know the code error on this page,
 391:Core/Src/M365_Dashboard.c **** 							      user can call function 'HAL_FLASH_GetError()'
 392:Core/Src/M365_Dashboard.c **** 							    */
 393:Core/Src/M365_Dashboard.c **** 							    /* Infinite loop */
ARM GAS  /tmp/ccEbWydE.s 			page 73


 394:Core/Src/M365_Dashboard.c **** 							    while (1)
 395:Core/Src/M365_Dashboard.c **** 							    {
 396:Core/Src/M365_Dashboard.c **** 							      /* Make LED2 blink (100ms on, 2s off) to indicate error in Erase operation */
 397:Core/Src/M365_Dashboard.c **** 
 398:Core/Src/M365_Dashboard.c **** 							    }
 399:Core/Src/M365_Dashboard.c **** 							  }
 400:Core/Src/M365_Dashboard.c **** 							  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, updateflagaddress, 0x505A);
 401:Core/Src/M365_Dashboard.c **** 
 402:Core/Src/M365_Dashboard.c **** 							  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, updateflagaddress+4, 0x01);
 403:Core/Src/M365_Dashboard.c **** 
 404:Core/Src/M365_Dashboard.c **** 							  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, updateflagaddress+8, ui16_update_size);
 405:Core/Src/M365_Dashboard.c **** 
 406:Core/Src/M365_Dashboard.c **** 
 407:Core/Src/M365_Dashboard.c **** 
 408:Core/Src/M365_Dashboard.c **** 			HAL_FLASH_Lock();
 409:Core/Src/M365_Dashboard.c **** 
 410:Core/Src/M365_Dashboard.c **** 			NVIC_SystemReset();
 411:Core/Src/M365_Dashboard.c **** 
 412:Core/Src/M365_Dashboard.c **** 			}
 413:Core/Src/M365_Dashboard.c **** 			break;
 414:Core/Src/M365_Dashboard.c **** 
 415:Core/Src/M365_Dashboard.c **** 		case 0x07: {
 416:Core/Src/M365_Dashboard.c **** 			//55 AA 06 20 07 00 08 61 00 00 69 FF
 417:Core/Src/M365_Dashboard.c **** 			//55 AA 02 23 07 00 D3 FF
 418:Core/Src/M365_Dashboard.c **** 			ui16_update_size = message[7]<<8|message[6];
 419:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[msglength] = 2;
 420:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[receiver]=message[receiver]+3;
 421:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[command]=0x07;
 422:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[startAddress] =0;
 423:Core/Src/M365_Dashboard.c **** 			addCRC((uint8_t*)ui8_tx_buffer, ui8_tx_buffer[msglength]+6);
 424:Core/Src/M365_Dashboard.c **** 			HAL_HalfDuplex_EnableTransmitter(&huart1);
 425:Core/Src/M365_Dashboard.c **** 			HAL_UART_Transmit_DMA(&huart1, (uint8_t*)ui8_tx_buffer, ui8_tx_buffer[msglength]+6);
 426:Core/Src/M365_Dashboard.c **** 			}
 427:Core/Src/M365_Dashboard.c **** 			break;
 428:Core/Src/M365_Dashboard.c **** 
 429:Core/Src/M365_Dashboard.c **** 		case 0x08: {
 430:Core/Src/M365_Dashboard.c **** 			//55 AA 42 20 08 00 FA 8B 7B 71 4F 4C 97 16 0B 71 34 89 96 24 DE C2 3B 3E FF 06 B7 3B 69 69 BB 8
 431:Core/Src/M365_Dashboard.c **** 			//55 AA 02 23 08 00 D2 FF
 432:Core/Src/M365_Dashboard.c **** 			static uint8_t packetsize;
 433:Core/Src/M365_Dashboard.c **** 			static uint8_t olddataposition=255;
 434:Core/Src/M365_Dashboard.c **** 			packetsize  = message[2]-2;
 435:Core/Src/M365_Dashboard.c **** 			source = (char *)message;
 436:Core/Src/M365_Dashboard.c **** 			target = (char *)&enc;
 437:Core/Src/M365_Dashboard.c **** 			if(olddataposition!=message[5]){
 438:Core/Src/M365_Dashboard.c **** 				memcpy(target,source+6,packetsize);
 439:Core/Src/M365_Dashboard.c **** 				decr_and_flash(enc,flashstartaddress,ui16_update_size,packetsize);
 440:Core/Src/M365_Dashboard.c **** 				flashstartaddress+=packetsize;
 441:Core/Src/M365_Dashboard.c **** 
 442:Core/Src/M365_Dashboard.c **** 		  		sprintf_(buffer, "%d, %d, %d\r\n", flashstartaddress,packetsize, olddataposition);
 443:Core/Src/M365_Dashboard.c **** 		  		HAL_UART_Transmit_DMA(&huart3, (uint8_t *)&buffer, strlen(buffer));
 444:Core/Src/M365_Dashboard.c **** 
 445:Core/Src/M365_Dashboard.c **** 			}
 446:Core/Src/M365_Dashboard.c **** 			olddataposition=message[5];
 447:Core/Src/M365_Dashboard.c **** 
 448:Core/Src/M365_Dashboard.c **** 
 449:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[msglength] = 2;
 450:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[receiver]=message[receiver]+3;
ARM GAS  /tmp/ccEbWydE.s 			page 74


 451:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[command]=0x08;
 452:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[startAddress] =0;
 453:Core/Src/M365_Dashboard.c **** 			addCRC((uint8_t*)ui8_tx_buffer, ui8_tx_buffer[msglength]+6);
 454:Core/Src/M365_Dashboard.c **** 			HAL_HalfDuplex_EnableTransmitter(&huart1);
 455:Core/Src/M365_Dashboard.c **** 			HAL_UART_Transmit_DMA(&huart1, (uint8_t*)ui8_tx_buffer, ui8_tx_buffer[msglength]+6);
 456:Core/Src/M365_Dashboard.c **** 			}
 457:Core/Src/M365_Dashboard.c **** 			break;
 458:Core/Src/M365_Dashboard.c **** 
 459:Core/Src/M365_Dashboard.c **** 		case 0x09: {
 460:Core/Src/M365_Dashboard.c **** 			//55	AA	6	20	9	0	91	9E	CF	FF	D3	FC
 461:Core/Src/M365_Dashboard.c **** 			//55	AA	2	23	9	0	D1	FF
 462:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[msglength] = 2;
 463:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[receiver]=message[receiver]+3;
 464:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[command]=0x09;
 465:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[startAddress] =0;
 466:Core/Src/M365_Dashboard.c **** 			addCRC((uint8_t*)ui8_tx_buffer, ui8_tx_buffer[msglength]+6);
 467:Core/Src/M365_Dashboard.c **** 			HAL_HalfDuplex_EnableTransmitter(&huart1);
 468:Core/Src/M365_Dashboard.c **** 			HAL_UART_Transmit_DMA(&huart1, (uint8_t*)ui8_tx_buffer, ui8_tx_buffer[msglength]+6);
 469:Core/Src/M365_Dashboard.c **** 			}
 470:Core/Src/M365_Dashboard.c **** 			break;
 471:Core/Src/M365_Dashboard.c **** 
 472:Core/Src/M365_Dashboard.c **** 		default: {
 473:Core/Src/M365_Dashboard.c **** 		//	MS->i_q_setpoint = 0; // stop motor for safety reason
 474:Core/Src/M365_Dashboard.c **** 			}
 475:Core/Src/M365_Dashboard.c **** 			break;
 955              		.loc 3 475 4
 956 007e A7E2     		b	.L64
 957              	.L37:
 215:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[msglength]=0x08;
 958              		.loc 3 215 20
 959 0080 A54B     		ldr	r3, .L68
 960 0082 0022     		movs	r2, #0
 961 0084 5A71     		strb	r2, [r3, #5]
 216:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[receiver]=0x21;
 962              		.loc 3 216 28
 963 0086 A44B     		ldr	r3, .L68
 964 0088 0822     		movs	r2, #8
 965 008a 9A70     		strb	r2, [r3, #2]
 217:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[command]=message[command];
 966              		.loc 3 217 27
 967 008c A24B     		ldr	r3, .L68
 968 008e 2122     		movs	r2, #33
 969 0090 DA70     		strb	r2, [r3, #3]
 218:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[Speed]=p_M365State->speed;
 970              		.loc 3 218 26
 971 0092 BB68     		ldr	r3, [r7, #8]
 972 0094 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 973 0096 A04B     		ldr	r3, .L68
 974 0098 1A71     		strb	r2, [r3, #4]
 219:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[Mode]=p_M365State->mode;
 975              		.loc 3 219 36
 976 009a FB68     		ldr	r3, [r7, #12]
 977 009c 1B69     		ldr	r3, [r3, #16]
 219:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[Mode]=p_M365State->mode;
 978              		.loc 3 219 24
 979 009e DAB2     		uxtb	r2, r3
 980 00a0 9D4B     		ldr	r3, .L68
ARM GAS  /tmp/ccEbWydE.s 			page 75


 981 00a2 9A72     		strb	r2, [r3, #10]
 220:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[SOC]=map(p_M365State->battery_voltage,BATTERYVOLTAGE_MIN,BATTERYVOLTAGE_MAX,0,96);
 982              		.loc 3 220 35
 983 00a4 FB68     		ldr	r3, [r7, #12]
 984 00a6 93F90930 		ldrsb	r3, [r3, #9]
 985 00aa DAB2     		uxtb	r2, r3
 220:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[SOC]=map(p_M365State->battery_voltage,BATTERYVOLTAGE_MIN,BATTERYVOLTAGE_MAX,0,96);
 986              		.loc 3 220 23
 987 00ac 9A4B     		ldr	r3, .L68
 988 00ae 9A71     		strb	r2, [r3, #6]
 221:Core/Src/M365_Dashboard.c **** 			if(p_M365State->light)ui8_tx_buffer[Light]=64;
 989              		.loc 3 221 23
 990 00b0 FB68     		ldr	r3, [r7, #12]
 991 00b2 1868     		ldr	r0, [r3]
 992 00b4 6023     		movs	r3, #96
 993 00b6 0093     		str	r3, [sp]
 994 00b8 0023     		movs	r3, #0
 995 00ba 4AF21042 		movw	r2, #42000
 996 00be 47F23051 		movw	r1, #30000
 997 00c2 FFF7FEFF 		bl	map
 998 00c6 0346     		mov	r3, r0
 221:Core/Src/M365_Dashboard.c **** 			if(p_M365State->light)ui8_tx_buffer[Light]=64;
 999              		.loc 3 221 22
 1000 00c8 DAB2     		uxtb	r2, r3
 1001 00ca 934B     		ldr	r3, .L68
 1002 00cc DA71     		strb	r2, [r3, #7]
 222:Core/Src/M365_Dashboard.c **** 			else ui8_tx_buffer[Light]=0;
 1003              		.loc 3 222 18
 1004 00ce FB68     		ldr	r3, [r7, #12]
 1005 00d0 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 222:Core/Src/M365_Dashboard.c **** 			else ui8_tx_buffer[Light]=0;
 1006              		.loc 3 222 6
 1007 00d2 002B     		cmp	r3, #0
 1008 00d4 03D0     		beq	.L46
 222:Core/Src/M365_Dashboard.c **** 			else ui8_tx_buffer[Light]=0;
 1009              		.loc 3 222 46 discriminator 1
 1010 00d6 904B     		ldr	r3, .L68
 1011 00d8 4022     		movs	r2, #64
 1012 00da 1A72     		strb	r2, [r3, #8]
 1013 00dc 02E0     		b	.L47
 1014              	.L46:
 223:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[Beep] = p_M365State->beep;
 1015              		.loc 3 223 29
 1016 00de 8E4B     		ldr	r3, .L68
 1017 00e0 0022     		movs	r2, #0
 1018 00e2 1A72     		strb	r2, [r3, #8]
 1019              	.L47:
 224:Core/Src/M365_Dashboard.c ****       ui8_tx_buffer[errorcode] = p_M365State->error_state;
 1020              		.loc 3 224 37
 1021 00e4 FB68     		ldr	r3, [r7, #12]
 1022 00e6 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 1023 00e8 1A46     		mov	r2, r3
 224:Core/Src/M365_Dashboard.c ****       ui8_tx_buffer[errorcode] = p_M365State->error_state;
 1024              		.loc 3 224 24
 1025 00ea 8B4B     		ldr	r3, .L68
 1026 00ec 5A72     		strb	r2, [r3, #9]
 225:Core/Src/M365_Dashboard.c **** 
ARM GAS  /tmp/ccEbWydE.s 			page 76


 1027              		.loc 3 225 45
 1028 00ee FB68     		ldr	r3, [r7, #12]
 1029 00f0 93F91D30 		ldrsb	r3, [r3, #29]
 1030 00f4 DAB2     		uxtb	r2, r3
 225:Core/Src/M365_Dashboard.c **** 
 1031              		.loc 3 225 32
 1032 00f6 884B     		ldr	r3, .L68
 1033 00f8 DA72     		strb	r2, [r3, #11]
 227:Core/Src/M365_Dashboard.c **** 			HAL_HalfDuplex_EnableTransmitter(&huart1);
 1034              		.loc 3 227 49
 1035 00fa 874B     		ldr	r3, .L68
 1036 00fc 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 227:Core/Src/M365_Dashboard.c **** 			HAL_HalfDuplex_EnableTransmitter(&huart1);
 1037              		.loc 3 227 4
 1038 00fe 0633     		adds	r3, r3, #6
 1039 0100 DBB2     		uxtb	r3, r3
 1040 0102 1946     		mov	r1, r3
 1041 0104 8448     		ldr	r0, .L68
 1042 0106 FFF7FEFF 		bl	addCRC
 228:Core/Src/M365_Dashboard.c **** 			HAL_UART_Transmit_DMA(&huart1, (uint8_t*)ui8_tx_buffer, ui8_tx_buffer[msglength]+6);
 1043              		.loc 3 228 4
 1044 010a 07F12403 		add	r3, r7, #36
 1045 010e 1846     		mov	r0, r3
 1046 0110 FFF7FEFF 		bl	HAL_HalfDuplex_EnableTransmitter
 229:Core/Src/M365_Dashboard.c **** 			if(p_M365State->beep&&ui8_tx_buffer[Beep])p_M365State->beep = 0;
 1047              		.loc 3 229 73
 1048 0114 804B     		ldr	r3, .L68
 1049 0116 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1050 0118 9BB2     		uxth	r3, r3
 229:Core/Src/M365_Dashboard.c **** 			if(p_M365State->beep&&ui8_tx_buffer[Beep])p_M365State->beep = 0;
 1051              		.loc 3 229 4
 1052 011a 0633     		adds	r3, r3, #6
 1053 011c 9AB2     		uxth	r2, r3
 1054 011e 07F12403 		add	r3, r7, #36
 1055 0122 7D49     		ldr	r1, .L68
 1056 0124 1846     		mov	r0, r3
 1057 0126 FFF7FEFF 		bl	HAL_UART_Transmit_DMA
 230:Core/Src/M365_Dashboard.c **** 
 1058              		.loc 3 230 18
 1059 012a FB68     		ldr	r3, [r7, #12]
 1060 012c DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 230:Core/Src/M365_Dashboard.c **** 
 1061              		.loc 3 230 6
 1062 012e 002B     		cmp	r3, #0
 1063 0130 00F05082 		beq	.L65
 230:Core/Src/M365_Dashboard.c **** 
 1064              		.loc 3 230 39 discriminator 1
 1065 0134 784B     		ldr	r3, .L68
 1066 0136 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 230:Core/Src/M365_Dashboard.c **** 
 1067              		.loc 3 230 24 discriminator 1
 1068 0138 002B     		cmp	r3, #0
 1069 013a 00F04B82 		beq	.L65
 230:Core/Src/M365_Dashboard.c **** 
 1070              		.loc 3 230 64 discriminator 2
 1071 013e FB68     		ldr	r3, [r7, #12]
 1072 0140 0022     		movs	r2, #0
ARM GAS  /tmp/ccEbWydE.s 			page 77


 1073 0142 DA72     		strb	r2, [r3, #11]
 233:Core/Src/M365_Dashboard.c **** 
 1074              		.loc 3 233 4 discriminator 2
 1075 0144 46E2     		b	.L65
 1076              	.L35:
 237:Core/Src/M365_Dashboard.c ****         p_M365State->error_state = brake;
 1077              		.loc 3 237 15
 1078 0146 BB68     		ldr	r3, [r7, #8]
 1079 0148 0833     		adds	r3, r3, #8
 1080 014a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 237:Core/Src/M365_Dashboard.c ****         p_M365State->error_state = brake;
 1081              		.loc 3 237 7
 1082 014c 182B     		cmp	r3, #24
 1083 014e 03D8     		bhi	.L49
 238:Core/Src/M365_Dashboard.c ****       } else if(p_M365State->error_state == brake) {
 1084              		.loc 3 238 34
 1085 0150 FB68     		ldr	r3, [r7, #12]
 1086 0152 0F22     		movs	r2, #15
 1087 0154 5A77     		strb	r2, [r3, #29]
 1088 0156 07E0     		b	.L50
 1089              	.L49:
 239:Core/Src/M365_Dashboard.c ****         p_M365State->error_state = none;
 1090              		.loc 3 239 28
 1091 0158 FB68     		ldr	r3, [r7, #12]
 1092 015a 93F91D30 		ldrsb	r3, [r3, #29]
 239:Core/Src/M365_Dashboard.c ****         p_M365State->error_state = none;
 1093              		.loc 3 239 16
 1094 015e 0F2B     		cmp	r3, #15
 1095 0160 02D1     		bne	.L50
 240:Core/Src/M365_Dashboard.c ****       }
 1096              		.loc 3 240 34
 1097 0162 FB68     		ldr	r3, [r7, #12]
 1098 0164 0022     		movs	r2, #0
 1099 0166 5A77     		strb	r2, [r3, #29]
 1100              	.L50:
 243:Core/Src/M365_Dashboard.c **** 				if (p_M365State->speed > 2) {
 1101              		.loc 3 243 19
 1102 0168 BB68     		ldr	r3, [r7, #8]
 1103 016a 0833     		adds	r3, r3, #8
 1104 016c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 243:Core/Src/M365_Dashboard.c **** 				if (p_M365State->speed > 2) {
 1105              		.loc 3 243 8
 1106 016e 1846     		mov	r0, r3
 243:Core/Src/M365_Dashboard.c **** 				if (p_M365State->speed > 2) {
 1107              		.loc 3 243 65
 1108 0170 FB68     		ldr	r3, [r7, #12]
 1109 0172 B3F90630 		ldrsh	r3, [r3, #6]
 243:Core/Src/M365_Dashboard.c **** 				if (p_M365State->speed > 2) {
 1110              		.loc 3 243 8
 1111 0176 0093     		str	r3, [sp]
 1112 0178 0023     		movs	r3, #0
 1113 017a BE22     		movs	r2, #190
 1114 017c 3221     		movs	r1, #50
 1115 017e FFF7FEFF 		bl	map
 1116 0182 0346     		mov	r3, r0
 243:Core/Src/M365_Dashboard.c **** 				if (p_M365State->speed > 2) {
 1117              		.loc 3 243 7
ARM GAS  /tmp/ccEbWydE.s 			page 78


 1118 0184 002B     		cmp	r3, #0
 1119 0186 2EDD     		ble	.L51
 244:Core/Src/M365_Dashboard.c **** 
 1120              		.loc 3 244 20
 1121 0188 FB68     		ldr	r3, [r7, #12]
 1122 018a 1B69     		ldr	r3, [r3, #16]
 244:Core/Src/M365_Dashboard.c **** 
 1123              		.loc 3 244 8
 1124 018c 022B     		cmp	r3, #2
 1125 018e 23D9     		bls	.L52
 246:Core/Src/M365_Dashboard.c **** 
 1126              		.loc 3 246 52
 1127 0190 BB68     		ldr	r3, [r7, #8]
 1128 0192 0833     		adds	r3, r3, #8
 1129 0194 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 246:Core/Src/M365_Dashboard.c **** 
 1130              		.loc 3 246 41
 1131 0196 1846     		mov	r0, r3
 246:Core/Src/M365_Dashboard.c **** 
 1132              		.loc 3 246 98
 1133 0198 FB68     		ldr	r3, [r7, #12]
 1134 019a B3F90630 		ldrsh	r3, [r3, #6]
 246:Core/Src/M365_Dashboard.c **** 
 1135              		.loc 3 246 41
 1136 019e 0093     		str	r3, [sp]
 1137 01a0 0023     		movs	r3, #0
 1138 01a2 BE22     		movs	r2, #190
 1139 01a4 3221     		movs	r1, #50
 1140 01a6 FFF7FEFF 		bl	map
 1141 01aa 0246     		mov	r2, r0
 246:Core/Src/M365_Dashboard.c **** 
 1142              		.loc 3 246 39
 1143 01ac FB68     		ldr	r3, [r7, #12]
 1144 01ae DA60     		str	r2, [r3, #12]
 249:Core/Src/M365_Dashboard.c **** 
 1145              		.loc 3 249 47
 1146 01b0 FB68     		ldr	r3, [r7, #12]
 1147 01b2 1868     		ldr	r0, [r3]
 1148 01b4 FB68     		ldr	r3, [r7, #12]
 1149 01b6 DB68     		ldr	r3, [r3, #12]
 1150 01b8 0022     		movs	r2, #0
 1151 01ba 0092     		str	r2, [sp]
 1152 01bc 4AF21042 		movw	r2, #42000
 1153 01c0 4AF22801 		movw	r1, #41000
 1154 01c4 FFF7FEFF 		bl	map
 1155 01c8 0346     		mov	r3, r0
 249:Core/Src/M365_Dashboard.c **** 
 1156              		.loc 3 249 46
 1157 01ca 5A42     		rsbs	r2, r3, #0
 249:Core/Src/M365_Dashboard.c **** 
 1158              		.loc 3 249 44
 1159 01cc FB68     		ldr	r3, [r7, #12]
 1160 01ce DA60     		str	r2, [r3, #12]
 251:Core/Src/M365_Dashboard.c ****         } else {
 1161              		.loc 3 251 32
 1162 01d0 FB68     		ldr	r3, [r7, #12]
 1163 01d2 0122     		movs	r2, #1
ARM GAS  /tmp/ccEbWydE.s 			page 79


 1164 01d4 1A75     		strb	r2, [r3, #20]
 260:Core/Src/M365_Dashboard.c **** 
 1165              		.loc 3 260 5
 1166 01d6 20E2     		b	.L34
 1167              	.L52:
 253:Core/Src/M365_Dashboard.c ****           p_M365State->brake_active = false;
 1168              		.loc 3 253 44
 1169 01d8 FB68     		ldr	r3, [r7, #12]
 1170 01da 0022     		movs	r2, #0
 1171 01dc DA60     		str	r2, [r3, #12]
 254:Core/Src/M365_Dashboard.c **** 				}
 1172              		.loc 3 254 37
 1173 01de FB68     		ldr	r3, [r7, #12]
 1174 01e0 0022     		movs	r2, #0
 1175 01e2 1A75     		strb	r2, [r3, #20]
 260:Core/Src/M365_Dashboard.c **** 
 1176              		.loc 3 260 5
 1177 01e4 19E2     		b	.L34
 1178              	.L51:
 257:Core/Src/M365_Dashboard.c ****         p_M365State->brake_active = false;
 1179              		.loc 3 257 51
 1180 01e6 BB68     		ldr	r3, [r7, #8]
 1181 01e8 0733     		adds	r3, r3, #7
 1182 01ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 257:Core/Src/M365_Dashboard.c ****         p_M365State->brake_active = false;
 1183              		.loc 3 257 40
 1184 01ec 1846     		mov	r0, r3
 257:Core/Src/M365_Dashboard.c ****         p_M365State->brake_active = false;
 1185              		.loc 3 257 106
 1186 01ee FB68     		ldr	r3, [r7, #12]
 1187 01f0 B3F90430 		ldrsh	r3, [r3, #4]
 257:Core/Src/M365_Dashboard.c ****         p_M365State->brake_active = false;
 1188              		.loc 3 257 40
 1189 01f4 0093     		str	r3, [sp]
 1190 01f6 0023     		movs	r3, #0
 1191 01f8 AF22     		movs	r2, #175
 1192 01fa 2D21     		movs	r1, #45
 1193 01fc FFF7FEFF 		bl	map
 1194 0200 0246     		mov	r2, r0
 257:Core/Src/M365_Dashboard.c ****         p_M365State->brake_active = false;
 1195              		.loc 3 257 38
 1196 0202 FB68     		ldr	r3, [r7, #12]
 1197 0204 DA60     		str	r2, [r3, #12]
 258:Core/Src/M365_Dashboard.c ****       }
 1198              		.loc 3 258 35
 1199 0206 FB68     		ldr	r3, [r7, #12]
 1200 0208 0022     		movs	r2, #0
 1201 020a 1A75     		strb	r2, [r3, #20]
 260:Core/Src/M365_Dashboard.c **** 
 1202              		.loc 3 260 5
 1203 020c 05E2     		b	.L34
 1204              	.L45:
 266:Core/Src/M365_Dashboard.c **** 				if(p_M365State->speed > 2) p_M365State->i_q_setpoint_target = -map(message[9],BRAKEOFFSET,BRAKE
 1205              		.loc 3 266 18
 1206 020e BB68     		ldr	r3, [r7, #8]
 1207 0210 0933     		adds	r3, r3, #9
 1208 0212 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/ccEbWydE.s 			page 80


 266:Core/Src/M365_Dashboard.c **** 				if(p_M365State->speed > 2) p_M365State->i_q_setpoint_target = -map(message[9],BRAKEOFFSET,BRAKE
 1209              		.loc 3 266 7
 1210 0214 1846     		mov	r0, r3
 1211 0216 42F21073 		movw	r3, #10000
 1212 021a 0093     		str	r3, [sp]
 1213 021c 0023     		movs	r3, #0
 1214 021e BE22     		movs	r2, #190
 1215 0220 3221     		movs	r1, #50
 1216 0222 FFF7FEFF 		bl	map
 1217 0226 0346     		mov	r3, r0
 266:Core/Src/M365_Dashboard.c **** 				if(p_M365State->speed > 2) p_M365State->i_q_setpoint_target = -map(message[9],BRAKEOFFSET,BRAKE
 1218              		.loc 3 266 6
 1219 0228 002B     		cmp	r3, #0
 1220 022a 18DD     		ble	.L54
 267:Core/Src/M365_Dashboard.c **** 				else p_M365State->i_q_setpoint_target = 0;
 1221              		.loc 3 267 19
 1222 022c FB68     		ldr	r3, [r7, #12]
 1223 022e 1B69     		ldr	r3, [r3, #16]
 267:Core/Src/M365_Dashboard.c **** 				else p_M365State->i_q_setpoint_target = 0;
 1224              		.loc 3 267 7
 1225 0230 022B     		cmp	r3, #2
 1226 0232 10D9     		bls	.L55
 267:Core/Src/M365_Dashboard.c **** 				else p_M365State->i_q_setpoint_target = 0;
 1227              		.loc 3 267 79 discriminator 1
 1228 0234 BB68     		ldr	r3, [r7, #8]
 1229 0236 0933     		adds	r3, r3, #9
 1230 0238 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 267:Core/Src/M365_Dashboard.c **** 				else p_M365State->i_q_setpoint_target = 0;
 1231              		.loc 3 267 68 discriminator 1
 1232 023a 1846     		mov	r0, r3
 1233 023c 42F21073 		movw	r3, #10000
 1234 0240 0093     		str	r3, [sp]
 1235 0242 0023     		movs	r3, #0
 1236 0244 BE22     		movs	r2, #190
 1237 0246 3221     		movs	r1, #50
 1238 0248 FFF7FEFF 		bl	map
 1239 024c 0346     		mov	r3, r0
 267:Core/Src/M365_Dashboard.c **** 				else p_M365State->i_q_setpoint_target = 0;
 1240              		.loc 3 267 67 discriminator 1
 1241 024e 5A42     		rsbs	r2, r3, #0
 267:Core/Src/M365_Dashboard.c **** 				else p_M365State->i_q_setpoint_target = 0;
 1242              		.loc 3 267 65 discriminator 1
 1243 0250 FB68     		ldr	r3, [r7, #12]
 1244 0252 DA60     		str	r2, [r3, #12]
 1245 0254 13E0     		b	.L56
 1246              	.L55:
 268:Core/Src/M365_Dashboard.c **** 				}
 1247              		.loc 3 268 43
 1248 0256 FB68     		ldr	r3, [r7, #12]
 1249 0258 0022     		movs	r2, #0
 1250 025a DA60     		str	r2, [r3, #12]
 1251 025c 0FE0     		b	.L56
 1252              	.L54:
 271:Core/Src/M365_Dashboard.c **** 				}
 1253              		.loc 3 271 51
 1254 025e BB68     		ldr	r3, [r7, #8]
 1255 0260 0833     		adds	r3, r3, #8
ARM GAS  /tmp/ccEbWydE.s 			page 81


 1256 0262 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 271:Core/Src/M365_Dashboard.c **** 				}
 1257              		.loc 3 271 40
 1258 0264 1846     		mov	r0, r3
 271:Core/Src/M365_Dashboard.c **** 				}
 1259              		.loc 3 271 95
 1260 0266 FB68     		ldr	r3, [r7, #12]
 1261 0268 B3F90430 		ldrsh	r3, [r3, #4]
 271:Core/Src/M365_Dashboard.c **** 				}
 1262              		.loc 3 271 40
 1263 026c 0093     		str	r3, [sp]
 1264 026e 0023     		movs	r3, #0
 1265 0270 AF22     		movs	r2, #175
 1266 0272 2D21     		movs	r1, #45
 1267 0274 FFF7FEFF 		bl	map
 1268 0278 0246     		mov	r2, r0
 271:Core/Src/M365_Dashboard.c **** 				}
 1269              		.loc 3 271 38
 1270 027a FB68     		ldr	r3, [r7, #12]
 1271 027c DA60     		str	r2, [r3, #12]
 1272              	.L56:
 275:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[receiver]=message[receiver]+3;
 1273              		.loc 3 275 36
 1274 027e BB68     		ldr	r3, [r7, #8]
 1275 0280 0633     		adds	r3, r3, #6
 1276 0282 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 275:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[receiver]=message[receiver]+3;
 1277              		.loc 3 275 51
 1278 0284 0233     		adds	r3, r3, #2
 1279 0286 DAB2     		uxtb	r2, r3
 275:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[receiver]=message[receiver]+3;
 1280              		.loc 3 275 28
 1281 0288 234B     		ldr	r3, .L68
 1282 028a 9A70     		strb	r2, [r3, #2]
 276:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[command]=0x01;
 1283              		.loc 3 276 35
 1284 028c BB68     		ldr	r3, [r7, #8]
 1285 028e 0333     		adds	r3, r3, #3
 1286 0290 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 276:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[command]=0x01;
 1287              		.loc 3 276 45
 1288 0292 0333     		adds	r3, r3, #3
 1289 0294 DAB2     		uxtb	r2, r3
 276:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[command]=0x01;
 1290              		.loc 3 276 27
 1291 0296 204B     		ldr	r3, .L68
 1292 0298 DA70     		strb	r2, [r3, #3]
 277:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[startAddress] =message[startAddress];
 1293              		.loc 3 277 26
 1294 029a 1F4B     		ldr	r3, .L68
 1295 029c 0122     		movs	r2, #1
 1296 029e 1A71     		strb	r2, [r3, #4]
 278:Core/Src/M365_Dashboard.c **** 
 1297              		.loc 3 278 32
 1298 02a0 BB68     		ldr	r3, [r7, #8]
 1299 02a2 5A79     		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 1300 02a4 1C4B     		ldr	r3, .L68
ARM GAS  /tmp/ccEbWydE.s 			page 82


 1301 02a6 5A71     		strb	r2, [r3, #5]
 280:Core/Src/M365_Dashboard.c **** 			target = (char *)&ui8_tx_buffer;
 1302              		.loc 3 280 11
 1303 02a8 1C4B     		ldr	r3, .L68+4
 1304 02aa 1D4A     		ldr	r2, .L68+8
 1305 02ac 1A60     		str	r2, [r3]
 281:Core/Src/M365_Dashboard.c **** 			ui8_source_offset = message[startAddress];
 1306              		.loc 3 281 11
 1307 02ae 1D4B     		ldr	r3, .L68+12
 1308 02b0 194A     		ldr	r2, .L68
 1309 02b2 1A60     		str	r2, [r3]
 282:Core/Src/M365_Dashboard.c **** 			ui8_target_offset = 6;
 1310              		.loc 3 282 22
 1311 02b4 BB68     		ldr	r3, [r7, #8]
 1312 02b6 5A79     		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 1313 02b8 1B4B     		ldr	r3, .L68+16
 1314 02ba 1A70     		strb	r2, [r3]
 283:Core/Src/M365_Dashboard.c **** 			memcpy(target+ui8_target_offset,source+ui8_source_offset*2,message[payloadLength]);
 1315              		.loc 3 283 22
 1316 02bc 1B4B     		ldr	r3, .L68+20
 1317 02be 0622     		movs	r2, #6
 1318 02c0 1A70     		strb	r2, [r3]
 284:Core/Src/M365_Dashboard.c **** 			addCRC((uint8_t*)ui8_tx_buffer, ui8_tx_buffer[msglength]+6);
 1319              		.loc 3 284 4
 1320 02c2 184B     		ldr	r3, .L68+12
 1321 02c4 1B68     		ldr	r3, [r3]
 1322 02c6 194A     		ldr	r2, .L68+20
 1323 02c8 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 284:Core/Src/M365_Dashboard.c **** 			addCRC((uint8_t*)ui8_tx_buffer, ui8_tx_buffer[msglength]+6);
 1324              		.loc 3 284 17
 1325 02ca 9818     		adds	r0, r3, r2
 284:Core/Src/M365_Dashboard.c **** 			addCRC((uint8_t*)ui8_tx_buffer, ui8_tx_buffer[msglength]+6);
 1326              		.loc 3 284 4
 1327 02cc 134B     		ldr	r3, .L68+4
 1328 02ce 1B68     		ldr	r3, [r3]
 284:Core/Src/M365_Dashboard.c **** 			addCRC((uint8_t*)ui8_tx_buffer, ui8_tx_buffer[msglength]+6);
 1329              		.loc 3 284 60
 1330 02d0 154A     		ldr	r2, .L68+16
 1331 02d2 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1332 02d4 5200     		lsls	r2, r2, #1
 284:Core/Src/M365_Dashboard.c **** 			addCRC((uint8_t*)ui8_tx_buffer, ui8_tx_buffer[msglength]+6);
 1333              		.loc 3 284 42
 1334 02d6 9918     		adds	r1, r3, r2
 284:Core/Src/M365_Dashboard.c **** 			addCRC((uint8_t*)ui8_tx_buffer, ui8_tx_buffer[msglength]+6);
 1335              		.loc 3 284 70
 1336 02d8 BB68     		ldr	r3, [r7, #8]
 1337 02da 0633     		adds	r3, r3, #6
 1338 02dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 284:Core/Src/M365_Dashboard.c **** 			addCRC((uint8_t*)ui8_tx_buffer, ui8_tx_buffer[msglength]+6);
 1339              		.loc 3 284 4
 1340 02de 1A46     		mov	r2, r3
 1341 02e0 FFF7FEFF 		bl	memcpy
 285:Core/Src/M365_Dashboard.c **** 			HAL_HalfDuplex_EnableTransmitter(&huart1);
 1342              		.loc 3 285 49
 1343 02e4 0C4B     		ldr	r3, .L68
 1344 02e6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 285:Core/Src/M365_Dashboard.c **** 			HAL_HalfDuplex_EnableTransmitter(&huart1);
ARM GAS  /tmp/ccEbWydE.s 			page 83


 1345              		.loc 3 285 4
 1346 02e8 0633     		adds	r3, r3, #6
 1347 02ea DBB2     		uxtb	r3, r3
 1348 02ec 1946     		mov	r1, r3
 1349 02ee 0A48     		ldr	r0, .L68
 1350 02f0 FFF7FEFF 		bl	addCRC
 286:Core/Src/M365_Dashboard.c **** 			HAL_UART_Transmit_DMA(&huart1, (uint8_t*)ui8_tx_buffer, ui8_tx_buffer[msglength]+6);
 1351              		.loc 3 286 4
 1352 02f4 07F12403 		add	r3, r7, #36
 1353 02f8 1846     		mov	r0, r3
 1354 02fa FFF7FEFF 		bl	HAL_HalfDuplex_EnableTransmitter
 287:Core/Src/M365_Dashboard.c **** 			}
 1355              		.loc 3 287 73
 1356 02fe 064B     		ldr	r3, .L68
 1357 0300 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1358 0302 9BB2     		uxth	r3, r3
 287:Core/Src/M365_Dashboard.c **** 			}
 1359              		.loc 3 287 4
 1360 0304 0633     		adds	r3, r3, #6
 1361 0306 9AB2     		uxth	r2, r3
 1362 0308 07F12403 		add	r3, r7, #36
 1363 030c 0249     		ldr	r1, .L68
 1364 030e 1846     		mov	r0, r3
 1365 0310 FFF7FEFF 		bl	HAL_UART_Transmit_DMA
 289:Core/Src/M365_Dashboard.c **** 
 1366              		.loc 3 289 4
 1367 0314 81E1     		b	.L34
 1368              	.L69:
 1369 0316 00BF     		.align	2
 1370              	.L68:
 1371 0318 00000000 		.word	ui8_tx_buffer
 1372 031c 00000000 		.word	source
 1373 0320 00000000 		.word	MT
 1374 0324 00000000 		.word	target
 1375 0328 00000000 		.word	ui8_source_offset
 1376 032c 00000000 		.word	ui8_target_offset
 1377              	.L44:
 294:Core/Src/M365_Dashboard.c **** 			target = (char *)&MT;
 1378              		.loc 3 294 11
 1379 0330 A94A     		ldr	r2, .L70
 1380 0332 BB68     		ldr	r3, [r7, #8]
 1381 0334 1360     		str	r3, [r2]
 295:Core/Src/M365_Dashboard.c **** 			ui8_target_offset = message[startAddress];
 1382              		.loc 3 295 11
 1383 0336 A94B     		ldr	r3, .L70+4
 1384 0338 A94A     		ldr	r2, .L70+8
 1385 033a 1A60     		str	r2, [r3]
 296:Core/Src/M365_Dashboard.c **** 
 1386              		.loc 3 296 22
 1387 033c BB68     		ldr	r3, [r7, #8]
 1388 033e 5A79     		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 1389 0340 A84B     		ldr	r3, .L70+12
 1390 0342 1A70     		strb	r2, [r3]
 298:Core/Src/M365_Dashboard.c **** 			if (message[payloadLength]==1){
 1391              		.loc 3 298 4
 1392 0344 A54B     		ldr	r3, .L70+4
 1393 0346 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccEbWydE.s 			page 84


 1394 0348 A64A     		ldr	r2, .L70+12
 1395 034a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 298:Core/Src/M365_Dashboard.c **** 			if (message[payloadLength]==1){
 1396              		.loc 3 298 17
 1397 034c 1344     		add	r3, r3, r2
 298:Core/Src/M365_Dashboard.c **** 			if (message[payloadLength]==1){
 1398              		.loc 3 298 4
 1399 034e A24A     		ldr	r2, .L70
 1400 0350 1268     		ldr	r2, [r2]
 298:Core/Src/M365_Dashboard.c **** 			if (message[payloadLength]==1){
 1401              		.loc 3 298 42
 1402 0352 0632     		adds	r2, r2, #6
 1403 0354 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 298:Core/Src/M365_Dashboard.c **** 			if (message[payloadLength]==1){
 1404              		.loc 3 298 4
 1405 0356 1A70     		strb	r2, [r3]
 299:Core/Src/M365_Dashboard.c **** 				MT.ESC_status_2= 0x0802;
 1406              		.loc 3 299 15
 1407 0358 BB68     		ldr	r3, [r7, #8]
 1408 035a 0633     		adds	r3, r3, #6
 1409 035c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 299:Core/Src/M365_Dashboard.c **** 				MT.ESC_status_2= 0x0802;
 1410              		.loc 3 299 7
 1411 035e 012B     		cmp	r3, #1
 1412 0360 40F05A81 		bne	.L66
 1413              	.LBB12:
 300:Core/Src/M365_Dashboard.c **** 				HAL_FLASH_Unlock();
 1414              		.loc 3 300 20
 1415 0364 9E4B     		ldr	r3, .L70+8
 1416 0366 0022     		movs	r2, #0
 1417 0368 42F00202 		orr	r2, r2, #2
 1418 036c 83F86421 		strb	r2, [r3, #356]
 1419 0370 0022     		movs	r2, #0
 1420 0372 42F00802 		orr	r2, r2, #8
 1421 0376 83F86521 		strb	r2, [r3, #357]
 301:Core/Src/M365_Dashboard.c **** 				uint32_t PAGEError = 0;
 1422              		.loc 3 301 5
 1423 037a FFF7FEFF 		bl	HAL_FLASH_Unlock
 302:Core/Src/M365_Dashboard.c **** 				/*Variable used for Erase procedure*/
 1424              		.loc 3 302 14
 1425 037e 0023     		movs	r3, #0
 1426 0380 7B61     		str	r3, [r7, #20]
 309:Core/Src/M365_Dashboard.c **** 				  EraseInitStruct.PageAddress = flashstartaddress;
 1427              		.loc 3 309 35
 1428 0382 994B     		ldr	r3, .L70+16
 1429 0384 0022     		movs	r2, #0
 1430 0386 1A60     		str	r2, [r3]
 310:Core/Src/M365_Dashboard.c **** 				  EraseInitStruct.NbPages     = 29;
 1431              		.loc 3 310 35
 1432 0388 984B     		ldr	r3, .L70+20
 1433 038a 1B68     		ldr	r3, [r3]
 1434 038c 964A     		ldr	r2, .L70+16
 1435 038e 9360     		str	r3, [r2, #8]
 311:Core/Src/M365_Dashboard.c **** 
 1436              		.loc 3 311 35
 1437 0390 954B     		ldr	r3, .L70+16
 1438 0392 1D22     		movs	r2, #29
ARM GAS  /tmp/ccEbWydE.s 			page 85


 1439 0394 DA60     		str	r2, [r3, #12]
 313:Core/Src/M365_Dashboard.c **** 				  {
 1440              		.loc 3 313 11
 1441 0396 07F11403 		add	r3, r7, #20
 1442 039a 1946     		mov	r1, r3
 1443 039c 9248     		ldr	r0, .L70+16
 1444 039e FFF7FEFF 		bl	HAL_FLASHEx_Erase
 1445 03a2 0346     		mov	r3, r0
 313:Core/Src/M365_Dashboard.c **** 				  {
 1446              		.loc 3 313 10
 1447 03a4 002B     		cmp	r3, #0
 1448 03a6 00D0     		beq	.L58
 1449              	.L59:
 322:Core/Src/M365_Dashboard.c **** 				    {
 1450              		.loc 3 322 15 discriminator 2
 1451 03a8 FEE7     		b	.L59
 1452              	.L58:
 328:Core/Src/M365_Dashboard.c **** 			}
 1453              		.loc 3 328 7
 1454 03aa FFF7FEFF 		bl	HAL_FLASH_Lock
 1455              	.LBE12:
 332:Core/Src/M365_Dashboard.c **** 
 1456              		.loc 3 332 4
 1457 03ae 33E1     		b	.L66
 1458              	.L39:
 1459              	.LBB13:
 335:Core/Src/M365_Dashboard.c **** 
 1460              		.loc 3 335 4
 1461 03b0 FFF7FEFF 		bl	HAL_FLASH_Unlock
 337:Core/Src/M365_Dashboard.c **** 							/*Variable used for Erase procedure*/
 1462              		.loc 3 337 17
 1463 03b4 0023     		movs	r3, #0
 1464 03b6 3B61     		str	r3, [r7, #16]
 381:Core/Src/M365_Dashboard.c **** 							  EraseInitStruct.PageAddress = updateflagaddress;
 1465              		.loc 3 381 38
 1466 03b8 8D4B     		ldr	r3, .L70+24
 1467 03ba 0022     		movs	r2, #0
 1468 03bc 1A60     		str	r2, [r3]
 382:Core/Src/M365_Dashboard.c **** 							  EraseInitStruct.NbPages     = 1;
 1469              		.loc 3 382 38
 1470 03be 8D4B     		ldr	r3, .L70+28
 1471 03c0 1B68     		ldr	r3, [r3]
 1472 03c2 8B4A     		ldr	r2, .L70+24
 1473 03c4 9360     		str	r3, [r2, #8]
 383:Core/Src/M365_Dashboard.c **** 
 1474              		.loc 3 383 38
 1475 03c6 8A4B     		ldr	r3, .L70+24
 1476 03c8 0122     		movs	r2, #1
 1477 03ca DA60     		str	r2, [r3, #12]
 385:Core/Src/M365_Dashboard.c **** 							  {
 1478              		.loc 3 385 14
 1479 03cc 07F11003 		add	r3, r7, #16
 1480 03d0 1946     		mov	r1, r3
 1481 03d2 8748     		ldr	r0, .L70+24
 1482 03d4 FFF7FEFF 		bl	HAL_FLASHEx_Erase
 1483 03d8 0346     		mov	r3, r0
 385:Core/Src/M365_Dashboard.c **** 							  {
ARM GAS  /tmp/ccEbWydE.s 			page 86


 1484              		.loc 3 385 13
 1485 03da 002B     		cmp	r3, #0
 1486 03dc 00D0     		beq	.L60
 1487              	.L61:
 394:Core/Src/M365_Dashboard.c **** 							    {
 1488              		.loc 3 394 18 discriminator 4
 1489 03de FEE7     		b	.L61
 1490              	.L60:
 400:Core/Src/M365_Dashboard.c **** 
 1491              		.loc 3 400 10
 1492 03e0 844B     		ldr	r3, .L70+28
 1493 03e2 1968     		ldr	r1, [r3]
 1494 03e4 45F25A02 		movw	r2, #20570
 1495 03e8 4FF00003 		mov	r3, #0
 1496 03ec 0220     		movs	r0, #2
 1497 03ee FFF7FEFF 		bl	HAL_FLASH_Program
 402:Core/Src/M365_Dashboard.c **** 
 1498              		.loc 3 402 10
 1499 03f2 804B     		ldr	r3, .L70+28
 1500 03f4 1B68     		ldr	r3, [r3]
 1501 03f6 191D     		adds	r1, r3, #4
 1502 03f8 4FF00102 		mov	r2, #1
 1503 03fc 4FF00003 		mov	r3, #0
 1504 0400 0220     		movs	r0, #2
 1505 0402 FFF7FEFF 		bl	HAL_FLASH_Program
 404:Core/Src/M365_Dashboard.c **** 
 1506              		.loc 3 404 10
 1507 0406 7B4B     		ldr	r3, .L70+28
 1508 0408 1B68     		ldr	r3, [r3]
 1509 040a 03F10801 		add	r1, r3, #8
 1510 040e 7A4B     		ldr	r3, .L70+32
 1511 0410 1B88     		ldrh	r3, [r3]
 1512 0412 9AB2     		uxth	r2, r3
 1513 0414 4FF00003 		mov	r3, #0
 1514 0418 0220     		movs	r0, #2
 1515 041a FFF7FEFF 		bl	HAL_FLASH_Program
 408:Core/Src/M365_Dashboard.c **** 
 1516              		.loc 3 408 4
 1517 041e FFF7FEFF 		bl	HAL_FLASH_Lock
 410:Core/Src/M365_Dashboard.c **** 
 1518              		.loc 3 410 4
 1519 0422 FFF7FEFF 		bl	__NVIC_SystemReset
 1520              	.L43:
 1521              	.LBE13:
 418:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[msglength] = 2;
 1522              		.loc 3 418 30
 1523 0426 BB68     		ldr	r3, [r7, #8]
 1524 0428 0733     		adds	r3, r3, #7
 1525 042a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 418:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[msglength] = 2;
 1526              		.loc 3 418 33
 1527 042c 1B02     		lsls	r3, r3, #8
 418:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[msglength] = 2;
 1528              		.loc 3 418 36
 1529 042e 1AB2     		sxth	r2, r3
 418:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[msglength] = 2;
 1530              		.loc 3 418 44
ARM GAS  /tmp/ccEbWydE.s 			page 87


 1531 0430 BB68     		ldr	r3, [r7, #8]
 1532 0432 0633     		adds	r3, r3, #6
 1533 0434 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1534 0436 1BB2     		sxth	r3, r3
 418:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[msglength] = 2;
 1535              		.loc 3 418 36
 1536 0438 1343     		orrs	r3, r3, r2
 1537 043a 1BB2     		sxth	r3, r3
 1538 043c 9AB2     		uxth	r2, r3
 418:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[msglength] = 2;
 1539              		.loc 3 418 21
 1540 043e 6E4B     		ldr	r3, .L70+32
 1541 0440 1A80     		strh	r2, [r3]	@ movhi
 419:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[receiver]=message[receiver]+3;
 1542              		.loc 3 419 29
 1543 0442 6E4B     		ldr	r3, .L70+36
 1544 0444 0222     		movs	r2, #2
 1545 0446 9A70     		strb	r2, [r3, #2]
 420:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[command]=0x07;
 1546              		.loc 3 420 35
 1547 0448 BB68     		ldr	r3, [r7, #8]
 1548 044a 0333     		adds	r3, r3, #3
 1549 044c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 420:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[command]=0x07;
 1550              		.loc 3 420 45
 1551 044e 0333     		adds	r3, r3, #3
 1552 0450 DAB2     		uxtb	r2, r3
 420:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[command]=0x07;
 1553              		.loc 3 420 27
 1554 0452 6A4B     		ldr	r3, .L70+36
 1555 0454 DA70     		strb	r2, [r3, #3]
 421:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[startAddress] =0;
 1556              		.loc 3 421 26
 1557 0456 694B     		ldr	r3, .L70+36
 1558 0458 0722     		movs	r2, #7
 1559 045a 1A71     		strb	r2, [r3, #4]
 422:Core/Src/M365_Dashboard.c **** 			addCRC((uint8_t*)ui8_tx_buffer, ui8_tx_buffer[msglength]+6);
 1560              		.loc 3 422 32
 1561 045c 674B     		ldr	r3, .L70+36
 1562 045e 0022     		movs	r2, #0
 1563 0460 5A71     		strb	r2, [r3, #5]
 423:Core/Src/M365_Dashboard.c **** 			HAL_HalfDuplex_EnableTransmitter(&huart1);
 1564              		.loc 3 423 49
 1565 0462 664B     		ldr	r3, .L70+36
 1566 0464 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 423:Core/Src/M365_Dashboard.c **** 			HAL_HalfDuplex_EnableTransmitter(&huart1);
 1567              		.loc 3 423 4
 1568 0466 0633     		adds	r3, r3, #6
 1569 0468 DBB2     		uxtb	r3, r3
 1570 046a 1946     		mov	r1, r3
 1571 046c 6348     		ldr	r0, .L70+36
 1572 046e FFF7FEFF 		bl	addCRC
 424:Core/Src/M365_Dashboard.c **** 			HAL_UART_Transmit_DMA(&huart1, (uint8_t*)ui8_tx_buffer, ui8_tx_buffer[msglength]+6);
 1573              		.loc 3 424 4
 1574 0472 07F12403 		add	r3, r7, #36
 1575 0476 1846     		mov	r0, r3
 1576 0478 FFF7FEFF 		bl	HAL_HalfDuplex_EnableTransmitter
ARM GAS  /tmp/ccEbWydE.s 			page 88


 425:Core/Src/M365_Dashboard.c **** 			}
 1577              		.loc 3 425 73
 1578 047c 5F4B     		ldr	r3, .L70+36
 1579 047e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1580 0480 9BB2     		uxth	r3, r3
 425:Core/Src/M365_Dashboard.c **** 			}
 1581              		.loc 3 425 4
 1582 0482 0633     		adds	r3, r3, #6
 1583 0484 9AB2     		uxth	r2, r3
 1584 0486 07F12403 		add	r3, r7, #36
 1585 048a 5C49     		ldr	r1, .L70+36
 1586 048c 1846     		mov	r0, r3
 1587 048e FFF7FEFF 		bl	HAL_UART_Transmit_DMA
 427:Core/Src/M365_Dashboard.c **** 
 1588              		.loc 3 427 4
 1589 0492 C2E0     		b	.L34
 1590              	.L42:
 1591              	.LBB14:
 434:Core/Src/M365_Dashboard.c **** 			source = (char *)message;
 1592              		.loc 3 434 25
 1593 0494 BB68     		ldr	r3, [r7, #8]
 1594 0496 0233     		adds	r3, r3, #2
 1595 0498 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 434:Core/Src/M365_Dashboard.c **** 			source = (char *)message;
 1596              		.loc 3 434 28
 1597 049a 023B     		subs	r3, r3, #2
 1598 049c DAB2     		uxtb	r2, r3
 434:Core/Src/M365_Dashboard.c **** 			source = (char *)message;
 1599              		.loc 3 434 16
 1600 049e 584B     		ldr	r3, .L70+40
 1601 04a0 1A70     		strb	r2, [r3]
 435:Core/Src/M365_Dashboard.c **** 			target = (char *)&enc;
 1602              		.loc 3 435 11
 1603 04a2 4D4A     		ldr	r2, .L70
 1604 04a4 BB68     		ldr	r3, [r7, #8]
 1605 04a6 1360     		str	r3, [r2]
 436:Core/Src/M365_Dashboard.c **** 			if(olddataposition!=message[5]){
 1606              		.loc 3 436 11
 1607 04a8 4C4B     		ldr	r3, .L70+4
 1608 04aa 564A     		ldr	r2, .L70+44
 1609 04ac 1A60     		str	r2, [r3]
 437:Core/Src/M365_Dashboard.c **** 				memcpy(target,source+6,packetsize);
 1610              		.loc 3 437 31
 1611 04ae BB68     		ldr	r3, [r7, #8]
 1612 04b0 0533     		adds	r3, r3, #5
 1613 04b2 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 437:Core/Src/M365_Dashboard.c **** 				memcpy(target,source+6,packetsize);
 1614              		.loc 3 437 22
 1615 04b4 544B     		ldr	r3, .L70+48
 1616 04b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 437:Core/Src/M365_Dashboard.c **** 				memcpy(target,source+6,packetsize);
 1617              		.loc 3 437 6
 1618 04b8 9A42     		cmp	r2, r3
 1619 04ba 31D0     		beq	.L62
 438:Core/Src/M365_Dashboard.c **** 				decr_and_flash(enc,flashstartaddress,ui16_update_size,packetsize);
 1620              		.loc 3 438 5
 1621 04bc 474B     		ldr	r3, .L70+4
ARM GAS  /tmp/ccEbWydE.s 			page 89


 1622 04be 1868     		ldr	r0, [r3]
 1623 04c0 454B     		ldr	r3, .L70
 1624 04c2 1B68     		ldr	r3, [r3]
 438:Core/Src/M365_Dashboard.c **** 				decr_and_flash(enc,flashstartaddress,ui16_update_size,packetsize);
 1625              		.loc 3 438 25
 1626 04c4 0633     		adds	r3, r3, #6
 438:Core/Src/M365_Dashboard.c **** 				decr_and_flash(enc,flashstartaddress,ui16_update_size,packetsize);
 1627              		.loc 3 438 5
 1628 04c6 4E4A     		ldr	r2, .L70+40
 1629 04c8 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1630 04ca 1946     		mov	r1, r3
 1631 04cc FFF7FEFF 		bl	memcpy
 439:Core/Src/M365_Dashboard.c **** 				flashstartaddress+=packetsize;
 1632              		.loc 3 439 5
 1633 04d0 464B     		ldr	r3, .L70+20
 1634 04d2 1968     		ldr	r1, [r3]
 1635 04d4 484B     		ldr	r3, .L70+32
 1636 04d6 1A88     		ldrh	r2, [r3]
 1637 04d8 494B     		ldr	r3, .L70+40
 1638 04da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1639 04dc 4948     		ldr	r0, .L70+44
 1640 04de FFF7FEFF 		bl	decr_and_flash
 440:Core/Src/M365_Dashboard.c **** 
 1641              		.loc 3 440 22
 1642 04e2 474B     		ldr	r3, .L70+40
 1643 04e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1644 04e6 1A46     		mov	r2, r3
 1645 04e8 404B     		ldr	r3, .L70+20
 1646 04ea 1B68     		ldr	r3, [r3]
 1647 04ec 1344     		add	r3, r3, r2
 1648 04ee 3F4A     		ldr	r2, .L70+20
 1649 04f0 1360     		str	r3, [r2]
 442:Core/Src/M365_Dashboard.c **** 		  		HAL_UART_Transmit_DMA(&huart3, (uint8_t *)&buffer, strlen(buffer));
 1650              		.loc 3 442 7
 1651 04f2 3E4B     		ldr	r3, .L70+20
 1652 04f4 1A68     		ldr	r2, [r3]
 1653 04f6 424B     		ldr	r3, .L70+40
 1654 04f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1655 04fa 1946     		mov	r1, r3
 1656 04fc 424B     		ldr	r3, .L70+48
 1657 04fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1658 0500 0093     		str	r3, [sp]
 1659 0502 0B46     		mov	r3, r1
 1660 0504 4149     		ldr	r1, .L70+52
 1661 0506 4248     		ldr	r0, .L70+56
 1662 0508 FFF7FEFF 		bl	sprintf_
 443:Core/Src/M365_Dashboard.c **** 
 1663              		.loc 3 443 58
 1664 050c 4048     		ldr	r0, .L70+56
 1665 050e FFF7FEFF 		bl	strlen
 1666 0512 0346     		mov	r3, r0
 443:Core/Src/M365_Dashboard.c **** 
 1667              		.loc 3 443 7
 1668 0514 9BB2     		uxth	r3, r3
 1669 0516 1A46     		mov	r2, r3
 1670 0518 3D49     		ldr	r1, .L70+56
 1671 051a 3E48     		ldr	r0, .L70+60
ARM GAS  /tmp/ccEbWydE.s 			page 90


 1672 051c FFF7FEFF 		bl	HAL_UART_Transmit_DMA
 1673              	.L62:
 446:Core/Src/M365_Dashboard.c **** 
 1674              		.loc 3 446 19
 1675 0520 BB68     		ldr	r3, [r7, #8]
 1676 0522 5A79     		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 1677 0524 384B     		ldr	r3, .L70+48
 1678 0526 1A70     		strb	r2, [r3]
 449:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[receiver]=message[receiver]+3;
 1679              		.loc 3 449 29
 1680 0528 344B     		ldr	r3, .L70+36
 1681 052a 0222     		movs	r2, #2
 1682 052c 9A70     		strb	r2, [r3, #2]
 450:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[command]=0x08;
 1683              		.loc 3 450 35
 1684 052e BB68     		ldr	r3, [r7, #8]
 1685 0530 0333     		adds	r3, r3, #3
 1686 0532 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 450:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[command]=0x08;
 1687              		.loc 3 450 45
 1688 0534 0333     		adds	r3, r3, #3
 1689 0536 DAB2     		uxtb	r2, r3
 450:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[command]=0x08;
 1690              		.loc 3 450 27
 1691 0538 304B     		ldr	r3, .L70+36
 1692 053a DA70     		strb	r2, [r3, #3]
 451:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[startAddress] =0;
 1693              		.loc 3 451 26
 1694 053c 2F4B     		ldr	r3, .L70+36
 1695 053e 0822     		movs	r2, #8
 1696 0540 1A71     		strb	r2, [r3, #4]
 452:Core/Src/M365_Dashboard.c **** 			addCRC((uint8_t*)ui8_tx_buffer, ui8_tx_buffer[msglength]+6);
 1697              		.loc 3 452 32
 1698 0542 2E4B     		ldr	r3, .L70+36
 1699 0544 0022     		movs	r2, #0
 1700 0546 5A71     		strb	r2, [r3, #5]
 453:Core/Src/M365_Dashboard.c **** 			HAL_HalfDuplex_EnableTransmitter(&huart1);
 1701              		.loc 3 453 49
 1702 0548 2C4B     		ldr	r3, .L70+36
 1703 054a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 453:Core/Src/M365_Dashboard.c **** 			HAL_HalfDuplex_EnableTransmitter(&huart1);
 1704              		.loc 3 453 4
 1705 054c 0633     		adds	r3, r3, #6
 1706 054e DBB2     		uxtb	r3, r3
 1707 0550 1946     		mov	r1, r3
 1708 0552 2A48     		ldr	r0, .L70+36
 1709 0554 FFF7FEFF 		bl	addCRC
 454:Core/Src/M365_Dashboard.c **** 			HAL_UART_Transmit_DMA(&huart1, (uint8_t*)ui8_tx_buffer, ui8_tx_buffer[msglength]+6);
 1710              		.loc 3 454 4
 1711 0558 07F12403 		add	r3, r7, #36
 1712 055c 1846     		mov	r0, r3
 1713 055e FFF7FEFF 		bl	HAL_HalfDuplex_EnableTransmitter
 455:Core/Src/M365_Dashboard.c **** 			}
 1714              		.loc 3 455 73
 1715 0562 264B     		ldr	r3, .L70+36
 1716 0564 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1717 0566 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccEbWydE.s 			page 91


 455:Core/Src/M365_Dashboard.c **** 			}
 1718              		.loc 3 455 4
 1719 0568 0633     		adds	r3, r3, #6
 1720 056a 9AB2     		uxth	r2, r3
 1721 056c 07F12403 		add	r3, r7, #36
 1722 0570 2249     		ldr	r1, .L70+36
 1723 0572 1846     		mov	r0, r3
 1724 0574 FFF7FEFF 		bl	HAL_UART_Transmit_DMA
 1725              	.LBE14:
 457:Core/Src/M365_Dashboard.c **** 
 1726              		.loc 3 457 4
 1727 0578 4FE0     		b	.L34
 1728              	.L41:
 462:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[receiver]=message[receiver]+3;
 1729              		.loc 3 462 29
 1730 057a 204B     		ldr	r3, .L70+36
 1731 057c 0222     		movs	r2, #2
 1732 057e 9A70     		strb	r2, [r3, #2]
 463:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[command]=0x09;
 1733              		.loc 3 463 35
 1734 0580 BB68     		ldr	r3, [r7, #8]
 1735 0582 0333     		adds	r3, r3, #3
 1736 0584 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 463:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[command]=0x09;
 1737              		.loc 3 463 45
 1738 0586 0333     		adds	r3, r3, #3
 1739 0588 DAB2     		uxtb	r2, r3
 463:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[command]=0x09;
 1740              		.loc 3 463 27
 1741 058a 1C4B     		ldr	r3, .L70+36
 1742 058c DA70     		strb	r2, [r3, #3]
 464:Core/Src/M365_Dashboard.c **** 			ui8_tx_buffer[startAddress] =0;
 1743              		.loc 3 464 26
 1744 058e 1B4B     		ldr	r3, .L70+36
 1745 0590 0922     		movs	r2, #9
 1746 0592 1A71     		strb	r2, [r3, #4]
 465:Core/Src/M365_Dashboard.c **** 			addCRC((uint8_t*)ui8_tx_buffer, ui8_tx_buffer[msglength]+6);
 1747              		.loc 3 465 32
 1748 0594 194B     		ldr	r3, .L70+36
 1749 0596 0022     		movs	r2, #0
 1750 0598 5A71     		strb	r2, [r3, #5]
 466:Core/Src/M365_Dashboard.c **** 			HAL_HalfDuplex_EnableTransmitter(&huart1);
 1751              		.loc 3 466 49
 1752 059a 184B     		ldr	r3, .L70+36
 1753 059c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 466:Core/Src/M365_Dashboard.c **** 			HAL_HalfDuplex_EnableTransmitter(&huart1);
 1754              		.loc 3 466 4
 1755 059e 0633     		adds	r3, r3, #6
 1756 05a0 DBB2     		uxtb	r3, r3
 1757 05a2 1946     		mov	r1, r3
 1758 05a4 1548     		ldr	r0, .L70+36
 1759 05a6 FFF7FEFF 		bl	addCRC
 467:Core/Src/M365_Dashboard.c **** 			HAL_UART_Transmit_DMA(&huart1, (uint8_t*)ui8_tx_buffer, ui8_tx_buffer[msglength]+6);
 1760              		.loc 3 467 4
 1761 05aa 07F12403 		add	r3, r7, #36
 1762 05ae 1846     		mov	r0, r3
 1763 05b0 FFF7FEFF 		bl	HAL_HalfDuplex_EnableTransmitter
ARM GAS  /tmp/ccEbWydE.s 			page 92


 468:Core/Src/M365_Dashboard.c **** 			}
 1764              		.loc 3 468 73
 1765 05b4 114B     		ldr	r3, .L70+36
 1766 05b6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1767 05b8 9BB2     		uxth	r3, r3
 468:Core/Src/M365_Dashboard.c **** 			}
 1768              		.loc 3 468 4
 1769 05ba 0633     		adds	r3, r3, #6
 1770 05bc 9AB2     		uxth	r2, r3
 1771 05be 07F12403 		add	r3, r7, #36
 1772 05c2 0E49     		ldr	r1, .L70+36
 1773 05c4 1846     		mov	r0, r3
 1774 05c6 FFF7FEFF 		bl	HAL_UART_Transmit_DMA
 470:Core/Src/M365_Dashboard.c **** 
 1775              		.loc 3 470 4
 1776 05ca 26E0     		b	.L34
 1777              	.L63:
 476:Core/Src/M365_Dashboard.c **** 		}//end switch
 477:Core/Src/M365_Dashboard.c **** 	}
 1778              		.loc 3 477 2
 1779 05cc 00BF     		nop
 1780 05ce 24E0     		b	.L67
 1781              	.L64:
 475:Core/Src/M365_Dashboard.c **** 		}//end switch
 1782              		.loc 3 475 4
 1783 05d0 00BF     		nop
 1784 05d2 22E0     		b	.L67
 1785              	.L65:
 233:Core/Src/M365_Dashboard.c **** 
 1786              		.loc 3 233 4
 1787 05d4 00BF     		nop
 1788 05d6 20E0     		b	.L67
 1789              	.L71:
 1790              		.align	2
 1791              	.L70:
 1792 05d8 00000000 		.word	source
 1793 05dc 00000000 		.word	target
 1794 05e0 00000000 		.word	MT
 1795 05e4 00000000 		.word	ui8_target_offset
 1796 05e8 00000000 		.word	EraseInitStruct.10034
 1797 05ec 00000000 		.word	flashstartaddress
 1798 05f0 00000000 		.word	EraseInitStruct.10038
 1799 05f4 00000000 		.word	updateflagaddress
 1800 05f8 00000000 		.word	ui16_update_size
 1801 05fc 00000000 		.word	ui8_tx_buffer
 1802 0600 00000000 		.word	packetsize.10042
 1803 0604 00000000 		.word	enc
 1804 0608 00000000 		.word	olddataposition.10043
 1805 060c 0C000000 		.word	.LC1
 1806 0610 00000000 		.word	buffer
 1807 0614 00000000 		.word	huart3
 1808              	.L66:
 332:Core/Src/M365_Dashboard.c **** 
 1809              		.loc 3 332 4
 1810 0618 00BF     		nop
 1811              	.L34:
 1812              	.L67:
ARM GAS  /tmp/ccEbWydE.s 			page 93


 478:Core/Src/M365_Dashboard.c **** }
 1813              		.loc 3 478 1
 1814 061a 00BF     		nop
 1815 061c 1837     		adds	r7, r7, #24
 1816              	.LCFI22:
 1817              		.cfi_def_cfa_offset 16
 1818 061e BD46     		mov	sp, r7
 1819              	.LCFI23:
 1820              		.cfi_def_cfa_register 13
 1821              		@ sp needed
 1822 0620 BDE88040 		pop	{r7, lr}
 1823              	.LCFI24:
 1824              		.cfi_restore 14
 1825              		.cfi_restore 7
 1826              		.cfi_def_cfa_offset 8
 1827 0624 02B0     		add	sp, sp, #8
 1828              	.LCFI25:
 1829              		.cfi_def_cfa_offset 0
 1830 0626 7047     		bx	lr
 1831              		.cfi_endproc
 1832              	.LFE122:
 1834              		.section	.text.addCRC,"ax",%progbits
 1835              		.align	1
 1836              		.global	addCRC
 1837              		.syntax unified
 1838              		.thumb
 1839              		.thumb_func
 1840              		.fpu softvfp
 1842              	addCRC:
 1843              	.LFB123:
 479:Core/Src/M365_Dashboard.c **** 
 480:Core/Src/M365_Dashboard.c **** void addCRC(uint8_t * message, uint8_t size){
 1844              		.loc 3 480 45
 1845              		.cfi_startproc
 1846              		@ args = 0, pretend = 0, frame = 16
 1847              		@ frame_needed = 1, uses_anonymous_args = 0
 1848              		@ link register save eliminated.
 1849 0000 80B4     		push	{r7}
 1850              	.LCFI26:
 1851              		.cfi_def_cfa_offset 4
 1852              		.cfi_offset 7, -4
 1853 0002 85B0     		sub	sp, sp, #20
 1854              	.LCFI27:
 1855              		.cfi_def_cfa_offset 24
 1856 0004 00AF     		add	r7, sp, #0
 1857              	.LCFI28:
 1858              		.cfi_def_cfa_register 7
 1859 0006 7860     		str	r0, [r7, #4]
 1860 0008 0B46     		mov	r3, r1
 1861 000a FB70     		strb	r3, [r7, #3]
 481:Core/Src/M365_Dashboard.c ****     unsigned long cksm = 0;
 1862              		.loc 3 481 19
 1863 000c 0023     		movs	r3, #0
 1864 000e FB60     		str	r3, [r7, #12]
 1865              	.LBB15:
 482:Core/Src/M365_Dashboard.c ****     for(int i = 2; i < size - 2; i++) cksm += message[i];
 1866              		.loc 3 482 13
ARM GAS  /tmp/ccEbWydE.s 			page 94


 1867 0010 0223     		movs	r3, #2
 1868 0012 BB60     		str	r3, [r7, #8]
 1869              		.loc 3 482 5
 1870 0014 0AE0     		b	.L73
 1871              	.L74:
 1872              		.loc 3 482 54 discriminator 3
 1873 0016 BB68     		ldr	r3, [r7, #8]
 1874 0018 7A68     		ldr	r2, [r7, #4]
 1875 001a 1344     		add	r3, r3, r2
 1876 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1877 001e 1A46     		mov	r2, r3
 1878              		.loc 3 482 44 discriminator 3
 1879 0020 FB68     		ldr	r3, [r7, #12]
 1880 0022 1344     		add	r3, r3, r2
 1881 0024 FB60     		str	r3, [r7, #12]
 1882              		.loc 3 482 35 discriminator 3
 1883 0026 BB68     		ldr	r3, [r7, #8]
 1884 0028 0133     		adds	r3, r3, #1
 1885 002a BB60     		str	r3, [r7, #8]
 1886              	.L73:
 1887              		.loc 3 482 29 discriminator 1
 1888 002c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1889 002e 023B     		subs	r3, r3, #2
 1890              		.loc 3 482 5 discriminator 1
 1891 0030 BA68     		ldr	r2, [r7, #8]
 1892 0032 9A42     		cmp	r2, r3
 1893 0034 EFDB     		blt	.L74
 1894              	.LBE15:
 483:Core/Src/M365_Dashboard.c ****     cksm ^= 0xFFFF;
 1895              		.loc 3 483 10
 1896 0036 FB68     		ldr	r3, [r7, #12]
 1897 0038 83F47F43 		eor	r3, r3, #65280
 1898 003c 83F0FF03 		eor	r3, r3, #255
 1899 0040 FB60     		str	r3, [r7, #12]
 484:Core/Src/M365_Dashboard.c ****     message[size - 2] = (uint8_t)(cksm&0xFF);
 1900              		.loc 3 484 12
 1901 0042 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1902 0044 023B     		subs	r3, r3, #2
 1903 0046 7A68     		ldr	r2, [r7, #4]
 1904 0048 1344     		add	r3, r3, r2
 1905              		.loc 3 484 25
 1906 004a FA68     		ldr	r2, [r7, #12]
 1907 004c D2B2     		uxtb	r2, r2
 1908              		.loc 3 484 23
 1909 004e 1A70     		strb	r2, [r3]
 485:Core/Src/M365_Dashboard.c ****     message[size - 1] = (uint8_t)((cksm&0xFF00) >> 8);
 1910              		.loc 3 485 49
 1911 0050 FB68     		ldr	r3, [r7, #12]
 1912 0052 190A     		lsrs	r1, r3, #8
 1913              		.loc 3 485 12
 1914 0054 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1915 0056 013B     		subs	r3, r3, #1
 1916 0058 7A68     		ldr	r2, [r7, #4]
 1917 005a 1344     		add	r3, r3, r2
 1918              		.loc 3 485 25
 1919 005c CAB2     		uxtb	r2, r1
 1920              		.loc 3 485 23
ARM GAS  /tmp/ccEbWydE.s 			page 95


 1921 005e 1A70     		strb	r2, [r3]
 486:Core/Src/M365_Dashboard.c ****     message[size] = '\0';
 1922              		.loc 3 486 12
 1923 0060 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1924 0062 7A68     		ldr	r2, [r7, #4]
 1925 0064 1344     		add	r3, r3, r2
 1926              		.loc 3 486 19
 1927 0066 0022     		movs	r2, #0
 1928 0068 1A70     		strb	r2, [r3]
 487:Core/Src/M365_Dashboard.c **** }
 1929              		.loc 3 487 1
 1930 006a 00BF     		nop
 1931 006c 1437     		adds	r7, r7, #20
 1932              	.LCFI29:
 1933              		.cfi_def_cfa_offset 4
 1934 006e BD46     		mov	sp, r7
 1935              	.LCFI30:
 1936              		.cfi_def_cfa_register 13
 1937              		@ sp needed
 1938 0070 80BC     		pop	{r7}
 1939              	.LCFI31:
 1940              		.cfi_restore 7
 1941              		.cfi_def_cfa_offset 0
 1942 0072 7047     		bx	lr
 1943              		.cfi_endproc
 1944              	.LFE123:
 1946              		.section	.text.checkCRC,"ax",%progbits
 1947              		.align	1
 1948              		.global	checkCRC
 1949              		.syntax unified
 1950              		.thumb
 1951              		.thumb_func
 1952              		.fpu softvfp
 1954              	checkCRC:
 1955              	.LFB124:
 488:Core/Src/M365_Dashboard.c **** 
 489:Core/Src/M365_Dashboard.c **** int16_t checkCRC(uint8_t * message, uint8_t size){
 1956              		.loc 3 489 50
 1957              		.cfi_startproc
 1958              		@ args = 0, pretend = 0, frame = 16
 1959              		@ frame_needed = 1, uses_anonymous_args = 0
 1960              		@ link register save eliminated.
 1961 0000 80B4     		push	{r7}
 1962              	.LCFI32:
 1963              		.cfi_def_cfa_offset 4
 1964              		.cfi_offset 7, -4
 1965 0002 85B0     		sub	sp, sp, #20
 1966              	.LCFI33:
 1967              		.cfi_def_cfa_offset 24
 1968 0004 00AF     		add	r7, sp, #0
 1969              	.LCFI34:
 1970              		.cfi_def_cfa_register 7
 1971 0006 7860     		str	r0, [r7, #4]
 1972 0008 0B46     		mov	r3, r1
 1973 000a FB70     		strb	r3, [r7, #3]
 490:Core/Src/M365_Dashboard.c ****     unsigned long cksm = 0;
 1974              		.loc 3 490 19
ARM GAS  /tmp/ccEbWydE.s 			page 96


 1975 000c 0023     		movs	r3, #0
 1976 000e FB60     		str	r3, [r7, #12]
 1977              	.LBB16:
 491:Core/Src/M365_Dashboard.c ****     for(int i = 2; i < size - 2; i++) cksm += message[i];
 1978              		.loc 3 491 13
 1979 0010 0223     		movs	r3, #2
 1980 0012 BB60     		str	r3, [r7, #8]
 1981              		.loc 3 491 5
 1982 0014 0AE0     		b	.L76
 1983              	.L77:
 1984              		.loc 3 491 54 discriminator 3
 1985 0016 BB68     		ldr	r3, [r7, #8]
 1986 0018 7A68     		ldr	r2, [r7, #4]
 1987 001a 1344     		add	r3, r3, r2
 1988 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1989 001e 1A46     		mov	r2, r3
 1990              		.loc 3 491 44 discriminator 3
 1991 0020 FB68     		ldr	r3, [r7, #12]
 1992 0022 1344     		add	r3, r3, r2
 1993 0024 FB60     		str	r3, [r7, #12]
 1994              		.loc 3 491 35 discriminator 3
 1995 0026 BB68     		ldr	r3, [r7, #8]
 1996 0028 0133     		adds	r3, r3, #1
 1997 002a BB60     		str	r3, [r7, #8]
 1998              	.L76:
 1999              		.loc 3 491 29 discriminator 1
 2000 002c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2001 002e 023B     		subs	r3, r3, #2
 2002              		.loc 3 491 5 discriminator 1
 2003 0030 BA68     		ldr	r2, [r7, #8]
 2004 0032 9A42     		cmp	r2, r3
 2005 0034 EFDB     		blt	.L77
 2006              	.LBE16:
 492:Core/Src/M365_Dashboard.c ****     cksm ^= 0xFFFF;
 2007              		.loc 3 492 10
 2008 0036 FB68     		ldr	r3, [r7, #12]
 2009 0038 83F47F43 		eor	r3, r3, #65280
 2010 003c 83F0FF03 		eor	r3, r3, #255
 2011 0040 FB60     		str	r3, [r7, #12]
 493:Core/Src/M365_Dashboard.c ****     return cksm-(message[size - 2]+(message[size - 1]<<8));
 2012              		.loc 3 493 16
 2013 0042 FB68     		ldr	r3, [r7, #12]
 2014 0044 9AB2     		uxth	r2, r3
 2015              		.loc 3 493 25
 2016 0046 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2017 0048 023B     		subs	r3, r3, #2
 2018 004a 7968     		ldr	r1, [r7, #4]
 2019 004c 0B44     		add	r3, r3, r1
 2020 004e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2021 0050 99B2     		uxth	r1, r3
 2022              		.loc 3 493 44
 2023 0052 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2024 0054 013B     		subs	r3, r3, #1
 2025 0056 7868     		ldr	r0, [r7, #4]
 2026 0058 0344     		add	r3, r3, r0
 2027 005a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2028 005c 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccEbWydE.s 			page 97


 2029              		.loc 3 493 54
 2030 005e 1B02     		lsls	r3, r3, #8
 2031 0060 9BB2     		uxth	r3, r3
 2032              		.loc 3 493 35
 2033 0062 0B44     		add	r3, r3, r1
 2034 0064 9BB2     		uxth	r3, r3
 2035              		.loc 3 493 16
 2036 0066 D31A     		subs	r3, r2, r3
 2037 0068 9BB2     		uxth	r3, r3
 2038 006a 1BB2     		sxth	r3, r3
 494:Core/Src/M365_Dashboard.c **** }
 2039              		.loc 3 494 1
 2040 006c 1846     		mov	r0, r3
 2041 006e 1437     		adds	r7, r7, #20
 2042              	.LCFI35:
 2043              		.cfi_def_cfa_offset 4
 2044 0070 BD46     		mov	sp, r7
 2045              	.LCFI36:
 2046              		.cfi_def_cfa_register 13
 2047              		@ sp needed
 2048 0072 80BC     		pop	{r7}
 2049              	.LCFI37:
 2050              		.cfi_restore 7
 2051              		.cfi_def_cfa_offset 0
 2052 0074 7047     		bx	lr
 2053              		.cfi_endproc
 2054              	.LFE124:
 2056              		.section	.bss.EraseInitStruct.10002,"aw",%nobits
 2057              		.align	2
 2060              	EraseInitStruct.10002:
 2061 0000 00000000 		.space	16
 2061      00000000 
 2061      00000000 
 2061      00000000 
 2062              		.section	.bss.EraseInitStruct.10034,"aw",%nobits
 2063              		.align	2
 2066              	EraseInitStruct.10034:
 2067 0000 00000000 		.space	16
 2067      00000000 
 2067      00000000 
 2067      00000000 
 2068              		.section	.bss.EraseInitStruct.10038,"aw",%nobits
 2069              		.align	2
 2072              	EraseInitStruct.10038:
 2073 0000 00000000 		.space	16
 2073      00000000 
 2073      00000000 
 2073      00000000 
 2074              		.section	.bss.packetsize.10042,"aw",%nobits
 2077              	packetsize.10042:
 2078 0000 00       		.space	1
 2079              		.section	.data.olddataposition.10043,"aw"
 2082              	olddataposition.10043:
 2083 0000 FF       		.byte	-1
 2084              		.text
 2085              	.Letext0:
 2086              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
ARM GAS  /tmp/ccEbWydE.s 			page 98


 2087              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 2088              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 2089              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 2090              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 2091              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_flash_ex.h"
 2092              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 2093              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 2094              		.file 12 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 2095              		.file 13 "/usr/include/newlib/sys/_types.h"
 2096              		.file 14 "/usr/include/newlib/sys/reent.h"
 2097              		.file 15 "/usr/include/newlib/sys/lock.h"
 2098              		.file 16 "/usr/include/newlib/stdlib.h"
 2099              		.file 17 "/usr/include/newlib/math.h"
 2100              		.file 18 "Core/Inc/arm_math.h"
 2101              		.file 19 "Core/Inc/main.h"
 2102              		.file 20 "Core/Inc/motor.h"
 2103              		.file 21 "Core/Inc/M365_memory_table.h"
ARM GAS  /tmp/ccEbWydE.s 			page 99


DEFINED SYMBOLS
                            *ABS*:0000000000000000 M365_Dashboard.c
     /tmp/ccEbWydE.s:16     .text.__NVIC_SystemReset:0000000000000000 $t
     /tmp/ccEbWydE.s:23     .text.__NVIC_SystemReset:0000000000000000 __NVIC_SystemReset
     /tmp/ccEbWydE.s:89     .text.__NVIC_SystemReset:0000000000000024 $d
                            *COM*:0000000000000040 huart3
     /tmp/ccEbWydE.s:96     .bss.ui8_rx_buffer:0000000000000000 $d
     /tmp/ccEbWydE.s:99     .bss.ui8_rx_buffer:0000000000000000 ui8_rx_buffer
     /tmp/ccEbWydE.s:102    .bss.ui8_dashboardmessage:0000000000000000 $d
     /tmp/ccEbWydE.s:105    .bss.ui8_dashboardmessage:0000000000000000 ui8_dashboardmessage
     /tmp/ccEbWydE.s:108    .bss.enc:0000000000000000 $d
     /tmp/ccEbWydE.s:111    .bss.enc:0000000000000000 enc
     /tmp/ccEbWydE.s:114    .bss.buffer:0000000000000000 $d
     /tmp/ccEbWydE.s:117    .bss.buffer:0000000000000000 buffer
     /tmp/ccEbWydE.s:120    .bss.ui8_tx_buffer:0000000000000000 $d
     /tmp/ccEbWydE.s:123    .bss.ui8_tx_buffer:0000000000000000 ui8_tx_buffer
     /tmp/ccEbWydE.s:128    .data.ui8_oldpointerposition:0000000000000000 ui8_oldpointerposition
     /tmp/ccEbWydE.s:133    .bss.ui8_recentpointerposition:0000000000000000 ui8_recentpointerposition
     /tmp/ccEbWydE.s:134    .bss.ui8_recentpointerposition:0000000000000000 $d
     /tmp/ccEbWydE.s:138    .data.ui8_messagestartpos:0000000000000000 ui8_messagestartpos
     /tmp/ccEbWydE.s:143    .bss.ui8_messagelength:0000000000000000 ui8_messagelength
     /tmp/ccEbWydE.s:144    .bss.ui8_messagelength:0000000000000000 $d
     /tmp/ccEbWydE.s:148    .bss.ui8_state:0000000000000000 ui8_state
     /tmp/ccEbWydE.s:149    .bss.ui8_state:0000000000000000 $d
     /tmp/ccEbWydE.s:151    .bss.ui32_timeoutcounter:0000000000000000 $d
     /tmp/ccEbWydE.s:154    .bss.ui32_timeoutcounter:0000000000000000 ui32_timeoutcounter
     /tmp/ccEbWydE.s:157    .bss.ui16_update_size:0000000000000000 $d
     /tmp/ccEbWydE.s:160    .bss.ui16_update_size:0000000000000000 ui16_update_size
     /tmp/ccEbWydE.s:163    .data.flashstartaddress:0000000000000000 $d
     /tmp/ccEbWydE.s:166    .data.flashstartaddress:0000000000000000 flashstartaddress
     /tmp/ccEbWydE.s:169    .data.updateflagaddress:0000000000000000 $d
     /tmp/ccEbWydE.s:172    .data.updateflagaddress:0000000000000000 updateflagaddress
     /tmp/ccEbWydE.s:175    .data.sysinfoaddress:0000000000000000 $d
     /tmp/ccEbWydE.s:178    .data.sysinfoaddress:0000000000000000 sysinfoaddress
     /tmp/ccEbWydE.s:181    .data.proc_ID_address:0000000000000000 $d
     /tmp/ccEbWydE.s:184    .data.proc_ID_address:0000000000000000 proc_ID_address
     /tmp/ccEbWydE.s:191    .data.sys_info:0000000000000000 sys_info
     /tmp/ccEbWydE.s:188    .data.sys_info:0000000000000000 $d
                            *COM*:0000000000000004 target
                            *COM*:0000000000000004 source
     /tmp/ccEbWydE.s:235    .bss.ui8_target_offset:0000000000000000 ui8_target_offset
     /tmp/ccEbWydE.s:236    .bss.ui8_target_offset:0000000000000000 $d
     /tmp/ccEbWydE.s:240    .bss.ui8_source_offset:0000000000000000 ui8_source_offset
     /tmp/ccEbWydE.s:241    .bss.ui8_source_offset:0000000000000000 $d
                            *COM*:00000000000001a0 MT
                            *COM*:0000000000000001 msg65
                            *COM*:0000000000000001 msg64
                            *COM*:0000000000000001 gen_msg
     /tmp/ccEbWydE.s:247    .rodata:0000000000000000 $d
     /tmp/ccEbWydE.s:251    .text.M365Dashboard_init:0000000000000000 $t
     /tmp/ccEbWydE.s:258    .text.M365Dashboard_init:0000000000000000 M365Dashboard_init
     /tmp/ccEbWydE.s:498    .text.M365Dashboard_init:0000000000000170 $d
     /tmp/ccEbWydE.s:2060   .bss.EraseInitStruct.10002:0000000000000000 EraseInitStruct.10002
     /tmp/ccEbWydE.s:511    .text.search_DashboardMessage:0000000000000000 $t
     /tmp/ccEbWydE.s:518    .text.search_DashboardMessage:0000000000000000 search_DashboardMessage
     /tmp/ccEbWydE.s:885    .text.process_DashboardMessage:0000000000000000 process_DashboardMessage
     /tmp/ccEbWydE.s:858    .text.search_DashboardMessage:00000000000001f8 $d
ARM GAS  /tmp/ccEbWydE.s 			page 100


     /tmp/ccEbWydE.s:878    .text.process_DashboardMessage:0000000000000000 $t
     /tmp/ccEbWydE.s:1954   .text.checkCRC:0000000000000000 checkCRC
     /tmp/ccEbWydE.s:943    .text.process_DashboardMessage:0000000000000058 $d
     /tmp/ccEbWydE.s:951    .text.process_DashboardMessage:0000000000000078 $t
     /tmp/ccEbWydE.s:1842   .text.addCRC:0000000000000000 addCRC
     /tmp/ccEbWydE.s:1371   .text.process_DashboardMessage:0000000000000318 $d
     /tmp/ccEbWydE.s:1379   .text.process_DashboardMessage:0000000000000330 $t
     /tmp/ccEbWydE.s:1792   .text.process_DashboardMessage:00000000000005d8 $d
     /tmp/ccEbWydE.s:2066   .bss.EraseInitStruct.10034:0000000000000000 EraseInitStruct.10034
     /tmp/ccEbWydE.s:2072   .bss.EraseInitStruct.10038:0000000000000000 EraseInitStruct.10038
     /tmp/ccEbWydE.s:2077   .bss.packetsize.10042:0000000000000000 packetsize.10042
     /tmp/ccEbWydE.s:2082   .data.olddataposition.10043:0000000000000000 olddataposition.10043
     /tmp/ccEbWydE.s:1810   .text.process_DashboardMessage:0000000000000618 $t
     /tmp/ccEbWydE.s:1835   .text.addCRC:0000000000000000 $t
     /tmp/ccEbWydE.s:1947   .text.checkCRC:0000000000000000 $t
     /tmp/ccEbWydE.s:2057   .bss.EraseInitStruct.10002:0000000000000000 $d
     /tmp/ccEbWydE.s:2063   .bss.EraseInitStruct.10034:0000000000000000 $d
     /tmp/ccEbWydE.s:2069   .bss.EraseInitStruct.10038:0000000000000000 $d
     /tmp/ccEbWydE.s:2078   .bss.packetsize.10042:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_UART_Receive_DMA
Error_Handler
HAL_FLASH_Unlock
HAL_FLASHEx_Erase
memcpy
HAL_FLASH_Program
HAL_FLASH_Lock
HAL_GPIO_TogglePin
map
HAL_HalfDuplex_EnableTransmitter
HAL_UART_Transmit_DMA
decr_and_flash
sprintf_
strlen
